<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anny Chang - F2E &amp; UI Designer</title>
  
  <subtitle>Design thinking is EVERYWHERE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://annilla.github.io/"/>
  <updated>2023-05-21T16:00:00.000Z</updated>
  <id>http://annilla.github.io/</id>
  
  <author>
    <name>Anny Chang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anny Chang&#39;s Resume - 履歷</title>
    <link href="http://annilla.github.io/3017/12/03/Resume/"/>
    <id>http://annilla.github.io/3017/12/03/Resume/</id>
    <published>3017-12-02T16:00:00.000Z</published>
    <updated>2023-05-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>My resume.</p><span id="more"></span><h1 id="Professional-Info"><a href="#Professional-Info" class="headerlink" title="Professional Info"></a>Professional Info</h1><h2 id="專長"><a href="#專長" class="headerlink" title="專長"></a>專長</h2><ul><li><p>設計 <code>UI</code> 介面、 <code>RWD</code> 網頁製作、 <code>SPA</code> 程式撰寫</p></li><li><p>擅用設計 <code>UI</code> 軟體（<code>Figma</code>, <code>Sketch</code>, <code>Adobe XD</code>, <code>Illustrator</code>, <code>Photoshop</code>）</p></li></ul><h2 id="研討會-x2F-工作坊"><a href="#研討會-x2F-工作坊" class="headerlink" title="研討會 &#x2F; 工作坊"></a>研討會 &#x2F; 工作坊</h2><table><thead><tr><th>時間</th><th>研討會 &#x2F; 工作坊</th><th>分享主題</th></tr></thead><tbody><tr><td>2019.11</td><td>Kingston 2019 內訓</td><td><a href="https://www.canva.com/design/DADpqbMNvJk/kFNwFdNo0_4FFcrbAj53HA/view?utm_content=DADpqbMNvJk&utm_campaign=designshare&utm_medium=link&utm_source=homepage_design_menu">使用 Hexo 做線上說明文件</a></td></tr><tr><td>2019.11</td><td>Kingston 2019 內訓</td><td><a href="https://www.canva.com/design/DADqB4aQEns/_iyVg0rxO38YU409MwbKIA/view?utm_content=DADqB4aQEns&utm_campaign=designshare&utm_medium=link&utm_source=homepage_design_menu">Start our journey with vue</a></td></tr><tr><td>2019.09</td><td>Kingston 2019 內訓</td><td><a href="https://www.canva.com/design/DADkDdvRR9A/JzfYMOKl6_2DLqeFH-BOww/view?utm_content=DADkDdvRR9A&utm_campaign=designshare&utm_medium=link&utm_source=sharebutton">Why Vue.js</a></td></tr><tr><td>2017.08</td><td>Kingston 2017 Mobile Team Workshop</td><td><a href="https://speakerdeck.com/annilla/use-webpack-plus-vue-loader-in-vs2017">Use Webpack + Vue-Loader in VS2017</a></td></tr><tr><td>2016.11</td><td>前端魔法師十一月份小聚</td><td><a href="https://speakerdeck.com/annilla/facebook-instant-articles-ce-shi-dao-fa-bu">Facebook Instant Articles - 測試到發布</a></td></tr></tbody></table><h2 id="證照"><a href="#證照" class="headerlink" title="證照"></a>證照</h2><h3 id="Microsoft-amp-Adobe-Badges-國際-Microsoft-amp-ACA-認證獎章"><a href="#Microsoft-amp-Adobe-Badges-國際-Microsoft-amp-ACA-認證獎章" class="headerlink" title="Microsoft &amp; Adobe Badges (國際 Microsoft &amp; ACA 認證獎章)"></a><a href="https://www.youracclaim.com/users/chiao-ni-chang">Microsoft &amp; Adobe Badges (國際 Microsoft &amp; ACA 認證獎章)</a></h3><table><thead><tr><th>時間</th><th>證書</th></tr></thead><tbody><tr><td>2022.07</td><td>國際 Microsoft Certified: Power Platform Fundamentals</td></tr><tr><td>2020.03</td><td>國際 Microsoft Certified: Azure Fundamentals</td></tr><tr><td>2017.03</td><td>國際 TOEIC 藍色證書 765分</td></tr><tr><td>2015.11</td><td>國家技術士網頁設計丙級證照</td></tr><tr><td>2014.12</td><td>國際 ACA Illustrator CS6 證照</td></tr><tr><td>2013.12</td><td>Adobe Master Of Rich Media Web Design Courses 證書</td></tr><tr><td>2013.06</td><td>中華民國斐陶斐榮譽學會榮譽會員 （碩士應屆第一名）</td></tr><tr><td>2013.03</td><td>國際 ACA Flash CS6 證照</td></tr><tr><td>2013.03</td><td>國際 ACA Dreamweaver CS6 證照</td></tr><tr><td>2012.11</td><td>國際 ACA Photoshop CS6 證照</td></tr><tr><td>2011.12</td><td>Adobe Digital Graphic Design Courses 證書</td></tr><tr><td>高中</td><td>全民英檢中級 證書</td></tr></tbody></table><h2 id="受訓"><a href="#受訓" class="headerlink" title="受訓"></a>受訓</h2><table><thead><tr><th>時間</th><th>課程</th></tr></thead><tbody><tr><td>2022.07</td><td>Skilltree 精準解析 .NET Thread 執行緒</td></tr><tr><td>2022.07</td><td>Skilltree 精準解析 .NET Task 工作</td></tr><tr><td>2021.08</td><td>Become An Awesome Team Player 神隊友打造計畫 (卡內基訓練)</td></tr><tr><td>2021.04</td><td>TOC管理思維與方法課程</td></tr><tr><td>2019.09</td><td>台灣微軟技術中心 Microsoft DevOps Workshop</td></tr><tr><td>2018.10</td><td>29761 使用微軟 T-SQL 查詢資料</td></tr><tr><td>2017.09</td><td>Skilltree JavaScript 實務測試新手班 第三梯</td></tr><tr><td>2017.06</td><td>網站測試開發 with WebdriverIO 實戰講堂</td></tr><tr><td>2014.11</td><td>色彩溝通立即上手</td></tr><tr><td>2014.10</td><td>網路活動創意規劃與會員行銷管理</td></tr><tr><td>2014.09</td><td>如何提升網路關鍵字行銷的成效</td></tr><tr><td>2014.09</td><td>JR-基層管理幹部工作關係與團隊力提昇</td></tr><tr><td>2014.08</td><td>eDM電子郵件行銷及電子報經營</td></tr><tr><td>2014.08</td><td>JM-基層幹部工作改善與執行力提昇培訓</td></tr></tbody></table><h1 id="Work​-Experience​​​"><a href="#Work​-Experience​​​" class="headerlink" title="Work​ Experience​​​"></a>Work​ Experience​​​</h1><table><thead><tr><th>時間</th><th>公司</th><th>職稱</th></tr></thead><tbody><tr><td>2017.06.12 - NOW</td><td>Kingston Technology</td><td>UI Designer &amp; Front-end Developer</td></tr><tr><td>2015.04.06 - 2017.06.11</td><td>JUKSY 街星</td><td>網頁UI設計 &#x2F; 網頁前端工程師</td></tr><tr><td>2013.07.01 - 2015.04.03</td><td>微璽科技股份有限公司</td><td>商業設計 &#x2F; 網頁UI設計</td></tr></tbody></table><h1 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h1><table><thead><tr><th>時間</th><th>學校</th></tr></thead><tbody><tr><td>2011 - 2013</td><td>國立台灣師範大學, 數學系碩士班數學教育組</td></tr><tr><td>2007 - 2011</td><td>國立台灣師範大學, 數學系學士班</td></tr><tr><td>2004 - 2007</td><td>中山女高</td></tr></tbody></table><h1 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h1><ul><li><p>FIGMA &#x2F; SKETCH &#x2F; ADOBE XD &#x2F; PHOTOSHOP &#x2F; ILLUSTRATOR</p></li><li><p>VSCODE &#x2F; VS</p></li><li><p>GITHUB &#x2F; AZURE DEVOPS &#x2F; SOURCETREE</p></li><li><p>NPM</p></li><li><p>Vite &#x2F; WEBPACK &#x2F; GULP</p></li></ul><h1 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h1><ul><li><p>HTML &#x2F; PUG</p></li><li><p>CSS &#x2F; SASS(SCSS) &#x2F; STYLUS &#x2F; POSTCSS</p></li><li><p>JS &#x2F; JQUERY &#x2F; VUE &#x2F; ES6 &#x2F; SVELTE</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My resume.&lt;/p&gt;
    
    </summary>
    
      <category term="Resume" scheme="http://annilla.github.io/categories/Resume/"/>
    
    
  </entry>
  
  <entry>
    <title>Anny Chang&#39;s Portfolio - 作品集</title>
    <link href="http://annilla.github.io/3017/12/01/Portfolio/"/>
    <id>http://annilla.github.io/3017/12/01/Portfolio/</id>
    <published>3017-11-30T16:00:00.000Z</published>
    <updated>2019-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>My portfolio.</p><span id="more"></span><h1 id="Design-Collection"><a href="#Design-Collection" class="headerlink" title="Design Collection"></a>Design Collection</h1><h2 id="Behance-https-www-behance-net-annilla"><a href="#Behance-https-www-behance-net-annilla" class="headerlink" title="Behance: https://www.behance.net/annilla"></a>Behance: <a href="https://www.behance.net/annilla">https://www.behance.net/annilla</a></h2><h1 id="Web-Collection"><a href="#Web-Collection" class="headerlink" title="Web Collection"></a>Web Collection</h1><table><thead><tr><th>作品</th><th>分類</th><th>內容</th></tr></thead><tbody><tr><td>系統</td><td>公司</td><td>IC Backend Manufacturing Operations (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Workflow CN (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Depanel Monitor (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Smart Factory (Web)</td></tr><tr><td>系統</td><td>公司</td><td>SSO (Web)</td></tr><tr><td>系統</td><td>公司</td><td>OPscan (Web)</td></tr><tr><td>網頁</td><td>公司</td><td>Online User Manual (Hexo)</td></tr><tr><td>網頁</td><td>公司</td><td>Reflow Supplement Page (Web)</td></tr><tr><td>系統</td><td>公司</td><td>System Profile Management (Web)</td></tr><tr><td>系統</td><td>公司</td><td>NXT Monitor (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Workflow Compliance (Web)</td></tr><tr><td>網頁</td><td>公司</td><td>Kingston Mobile Team Portal (Hexo)</td></tr><tr><td>系統</td><td>公司</td><td>B2B (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Material Requirement Planning (Web, VSTO)</td></tr><tr><td>系統</td><td>公司</td><td>Empolyee Authentication Service (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Notes SignOff APP (Mobile Web App)</td></tr><tr><td>系統</td><td>公司</td><td>Quotation System (Web &amp; iOS App Design)</td></tr><tr><td>網站</td><td>綜合</td><td><a href="https://www.juksy.com/">JUKSY 街星</a></td></tr><tr><td>網頁</td><td>展覽</td><td><a href="https://www.juksy.com/events/avengersstation">《復仇者聯盟》世界巡迴展</a></td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/MMPR2017">《金剛戰士》Power Rangers GO GO！</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/idareyoujune">放肆越限 ● I Dare You</a> - 陳建州 &amp; 四葉草</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/dope2017may">回家才DOPE ● Home Sweet Home</a> - 兄弟本色 &amp; 邵雨薇</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/northsouth2017April">南北潮什麼 &#x2F; From North to South</a> - 盧廣仲 &amp; 柯佳嬿</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/outofcontrol2017">瘋面人物 &#x2F; Out of control</a> - 許瑋甯 &amp; 吳慷仁</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1702valentine/">我單故我在 Valentine, So what?</a> - 藍正龍</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1701F5reborn">人生F5鍵 Reborn</a> - 瑤瑤</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1612waittoaction">扳勢回潮　等不及的蓄勢待發！ Wait  to action</a> - 吳建豪</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/assassin2016creed">刺客教條 12&#x2F;28(三)跨年最強檔</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1611donjudge">Don’t Judge me！玩跳．TONE</a> - 安心亞</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/fantastic2016beasts">《怪獸與牠們的產地》JUKSY特別企劃</a></td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611angeliapets">耍YOUNG無極限，玩酷做自己</a> - Angelia  &amp;  Pets</td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611samsung360">精彩視界 一觸可及</a> - SAMSUNG</td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611fashioncity">分享屬於你的[城市時尚]─你的城市‧由你演繹</a> - SAMSUNG 打卡分享照片</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1610bromance">The Bromance！絕對合拍</a> - 蕭敬騰</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1609intoblack">大勢黑潮 INTO BLACK</a> - SPEXIAL</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/train2016zombie">屍速列車 屍裡逃生</a></td></tr><tr><td>網頁</td><td>遊戲</td><td><a href="https://www.juksy.com/events/pokemon2016go">成神之路有你有我！寶可夢全攻略</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1608hithot">熱浪來襲HITHOT</a> - 劉以豪</td></tr><tr><td>網頁</td><td>穿搭</td><td><a href="https://www.juksy.com/events/summer2016girlstyle">熱辣無極限！2016年夏日潮妞穿搭公式</a></td></tr><tr><td>網頁</td><td>穿搭</td><td><a href="https://www.juksy.com/events/summer2016menstyle">型到出火！體感41度的TO DO LIST</a></td></tr><tr><td>網頁</td><td>投票活動</td><td>JUKSY超新星（連結失效）</td></tr><tr><td>網頁</td><td>名人</td><td>用歌聲唱出最真的自己（連結失效） - 汪小敏</td></tr><tr><td>網站</td><td>公司</td><td><a href="http://www.taxxtron-tayu.com/">京達國際股份有限公司</a></td></tr><tr><td>網站</td><td>購物</td><td><a href="http://web.ntnu.edu.tw/~60040004S/">LOVEBABY讓您在家也能呵護寶貝</a></td></tr><tr><td>網站</td><td>研討會</td><td><a href="http://tame.tw/pme36/">PME36</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My portfolio.&lt;/p&gt;
    
    </summary>
    
      <category term="Portfolio" scheme="http://annilla.github.io/categories/Portfolio/"/>
    
    
      <category term="Portfolio" scheme="http://annilla.github.io/tags/Portfolio/"/>
    
      <category term="作品集" scheme="http://annilla.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>RPA for VSTO UI Testing</title>
    <link href="http://annilla.github.io/2023/09/01/Testing/RPA-for-VSTO-UI-Testing/"/>
    <id>http://annilla.github.io/2023/09/01/Testing/RPA-for-VSTO-UI-Testing/</id>
    <published>2023-08-31T16:00:00.000Z</published>
    <updated>2023-08-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近專案越來越多 Excel 的 VSTO 設計, 但做完後需要大量的手動測試, 每次測試都是看心情, 所以總是會有漏掉的部分. 但有些功能特別重要, 像是修改資料, 寄信等動作. 至少這對 User 來說做重要的功能要先統一測試規格, 加速動作, 減少人工測試的時間, 特別情況再用手動測試就好。這篇文章紀錄用 Microsoft RPA 做 VSTO 測試時, 流程動作設定的技巧。</p><span id="more"></span><h1 id="技巧一-VSTO-開啟"><a href="#技巧一-VSTO-開啟" class="headerlink" title="技巧一 VSTO 開啟"></a>技巧一 VSTO 開啟</h1><p>VSTO 通常開啟會需要一段比較長的時間, 因為包含連接 API, 準備資料, 產生 UI 等等. 而且每次開啟的時間都不一樣長, 所以不介意用 RPA 開. 這邊的做法是建議先開好 VSTO, 然後請 RPA 直接針對開好的 VSTO 做事情.</p><p>Main 主要流程如下:</p><ol><li>附加至執行中的 Excel: 設定開啟的 VSTO 檔案名稱. <strong>注意! 這裡會產生變數 ExcelInstance 代表此 Excel 給下一步驟使用.</strong></li><li>設定使用中 Excel 工作表: 用剛剛產生的 ExcelInstance 變數, 設定啟用工作表時搭配 “名字” 並輸入要執行的 sheet 名稱.</li></ol><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147011739859288155/image.png" alt="Main 流程 - VSTO 開啟"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147012024975507596/image.png" alt="附加至執行中的 Excel"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147012324729819166/image.png" alt="設定使用中 Excel 工作表"></p><h1 id="技巧二-輸入資料至表格"><a href="#技巧二-輸入資料至表格" class="headerlink" title="技巧二 輸入資料至表格"></a>技巧二 輸入資料至表格</h1><p>接下來要針對設定好的 sheet 做資料輸入和批次貼上的動作。</p><h2 id="從-Excel-讀取批次貼上"><a href="#從-Excel-讀取批次貼上" class="headerlink" title="從 Excel 讀取批次貼上"></a>從 Excel 讀取批次貼上</h2><p>Main 主要流程如下:</p><ol><li>從 Excel 工作表中取得第一個可用資料行&#x2F;資料列: 會取得空白的行數 (FirstFreeColumn) 跟列數 (FirstFreeRow), 等下貼資料用.</li><li>啟動 Excel: 選擇讀取的資料來源檔案並儲存到變數 ExcelFlashData.</li><li>讀取自 Excel 工作表: 從 ExcelFlashData 讀取表格儲存資料到變數 FlashData. <strong>注意! 這邊記得把進階點開, 選擇”第一行範圍包含欄名稱”, 這樣他才知道第一列為表頭, 等下才不會貼到表頭, 只會貼內容的部分.</strong></li><li>寫入 Excel 工作表: 將資料 FlashData 貼到欄 A 和 列 FirstFreeRow.</li><li>關閉 Excel: 複製完將 ExcelFlashData 檔案關閉. 不關的話會一直留在畫面上.</li></ol><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147054666849468487/image.png" alt="Main 流程 - 從 Excel 讀取批次貼上"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147057076149964840/image.png" alt="從 Excel 工作表中取得第一個可用資料行/資料列"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147057429788504094/image.png?width=483&height=423" alt="啟動 Excel"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147057753844629614/image.png?width=597&height=423" alt="讀取自 Excel 工作表"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147057998620012615/image.png?width=517&height=423" alt="寫入 Excel 工作表"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147058212470788136/image.png" alt="關閉 Excel"></p><h2 id="輸入當天日期"><a href="#輸入當天日期" class="headerlink" title="輸入當天日期"></a>輸入當天日期</h2><p>也可以讀取電腦的當下時間寫入特定的某個欄位中.</p><p>Main 主要流程如下:</p><ol><li>取得目前日期與時間: 將目前日期時間除存在變數 CurrentDateTime.</li><li>寫入 Excel 工作表: 可將 CurrentDateTime 拆分為年,月,日再重新組合成想要的格式貼到指定欄位中.</li></ol><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147059155652333698/image.png" alt="Main 流程 - 輸入當天日期"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147060074372661318/image.png" alt="取得目前日期與時間"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147060328362954752/image.png?width=509&height=423" alt="寫入 Excel 工作表"></p><h1 id="技巧三-Ribbon-操作"><a href="#技巧三-Ribbon-操作" class="headerlink" title="技巧三 Ribbon 操作"></a>技巧三 Ribbon 操作</h1><p>Ribbon 主要就是靠 RPA 新增 UI 元素的方式, 再配合滑鼠鍵盤命令完成操作模擬.</p><h2 id="下拉選單"><a href="#下拉選單" class="headerlink" title="下拉選單"></a>下拉選單</h2><p>Main 主要流程如下:</p><ol><li>按一下視窗中的 UI 元素: 要先新增下拉選單的 UI 元素, 然後請 RPA 去點此元素。</li><li>傳送按鍵: <strong>注意! 因為下拉選單是浮動選單, RPA 用內建的清單選擇會選不到, 所以這裡是用鍵盤傳送方向鍵(下-&gt;下-&gt;Enter)的方式來選擇要的下拉項目。</strong></li></ol><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147061566374690816/image.png" alt="Main 流程 - 下拉選單"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147063753892974602/image.png?width=417&height=423" alt="新增下拉選單的 UI 元素"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147063977449357402/image.png" alt="按一下視窗中的 UI 元素"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147064169573654538/image.png?width=460&height=423" alt="傳送按鍵"></p><h2 id="輸入框和按鈕"><a href="#輸入框和按鈕" class="headerlink" title="輸入框和按鈕"></a>輸入框和按鈕</h2><p>Main 主要流程如下:</p><ol><li>填入視窗中的文字欄位: 要先新增輸入框的 UI 元素, 然後請 RPA 去輸入要的文字訊息。</li><li>按一下視窗中的 UI 元素: 要先新增按鈕的 UI 元素, 然後請 RPA 去點擊。</li></ol><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147066109779001364/image.png" alt="Main 流程 - 輸入框和按鈕"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147067256401043486/image.png?width=417&height=423" alt="新增輸入框的 UI 元素"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147067575340113930/image.png?width=520&height=423" alt="填入視窗中的文字欄位"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147067817154330704/image.png?width=420&height=423" alt="新增按鈕的 UI 元素"></p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1147068001946959882/image.png" alt="按一下視窗中的 UI 元素"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近專案越來越多 Excel 的 VSTO 設計, 但做完後需要大量的手動測試, 每次測試都是看心情, 所以總是會有漏掉的部分. 但有些功能特別重要, 像是修改資料, 寄信等動作. 至少這對 User 來說做重要的功能要先統一測試規格, 加速動作, 減少人工測試的時間, 特別情況再用手動測試就好。這篇文章紀錄用 Microsoft RPA 做 VSTO 測試時, 流程動作設定的技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="RPA" scheme="http://annilla.github.io/categories/RPA/"/>
    
    
      <category term="Testing" scheme="http://annilla.github.io/tags/Testing/"/>
    
      <category term="RPA" scheme="http://annilla.github.io/tags/RPA/"/>
    
  </entry>
  
  <entry>
    <title>Figma 2023 Conf - The Future of Responsive Design</title>
    <link href="http://annilla.github.io/2023/08/01/UXUI/Figma-2023-Conf-The-Future-of-Responsive-Design/"/>
    <id>http://annilla.github.io/2023/08/01/UXUI/Figma-2023-Conf-The-Future-of-Responsive-Design/</id>
    <published>2023-07-31T16:00:00.000Z</published>
    <updated>2023-07-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://config.figma.com/">Figma Conf 2023</a> 內容真的很棒很豐富～除了設計以外, 還有前端工程, 專案管理等多面向的內容。這次選了 Google 前端工程師分享未來 RWD 的新功能，聽了覺得很興奮～想來分享一下ＸＤ</p><span id="more"></span><h1 id="dvh"><a href="#dvh" class="headerlink" title="dvh"></a>dvh</h1><p>你曾經有感受手機瀏覽器因滑動產生外框縮放, 導致 web 畫面出現奇怪的空白嗎? 新的單位 dvh 是誕生來解決此問題的. 當手機一開始進到頁面還沒往下滑的時候, 畫面大小是 svh (smallest viewport height). 當使用者往下滑頁面後, 手機瀏覽器會自動將上下 bar 縮起來, 這時候畫面大小是 lvh (largest viewport height). 但我們如果用了 dvh (dynamic viewport height), 就不怕瀏覽器外框縮放導致計算誤差, 100dvh 永遠都是使用者可視範圍,真棒!</p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1135776457277308948/2023-08-01_11-22-38.png?width=757&height=423" alt="dvh"></p><h1 id="oklch"><a href="#oklch" class="headerlink" title="oklch"></a>oklch</h1><p>顏色有新的動態數學計算顏色函數 oklch, 讓顯示出來的顏色更鮮豔. 如下圖, 左方為一般漸層從粉紅色到藍色, 可以明顯看到中間顏色灰灰髒髒的. 右方使用一樣的漸層端點, 但中間顏色卻是明亮飽和的. 以前都是用人工的方式去加中間的色票來達到一樣的效果, 但現在可以使用新的 oklch 計算方式, 只需要輸入兩端點顏色, 中間就會計算出漂亮飽和的漸進顏色, 非常方便!</p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1135780003099987998/2023-08-01_11-43-44.png?width=751&height=423" alt="oklch"></p><h1 id="container-query"><a href="#container-query" class="headerlink" title="container query"></a>container query</h1><p>這個項目是令我最興奮的了!以前都是用 media query, 用整個螢幕寬度來決定 element 的顯示變化. 但其實這樣切得很死!不夠彈性. 新的 container query 來了!! 用 container query 可以讓子元素自己感知外框的大小變化, 自己決定要變成什麼樣子!這樣就可以只設計一個 element, 然後放到不同的地方, 像是放在 aside 就會自動縮小樣式, 放在 main 就可以放大顯示更多資訊, 同一個元素就能解決!不用分開做. 能做到原子元素重複利用, 真是令人興奮!!</p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1135782806157525042/2023-08-01_11-54-35.png?width=765&height=423" alt="container query"></p><h1 id="text-wrap-pretty"><a href="#text-wrap-pretty" class="headerlink" title="text-wrap pretty"></a>text-wrap pretty</h1><p>另一個有趣的事情是文字通常很長被分段都不盡理想, 這裡有一個新概念是在 text-wrap 放 pretty, 讓他自動斷行且看起來是平衡漂亮的. 這個看起來也很威!不過還在實驗階段!希望各大瀏覽器都能支持!!XD</p><p><img src="https://media.discordapp.net/attachments/1135775611948900472/1135785515354959993/2023-08-01_12-04-55.png?width=754&height=423" alt="text-wrap pretty"></p><p>當然內容不只這幾樣啦!還有很多比較細節的小地方都很有趣!有興趣的人可以去看正片 <a href="https://config.figma.com/video-on-demand/6329932796112">The future of responsive design</a>!下次見啦!</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://config.figma.com/video-on-demand/6329932796112">The future of responsive design</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://config.figma.com/&quot;&gt;Figma Conf 2023&lt;/a&gt; 內容真的很棒很豐富～除了設計以外, 還有前端工程, 專案管理等多面向的內容。這次選了 Google 前端工程師分享未來 RWD 的新功能，聽了覺得很興奮～想來分享一下ＸＤ&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Recraft.ai - SVG Illustration</title>
    <link href="http://annilla.github.io/2023/07/05/UXUI/Recraft-ai-SVG-Illustration/"/>
    <id>http://annilla.github.io/2023/07/05/UXUI/Recraft-ai-SVG-Illustration/</id>
    <published>2023-07-04T16:00:00.000Z</published>
    <updated>2023-07-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前已經有寫過關於用 AI 生成圖片的 <a href="http://annilla.github.io/2022/09/14/UXUI/Midjourney-AI-Art/">Midjourney</a>, 但是出來的圖片通常都是點陣圖。想要用在系統 UI 介面上的向量圖, 設計師通常想要的是 SVG 格式, 最近發現了一款 <a href="https://www.recraft.ai/">Recraft.ai</a> 他剛好就可以生成向量 SVG 格式, 而且出來的風格很適合拿來放在 UI 介面上, 非常好用！！</p><span id="more"></span><h1 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h1><p>目前只有支援 google 帳號登入, 就直接連接谷歌帳號即可開始使用！</p><p><img src="https://lh3.googleusercontent.com/pw/AJFCJaVLf3p2EaceGu9gfPNY7T2gF7Wpbx3O9iga5MGRtnyxt-WsibqPfcVQ1TNbObfGQ5b74SGxribbqctw5J4KLstYx_30IktklmW1jw91KwVl_R-B6-77gRIt3Ss_Kqspi19POBBIWX1dZOzyMLTwbQ607g=w2560-h1378-s-no?authuser=0" alt="登入"></p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>Step1. 可以選擇生成的插畫風格, 我這邊就不動預設是 Flat 2.0<br>Step2. 輸入文生圖的關鍵字<br>Step3. 設定圖片的主題色調, 若不設系統會自動上色, 我這邊是因為已經有要搭配的系統, 所以先設定<br>Step4. 按 Recraft 讓系統自動產生圖, 需要等一會兒, 但不會太久挺快的<br>Step5. AI 會生成兩張圖供使用者選擇, 可以選擇一張做更細部的調整<br>Step6. 如果想要多一點選擇, 也可新增一個圖層請 AI 再生成, 最後再決定哪張就好</p><p><img src="https://lh3.googleusercontent.com/pw/AJFCJaXHuliyqP_lcwUx-Pw1ExDMvrmAdKq7TbxkfXFkYN9Hd742T6FuHVZqXLz-3qeoIDJ7NUh35BxXJQfC7es-bZMpVzc_6OxClMdtJHAYlkTuYXf50dl480hAWYmqKm0gjdFgSIHAT7UG1RZeKiBQe7dnGg=w2560-h1372-s-no?authuser=0" alt="使用方式"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.youtube.com/watch?v=YafXjy06cSw&t=104s">唯一能直接生成向量圖的 AI！簡報插圖不用圖庫秒做完，免費又可商用簡直太方便！Recraft 泛科學院</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前已經有寫過關於用 AI 生成圖片的 &lt;a href=&quot;http://annilla.github.io/2022/09/14/UXUI/Midjourney-AI-Art/&quot;&gt;Midjourney&lt;/a&gt;, 但是出來的圖片通常都是點陣圖。想要用在系統 UI 介面上的向量圖, 設計師通常想要的是 SVG 格式, 最近發現了一款 &lt;a href=&quot;https://www.recraft.ai/&quot;&gt;Recraft.ai&lt;/a&gt; 他剛好就可以生成向量 SVG 格式, 而且出來的風格很適合拿來放在 UI 介面上, 非常好用！！&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Develop Plugin Using Vite &amp; Svelte &amp; TailwindCSS</title>
    <link href="http://annilla.github.io/2023/05/30/JS/Develop-Plugin-Using-Vite-Svelte-TailwindCSS/"/>
    <id>http://annilla.github.io/2023/05/30/JS/Develop-Plugin-Using-Vite-Svelte-TailwindCSS/</id>
    <published>2023-05-29T16:00:00.000Z</published>
    <updated>2023-05-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作上需要寫一隻全新的 chatbot plugin, 因為這種 case 很吃 UI 的畫面, 所以除了 js 外一定會用到 html + css, 而且由兩個人以上共同維護。之後這個 plugin 將會接到各 website 上, 所以想要出來的成品能輕量化且高執行效率。我開始爬文比較各種 JS, CSS 框架，最終選擇 Vite &amp; Svelte &amp; TailwindCSS, 作為 plugin 的基底, 他們都有很完整的文件, 對於多人開發很方便。接下來針對這個組合一一做介紹。程式放在 <a href="https://github.com/Annilla/Vite-Library-Test">github</a>。</p><span id="more"></span><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><p>若不考慮 IE 瀏覽器, Vite 在開發上比 Webpack 快上許多, 因為 Vite 會將程式直接加載到瀏覽器中跑, 這樣就不需要過多的映射過程, 速度也會快上許多.</p><p>先初始一個 vite 專案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><p>設定 vite.config.js, 預設可輸出 umd, es 兩種 js 格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">        <span class="attr">lib</span>: &#123;</span><br><span class="line">            <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;lib/main.js&#x27;</span>), <span class="comment">// input js</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;annyLib&#x27;</span>, <span class="comment">// library name</span></span><br><span class="line">            <span class="attr">fileName</span>: <span class="function">(<span class="params">format</span>) =&gt;</span> <span class="string">`annyLib.<span class="subst">$&#123;format&#125;</span>.js`</span> <span class="comment">// output file name</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>設定 package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;anny-lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/annyLib.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/annyLib.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;.&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/annyLib.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/annyLib.umd.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>lib&#x2F;main.js 為輸出 library 的地方</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> annyLib <span class="keyword">from</span> <span class="string">&#x27;./init&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> annyLib;</span><br></pre></td></tr></table></figure><p>lib&#x2F;init.js 為起始 library 的地方, 從 constructor 傳入參數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">setting</span>) &#123;</span><br><span class="line">        config.<span class="title function_">setConfig</span>(setting);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// initialize plugin</span></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 index.html 測試 js, 開發的時候用 module 引入直接使用, 輸出成 dist 的時候就用 window.xxx 呼叫.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;./dist/annyLib.umd.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>anny-lib<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script&gt;</span></span><br><span class="line"><span class="comment">        new window.annyLib(&#123;system: &#x27;Anny Lib&#x27;&#125;).init();</span></span><br><span class="line"><span class="comment">    &lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> annyLib <span class="keyword">from</span> <span class="string">&#x27;./lib/main.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title function_">annyLib</span>(&#123;<span class="attr">system</span>: <span class="string">&#x27;Anny Lib&#x27;</span>&#125;).<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下來將 Svelte 加上去.</p><h1 id="Svelte"><a href="#Svelte" class="headerlink" title="Svelte"></a>Svelte</h1><p>選擇 Svelte 是因為他不像三大框架用 Virtual DOM, Svelte 是直接去改實體 DOM, 所以執行效率更快, 且用起來就像純 JS 一樣直覺, 學習曲線小, 最近更票選為前端最喜歡用的 framework, 所以非常想用用看!</p><p>安裝官方 vite 套件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @sveltejs/vite-plugin-svelte</span><br></pre></td></tr></table></figure><p>修改 svelte.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; vitePreprocess &#125; <span class="keyword">from</span> <span class="string">&#x27;@sveltejs/vite-plugin-svelte&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// Consult https://svelte.dev/docs#compile-time-svelte-preprocess</span></span><br><span class="line">  <span class="comment">// for more information about preprocessors</span></span><br><span class="line">  <span class="attr">preprocess</span>: <span class="title function_">vitePreprocess</span>(),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寫一個簡單的 Svelte componemt (lib&#x2F;comp.svelte)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> configValue;</span></span><br><span class="line"><span class="language-javascript">    configValue = config.<span class="property">setting</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;annylib-w-24 annylib-bg-gray-200&quot;</span>&gt;</span>System Name is &#123;configValue.system&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 lib&#x2F;init.js 引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Comp</span> <span class="keyword">from</span> <span class="string">&#x27;./comp.svelte&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">setting</span>) &#123;</span><br><span class="line">        config.<span class="title function_">setConfig</span>(setting);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// initialize plugin</span></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idName = <span class="string">&#x27;annyLib&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        el.<span class="property">id</span> = idName;</span><br><span class="line">        body.<span class="title function_">appendChild</span>(el);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Comp</span>(&#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idName),</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來加上 TailwindCSS</p><h1 id="TailwindCSS"><a href="#TailwindCSS" class="headerlink" title="TailwindCSS"></a>TailwindCSS</h1><p>TailwindCSS 他的特性就是有很多 utils 可以用, 可以完全不寫 style, 用他現成 class 的方式去客製樣式, 而且他可以用 prefix, 所以 class name 完全不會跟原本專案互相干擾, 可以做到無汙染又不會跑版的動作. 最棒的是他可以選擇只要輸出有用到的 utils, 所以檔案可以做到最輕量，真是棒極了XD</p><p>安裝 TailwindCSS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss postcss autoprefixer</span><br></pre></td></tr></table></figure><p>設定 postcss.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">        <span class="attr">tailwindcss</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定 tailwind.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">content</span>: [</span><br><span class="line">        <span class="string">&quot;./lib/**/*.&#123;js,svelte&#125;&quot;</span>, <span class="comment">// 設定會使用到 tailwind 的檔案</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">theme</span>: &#123;</span><br><span class="line">        <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [],</span><br><span class="line">    <span class="attr">corePlugins</span>: [ <span class="comment">// 設定輸出有用到的 utils</span></span><br><span class="line">        <span class="string">&#x27;backgroundColor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;width&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&#x27;annylib-&#x27;</span> <span class="comment">// 設定 class name 前贅詞</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定 lib&#x2F;main.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><p>設定 vite 輸出的 css 名稱 (vite.config.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">            <span class="attr">output</span>: &#123;</span><br><span class="line">                <span class="attr">assetFileNames</span>: <span class="function">(<span class="params">assetInfo</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (assetInfo.<span class="property">name</span> === <span class="string">&#x27;style.css&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;annyLib.css&#x27;</span>;</span><br><span class="line">                    <span class="keyword">return</span> assetInfo.<span class="property">name</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>這邊加碼應用!! 因為 tailwindcss preflight 沒辦法加前贅詞. 如果要在自己的 library 裡面用自己前贅詞的 preflight, 可以先去下載 tailwindcss preflight, 在前面全加上 <code>:where(.annylib-preflight)</code>, 然後在自己的根組件使用 .annylib-preflight 就可以達到一樣的 css reset 效果. 不過這個功能應該未來也會被加入 tailwindcss 才對 XD</strong></p></blockquote><p>lib&#x2F;main.css 加入 annylib-preflight.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./annylib-preflight.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><p>lib&#x2F;comp.svelte 測試使用 class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;annylib-preflight annylib-w-24 annylib-bg-gray-200&quot;</span>&gt;</span>System Name is &#123;configValue.system&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>build 出來的 css, js 都非常小且就是只有專案有用到的東西才會被 output 優~超貼心 ❤</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vite v4.<span class="number">3</span>.<span class="number">6</span> building <span class="keyword">for</span> production...</span><br><span class="line">✓ <span class="number">6</span> modules transformed.</span><br><span class="line">dist/annyLib.css    <span class="number">4</span>.<span class="number">63</span> kB │ gzip: <span class="number">1</span>.<span class="number">17</span> kB</span><br><span class="line">dist/annyLib.es.js  <span class="number">5</span>.<span class="number">64</span> kB │ gzip: <span class="number">2</span>.<span class="number">25</span> kB</span><br><span class="line">dist/annyLib.umd.js  <span class="number">4</span>.<span class="number">24</span> kB │ gzip: <span class="number">2</span>.<span class="number">01</span> kB</span><br><span class="line">✓ built <span class="keyword">in</span> <span class="number">1</span>.<span class="number">63</span>s</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://andrewwalpole.com/blog/use-vite-for-javascript-libraries/">Use Vite for JavaScript Libraries</a></li><li><a href="https://dev.to/ajscommunications/scoping-normalized-preflight-css-c29">Scoping Normalized Preflight CSS</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作上需要寫一隻全新的 chatbot plugin, 因為這種 case 很吃 UI 的畫面, 所以除了 js 外一定會用到 html + css, 而且由兩個人以上共同維護。之後這個 plugin 將會接到各 website 上, 所以想要出來的成品能輕量化且高執行效率。我開始爬文比較各種 JS, CSS 框架，最終選擇 Vite &amp;amp; Svelte &amp;amp; TailwindCSS, 作為 plugin 的基底, 他們都有很完整的文件, 對於多人開發很方便。接下來針對這個組合一一做介紹。程式放在 &lt;a href=&quot;https://github.com/Annilla/Vite-Library-Test&quot;&gt;github&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://annilla.github.io/categories/JS/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
      <category term="Vite" scheme="http://annilla.github.io/tags/Vite/"/>
    
      <category term="Svelte" scheme="http://annilla.github.io/tags/Svelte/"/>
    
      <category term="TailwindCSS" scheme="http://annilla.github.io/tags/TailwindCSS/"/>
    
  </entry>
  
  <entry>
    <title>Figma Useful Plugins for Content Data</title>
    <link href="http://annilla.github.io/2023/04/15/UXUI/Figma-Useful-Plugins-for-Content-Data/"/>
    <id>http://annilla.github.io/2023/04/15/UXUI/Figma-Useful-Plugins-for-Content-Data/</id>
    <published>2023-04-14T16:00:00.000Z</published>
    <updated>2023-04-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常繪製 prototype 的時候多少會需要一些假資料來模擬畫面。大部分使用假資料 User 都能接受, 畢竟實際上還是需要程式動態讀取出來的。但最近還是難逃要用實際資料模擬的需求, 我遇到的情境是類似大量 excel 動態計算欄位。因為 User 會想要討論每個欄位的計算公式, 初版用假資料出去, 結果就被打回來 QQ。只好認真的跟 User 要了實際資料, 但我敢說一定不會有人想要把值一格一格貼, 手絕對會斷掉！而且還下不了班！所以這篇就是紀錄我如何用 plugin 來解決貼實際值的問題。</p><span id="more"></span><h1 id="Content-Reel"><a href="#Content-Reel" class="headerlink" title="Content Reel"></a>Content Reel</h1><p><img src="https://lh3.googleusercontent.com/pw/AJFCJaVUTlp1Mis0UVg0cbs00EviJX3iK_L0dTBt_lpPSYDbRMEkSIEthsuqXa0JykuKnfOPr_J6oPcecGiZ-b3TNbKpLi9fd38Vm10GF-yiGkHWfv5R29wmEUkAjD-yMd8UJBCQytFU_bJJMo_rw7KSASH0hg=w1862-h931-s-no?authuser=0" alt="Content Reel"></p><p><a href="https://www.figma.com/community/plugin/731627216655469013/Content-Reel">Content Reel</a> 這個 plugin 裡面有很多好用的假資料資源可以快速套用。而且還可以用 Google 帳號登入後，儲存自己的資料庫。有個好用的技巧分享給大家：儲存一個叫做 Empty 的資源, 裡面只放一個空白字串。這樣如果設計時想要清空文字，只要圈選大量要清空文字的物件，點擊套用就可以一次全部清空內容，這招超好用！通常用 Content Reel 內建的資源或自己建立的資源可以解決 90% 的情境，但就如我文章開頭所說，如果要大量用實際數值模擬就不夠用了，所以下面介紹我最後使用的超級絕招。</p><h1 id="Google-Sheets-Sync"><a href="#Google-Sheets-Sync" class="headerlink" title="Google Sheets Sync"></a>Google Sheets Sync</h1><p><img src="https://lh3.googleusercontent.com/pw/AJFCJaWvyucLEMXVsmZhWGbUwrr9aIa_9AvZbi7p_UMYcGHnl_KzMgyTp-isTospBxKNGI-K9rV4QYOfB0U9DEvUdky-RAOh2C3qkhGoO8QWyL9VKyeR7PHTXkjZLfs_J4XgxH0ra6UC8UbjtnxWfJDq_Y9QqQ=w1750-h875-s-no?authuser=0" alt="Google Sheets Sync"></p><p><a href="https://www.figma.com/community/plugin/735770583268406934/Google-Sheets-Sync">Google Sheets Sync</a> 這個 plugin 顧名思義就是讀取 Google Sheets 上的資料。我實際做的步驟如下：</p><ol><li>將資料複製到 Google Sheets, 欄位名稱取 Value。</li><li>Figma 物件的 text 圖層要取對應的欄位名稱 #Value。</li><li>把 Google Sheets 分享連結開啟並複製連結。</li><li>選取多個要替換值的 Figma 物件，開啟 plugin 將 Google Sheets 連結貼上, 點擊 Sync 按鈕就可以將值大量貼上。</li></ol><blockquote><p><strong>注意！貼上的順序會依照 Figma 圖層順序，所以在大量貼上前，請確保物件的圖層順序正確。最保險的做法是複製第一個物件後，ctrl + D 重複做複製的動作，這樣圖層的順序就能確保是從上到下。</strong></p></blockquote><p>如此一來就能模擬大量 excel 動態模擬資料的感覺，能準時下班真好ＸＤ</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.figma.com/community/plugin/731627216655469013/Content-Reel">Content Reel</a></li><li><a href="https://www.figma.com/community/plugin/735770583268406934/Google-Sheets-Sync">Google Sheets Sync</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常繪製 prototype 的時候多少會需要一些假資料來模擬畫面。大部分使用假資料 User 都能接受, 畢竟實際上還是需要程式動態讀取出來的。但最近還是難逃要用實際資料模擬的需求, 我遇到的情境是類似大量 excel 動態計算欄位。因為 User 會想要討論每個欄位的計算公式, 初版用假資料出去, 結果就被打回來 QQ。只好認真的跟 User 要了實際資料, 但我敢說一定不會有人想要把值一格一格貼, 手絕對會斷掉！而且還下不了班！所以這篇就是紀錄我如何用 plugin 來解決貼實際值的問題。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Figma" scheme="http://annilla.github.io/categories/UXUI/Figma/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Figma" scheme="http://annilla.github.io/tags/Figma/"/>
    
  </entry>
  
  <entry>
    <title>.NET 6.0 SPA with Vite and Vue 3 - Start New Project</title>
    <link href="http://annilla.github.io/2022/10/26/Dotnet/NET-6-SPA-with-Vite-Vue-3/"/>
    <id>http://annilla.github.io/2022/10/26/Dotnet/NET-6-SPA-with-Vite-Vue-3/</id>
    <published>2022-10-25T16:00:00.000Z</published>
    <updated>2022-10-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack 雖然在前端很強大，起專案和 HMR 的速度也跟著套件裝越多越慢，但隨著 IE 的沒落，很多套件其實都不需再使用。這時候新一代的技術 <a href="https://vitejs.dev/">Vite</a> 颳起一陣旋風，利用現代瀏覽器支持 ES 模塊的特性，直接用瀏覽器的資源做更快速的打包 &amp; HMR，用了一次之後就回不去 Webpack 了 XD ~ 本篇說明如何用 NET 6 + Vite + Vue 3 來起一個新專案。</p><span id="more"></span><h2 id="起始-NET-6-專案"><a href="#起始-NET-6-專案" class="headerlink" title="起始 NET 6 專案"></a>起始 NET 6 專案</h2><p>dotnet new 指令會自動產生 react SPA 專案，我們接著對此專案稍作修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new react</span><br></pre></td></tr></table></figure><p>刪除原本的 ClientApp 資料夾。</p><p><img src="https://lh3.googleusercontent.com/pw/AL9nZEVq6mhxqbGkTScsxRNoBg8zQ2dKwUIao8A7aOXGmDiENHyOchrOS5ufJ3TzKNsoNsii9iXxtSEGAsSBL4-ioZT75DhaldcURq9hZVjwclfOkF7WV6d4t_ND0yH3m-ZpJS4cYLsxWk4PsYEFUtjFIn5tSA=w1058-h1080-no?authuser=0" alt="刪除原本的 ClientApp 資料夾"></p><h2 id="用-Vite-建立-Vue-專案"><a href="#用-Vite-建立-Vue-專案" class="headerlink" title="用 Vite 建立 Vue 專案"></a>用 Vite 建立 Vue 專案</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><p>專案名稱一樣取 ClientApp 即可，接著照步驟選擇 Vue 專案。<br><img src="https://lh3.googleusercontent.com/pw/AL9nZEXGCPDqdSBVl7JYhsH-5_uSZYSQkN8DcEKhBcJXKT56VDHuzo7qP0dSYNaawCLD3AXgDDg-gUAVmFtr6LTbO4UMbE0OfzsA4Ef9kNkre6X5vn-LoLDrnGEX3esyBpV890Z3yFkDPYX_tpvyT1eVgHPOqQ=w1252-h560-no?authuser=0" alt="照步驟選擇 Vue 專案"></p><h2 id="修改-csproj-檔案"><a href="#修改-csproj-檔案" class="headerlink" title="修改 .csproj 檔案"></a>修改 .csproj 檔案</h2><p>針對以下幾點參數作說明:</p><ol><li>SpaProxyServerUrl: NET 專案起來之後的網址，可以放預設不動(<code>https://localhost:44434</code>)，或自己另外指定 port。</li><li>SpaProxyLaunchCommand: 開發時要起 HMR 的指令，這邊用 Vite 專案內建的 <code>npm run dev</code>。</li><li>SpaRoot: 這邊要放前端專案的資料夾名稱，因為我們故意取跟預設一樣的 ClientApp，所以這邊不用修改。</li><li>DistFiles: 這邊要放 build 完成後的資料夾位置，這邊用 Vite 專案內建的 dist 資料夾 <code>$(SpaRoot)dist\**</code>。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>net6.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Nullable</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">Nullable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TypeScriptCompileBlocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">TypeScriptCompileBlocked</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TypeScriptToolsVersion</span>&gt;</span>Latest<span class="tag">&lt;/<span class="name">TypeScriptToolsVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">IsPackable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">IsPackable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SpaRoot</span>&gt;</span>ClientApp\<span class="tag">&lt;/<span class="name">SpaRoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DefaultItemExcludes</span>&gt;</span>$(DefaultItemExcludes);$(SpaRoot)node_modules\**<span class="tag">&lt;/<span class="name">DefaultItemExcludes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SpaProxyServerUrl</span>&gt;</span>https://localhost:44434<span class="tag">&lt;/<span class="name">SpaProxyServerUrl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SpaProxyLaunchCommand</span>&gt;</span>npm run dev<span class="tag">&lt;/<span class="name">SpaProxyLaunchCommand</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RootNamespace</span>&gt;</span>test_dotnet_vue_vite<span class="tag">&lt;/<span class="name">RootNamespace</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImplicitUsings</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">ImplicitUsings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;PublishRunWebpack&quot;</span> <span class="attr">AfterTargets</span>=<span class="string">&quot;ComputeFilesToPublish&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- As part of publishing, ensure the JS resources are freshly built in production mode --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Exec</span> <span class="attr">WorkingDirectory</span>=<span class="string">&quot;$(SpaRoot)&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;npm install&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Exec</span> <span class="attr">WorkingDirectory</span>=<span class="string">&quot;$(SpaRoot)&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;npm run build&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Include the newly-built files in the publish output --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DistFiles</span> <span class="attr">Include</span>=<span class="string">&quot;$(SpaRoot)dist\**&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ResolvedFileToPublish</span> <span class="attr">Include</span>=<span class="string">&quot;@(DistFiles-&gt;&#x27;%(FullPath)&#x27;)&quot;</span> <span class="attr">Exclude</span>=<span class="string">&quot;@(ResolvedFileToPublish)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RelativePath</span>&gt;</span>wwwroot\%(RecursiveDir)%(FileName)%(Extension)<span class="tag">&lt;/<span class="name">RelativePath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CopyToPublishDirectory</span>&gt;</span>PreserveNewest<span class="tag">&lt;/<span class="name">CopyToPublishDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeFromSingleFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">ExcludeFromSingleFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ResolvedFileToPublish</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="設定-Vue-專案的-https-憑證"><a href="#設定-Vue-專案的-https-憑證" class="headerlink" title="設定 Vue 專案的 https 憑證"></a>設定 Vue 專案的 https 憑證</h2><p>如果要開通 Vite https 可以安裝 <a href="https://github.com/liuweiGL/vite-plugin-mkcert%E3%80%82">https://github.com/liuweiGL/vite-plugin-mkcert。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev vite-plugin-mkcert</span><br></pre></td></tr></table></figure><h3 id="設定-Vite-config-js"><a href="#設定-Vite-config-js" class="headerlink" title="設定 Vite.config.js"></a>設定 Vite.config.js</h3><p>接著去設定 Vite.config.js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mkcert <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mkcert&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">mkcert</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">44434</span>, <span class="comment">// 要跟 .csproj 檔案中的 SpaProxyServerUrl 一致</span></span><br><span class="line">    <span class="attr">https</span>: <span class="literal">true</span>, <span class="comment">// vite-plugin-mkcert</span></span><br><span class="line">    strictPort : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span> : &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://localhost:7092&#x27;</span>, <span class="comment">// 要跟 launchSettings.json 中的 applicationUrl 一致</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;/api&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成~~"></a>完成~~</h2><p>完成後，可以直接使用 VS or VScode 的專案執行按鈕就能成功啟動囉~</p><p><img src="https://lh3.googleusercontent.com/pw/AL9nZEWpZD0_CrJszyUa5jnBkxTo7XFUfJrWszZJ3-jt88Qipkkt0mRQDhi45FNrso4NQkXdmF-CXJMsR_H5lsaXHoEjvFxFERuRvL7z8GOd8XalpW1LdMEBMG2XCqLRnX4qTuPLhP7nQX5KXMmVCPpb8D19dQ=w2490-h1442-no?authuser=0" alt="啟動畫面"></p><p>今天的範例在 <a href="https://github.com/Annilla/test-dotnet-vue-vite/tree/v1.0">github</a>，下回見～</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://github.com/keithn/dotnetviteguide">A guide to getting started with ASP.NET Core 6, Vite, and Vue 3</a></li><li><a href="https://vitejs.dev/">Vite</a></li><li><a href="https://vuejs.org/">Vue 3</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack 雖然在前端很強大，起專案和 HMR 的速度也跟著套件裝越多越慢，但隨著 IE 的沒落，很多套件其實都不需再使用。這時候新一代的技術 &lt;a href=&quot;https://vitejs.dev/&quot;&gt;Vite&lt;/a&gt; 颳起一陣旋風，利用現代瀏覽器支持 ES 模塊的特性，直接用瀏覽器的資源做更快速的打包 &amp;amp; HMR，用了一次之後就回不去 Webpack 了 XD ~ 本篇說明如何用 NET 6 + Vite + Vue 3 來起一個新專案。&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="http://annilla.github.io/categories/NET/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="SPA" scheme="http://annilla.github.io/tags/SPA/"/>
    
      <category term="MVC" scheme="http://annilla.github.io/tags/MVC/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term=".NET" scheme="http://annilla.github.io/tags/NET/"/>
    
      <category term="Vite" scheme="http://annilla.github.io/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>Midjourney - AI Art</title>
    <link href="http://annilla.github.io/2022/09/14/UXUI/Midjourney-AI-Art/"/>
    <id>http://annilla.github.io/2022/09/14/UXUI/Midjourney-AI-Art/</id>
    <published>2022-09-13T16:00:00.000Z</published>
    <updated>2022-09-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有藝術作品利用 AI 繪圖技術 Midjourney 製成參加比賽獲獎，有很多篇新聞報導，讓大眾開始反思 AI 繪圖的可能性。<a href="https://www.cup.com.hk/2022/09/06/midjourney-ai-artwork/">(AI 作品奪藝術獎：究竟甚麼是藝術？)</a> 基於好奇，所以我也去試玩看看。</p><span id="more"></span><h1 id="在私有-Discord-Server-加入-Midjourney-Bot"><a href="#在私有-Discord-Server-加入-Midjourney-Bot" class="headerlink" title="在私有 Discord Server 加入 Midjourney Bot"></a>在私有 Discord Server 加入 Midjourney Bot</h1><p>因為本身已經有 Discord 帳號，所以就嘗試將 Midjourney Bot 加入私有 Server，這樣就可以不被其他討論串干擾，可以專心的使用。這邊簡單說明怎麼加入 Midjourney Bot。</p><ol><li>從使用者清單搜尋並選取 Midjourney Bot，然後點擊 “Add to Server”</li></ol><p><img src="https://366511654-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F6Bl9seaj2HHrtdPiMKPI%2Fuploads%2FxcZv42rRdX0h1jAdozx9%2FMJ_BotInvite.png?alt=media&token=5457b2d2-6c4e-446a-b8d1-37cf195b8653" alt="Add to Server"></p><ol start="2"><li>選擇你要加入的私有 server， 跟著步驟指示加入 Midjourney Bot.</li></ol><p><img src="https://366511654-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F6Bl9seaj2HHrtdPiMKPI%2Fuploads%2FAUtdCvJ2CTV8HJb596Xk%2FMJ_AuthorizeBot.png?alt=media&token=18ec7508-4d43-4aab-b25c-c0f8558d473a" alt="Authorize"></p><h1 id="創建藝術"><a href="#創建藝術" class="headerlink" title="創建藝術"></a>創建藝術</h1><ol><li>選擇 Server 上隨便一個頻道，使用 <code>/imagine</code> 指令開始作畫。</li></ol><p><img src="https://366511654-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F6Bl9seaj2HHrtdPiMKPI%2Fuploads%2FIujTWOvV8MHvoMuAdhQI%2Fimagine_command_popup_click.gif?alt=media&token=3a15d252-3068-4713-9a47-2deb32c3bcdd" alt="/imagine 指令"></p><ol start="2"><li>等待 Bot 作畫需要一點時間，完成後會出現選項，讓使用者可以更近一步的加上細節，或另外延伸。如下圖，他會出現 <code>U1, U2, U3, U4</code> 的選項，代表對 1-4 的某張圖加上細節， <code>V1, V2, V3, V4</code> 的選項，則是代表對 1-4 的某張圖選擇一張再做一次延展變形。</li></ol><p><img src="https://366511654-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F6Bl9seaj2HHrtdPiMKPI%2Fuploads%2FDMyymwMpj3lURSrF91RF%2F167755032-fe6935a9-b6a2-4b80-8f73-13916c170ceb.png?alt=media&token=718f14b7-8d9b-41de-899d-63dd705ef14a" alt="加上細節或另外延伸"></p><ol start="3"><li>一直重複上述步驟直到有滿意的圖為止。PS. 一個帳號只能用 25 次免費的AI 演算，包含點 U1-4, V1-4 按鈕。可以用 <code>/info</code> 指令查看剩下幾次。</li></ol><h1 id="試試看"><a href="#試試看" class="headerlink" title="試試看"></a>試試看</h1><p>我一開始嘗試的關鍵字: cats vector logo，中間按了幾次 V 出來的。</p><p><img src="https://lh3.googleusercontent.com/pw/AL9nZEVoFt88KToDiW1JAVlQPcRPZMjBHQBo0T2k1xierdhuzSYTdpCTHoClCD2kNh4uYwHnrcwDmJ7An75Y6MILK81wDVDbNR1VTYOGauDn82pZ0dXglGwUbhDaAGPdhVB-0NEqTxO2okQvuaY3RL93A0igjg=w850-h1442-no?authuser=0" alt="cats vector logo"></p><p>嘗試另一組關鍵字： smart factory illustration。出現幾張不太一樣的變化，我選了第一張去做 U 的細節。</p><p><img src="https://lh3.googleusercontent.com/pw/AL9nZEUamIWByBx2AC56tbMJsSHBOLbjOigAZ1SDVwNFRoCltt_L0xmiUoCZQBXy6cyRZHxIDuROyRo3hgT65Wt1XbiqYF4sEcJdblxHxdZXQrNQM4l2RDl2t1-WSvvwil7KclS0ud8sR0bywH1KKO0tcgrLwg=w978-h1442-no?authuser=0" alt="smart factory illustration"></p><p>最後 AI 幫我做出的 Upscaled 感覺還不賴。</p><p><img src="https://lh3.googleusercontent.com/pw/AL9nZEXEI51PW6upxKI-eGWRdeilwOYZVYVExCesea9tgXq6VjM6LXf6uyqB5ITzrS0G9E5s6uhvxO0BpPs_FULbLGeBkBtSr7xGB-CpwLsgKoVREpIddwIoecAuLbRLUnrDfgfNjbXa5hmwoOhq2yMtPhvJxA=w914-h1442-no?authuser=0" alt="smart factory illustration"></p><p>出圖速度我覺得都蠻快的，不會太久，拿來當作靈感或是大背景底圖都不錯用。不過重點還是要下好關鍵字，才能跑出想要的效果呦～</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://midjourney.gitbook.io/docs/">Midjourney Documentation</a></li><li><a href="https://midjourney.gitbook.io/docs/use-midjourney-on-your-own-discord-server">Use Midjourney on your own Discord Server</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有藝術作品利用 AI 繪圖技術 Midjourney 製成參加比賽獲獎，有很多篇新聞報導，讓大眾開始反思 AI 繪圖的可能性。&lt;a href=&quot;https://www.cup.com.hk/2022/09/06/midjourney-ai-artwork/&quot;&gt;(AI 作品奪藝術獎：究竟甚麼是藝術？)&lt;/a&gt; 基於好奇，所以我也去試玩看看。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Figma Text Replace by Free Google Fonts</title>
    <link href="http://annilla.github.io/2022/08/19/UXUI/Figma-Text-Replace-by-Free-Google-Fonts/"/>
    <id>http://annilla.github.io/2022/08/19/UXUI/Figma-Text-Replace-by-Free-Google-Fonts/</id>
    <published>2022-08-18T16:00:00.000Z</published>
    <updated>2022-08-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近將舊的 Sketch 檔案匯入 Figma 時，會發生找不到 “Helvetica” 字體的問題。但我覺得這麼“基本”的字體應該 Figma 會有吧？！仔細一找真的不在 Figma 字體的下拉清單（眼神死…），所以我就跑去找有什麼相似的字體可以做替換。幸好，找到了不錯的資源，就趕緊記錄下來。</p><span id="more"></span><h1 id="用-Free-Google-Fonts-來替代"><a href="#用-Free-Google-Fonts-來替代" class="headerlink" title="用 Free Google Fonts 來替代"></a>用 Free Google Fonts 來替代</h1><p>因為 Google Fonts 真的很充足，所以我就鎖定在這裡面找比較快。下面是網路上找到的對照圖。原文記錄在最後面。光是 “Helvetica” 就可以找到三種字體可以替換呢XD</p><p><img src="https://lh3.googleusercontent.com/pw/AL9nZEWygFj3wgLJF9hhWzvD_n_DAfCCg7c-Cuu1UqyP1BMZSCn6vbGf0l1HN_KdQF_raJFskEI0FmfFn5GFbYMdbTMaNHf8XxR7wZrMGvTx2MCNQrcL9pdAOVqZBmonmLGcwETihZbg0tbr0LCiqh4UmUiPCA=w730-h1442-no?authuser=0" alt="用 Free Google Fonts 替代"></p><ol><li>Helvetica &gt;&gt;&gt; Open Sans </li><li>Helvetica &gt;&gt;&gt; Arimo</li><li>Helvetica &gt;&gt;&gt; Work Sans</li><li>Frutiger &gt;&gt;&gt; Hind</li><li>Futura &gt;&gt;&gt; Nunito</li><li>Futura&gt;&gt;&gt; Kumbh Sans</li><li>Futura&gt;&gt;&gt; Questrial</li><li>Baskerville &gt;&gt;&gt; Libre Baskerville</li><li>Proxima Nova &gt;&gt;&gt; Montserrat</li><li>Adobe Caslon &gt;&gt;&gt; Lusitana</li><li>Neo Sans &gt;&gt;&gt; Armata</li><li>FF Meta Web Pro &gt;&gt;&gt; Source Sans Pro</li><li>FF DIN &gt;&gt;&gt; Roboto</li><li>Poster Bodoni &gt;&gt;&gt; Abril Fatface</li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.psd2html.com/blog/web-font-alternatives.html">Web Fonts Cheat Sheet: Free Google Fonts Alternatives to Futura and the Like</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近將舊的 Sketch 檔案匯入 Figma 時，會發生找不到 “Helvetica” 字體的問題。但我覺得這麼“基本”的字體應該 Figma 會有吧？！仔細一找真的不在 Figma 字體的下拉清單（眼神死…），所以我就跑去找有什麼相似的字體可以做替換。幸好，找到了不錯的資源，就趕緊記錄下來。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Figma" scheme="http://annilla.github.io/categories/UXUI/Figma/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Figma" scheme="http://annilla.github.io/tags/Figma/"/>
    
  </entry>
  
  <entry>
    <title>SSMS Import Chinese Data into Azure DB</title>
    <link href="http://annilla.github.io/2022/07/19/Others/SSMS-Import-Chinese-Data-into-Azure-DB/"/>
    <id>http://annilla.github.io/2022/07/19/Others/SSMS-Import-Chinese-Data-into-Azure-DB/</id>
    <published>2022-07-18T16:00:00.000Z</published>
    <updated>2022-07-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何用 SSMS 匯入 Azure DB。</p><span id="more"></span><h1 id="設定-Azure-portal-防火牆"><a href="#設定-Azure-portal-防火牆" class="headerlink" title="設定 Azure portal 防火牆"></a>設定 Azure portal 防火牆</h1><blockquote><p><strong>PS 如果在匯入期間跳防火牆錯誤，可去 Azure portal 設定比較快</strong></p></blockquote><p>Step1. 進入 DB &gt; 概觀 &gt; 設定伺服器防火牆</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLWV14uASdjwXGFbGebTiTx-RLsi6Zt78hTZTCBqiM0Rg5IIhW2AA_njRdslkBsup7IoTKC1LvsC_CiAa3D7OLyCHA2UJS-lJptc6hEl7f9duH9pleZzYkqQxpc_e4Bpwxvt7tNXiEbWAaEGrxUbO4tmew=w914-h151-no?authuser=0" alt="設定伺服器防火牆"></p><p>Step2. 新增防火牆規則 &gt; 儲存</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLUerDZASgbuUeAFALbg968tCctMz604afKbVW0hBxSRtmW8baCMYdn8FhtLoskfl9D1my-rcjH_J1Mgp928WwWDjj8tM--lbdeoas45G1YZ_Ew2_YR3xs0nmH4W1sz8s1fDtIyrkT2SAAdAsFFh2FldaA=w718-h394-no?authuser=0" alt="新增防火牆規則"></p><h1 id="準備檔案"><a href="#準備檔案" class="headerlink" title="準備檔案"></a>準備檔案</h1><blockquote><p><strong>需要先轉成 CSV 檔案。注意! 必填欄位要預先補好。</strong></p></blockquote><h1 id="SSMS-匯入步驟"><a href="#SSMS-匯入步驟" class="headerlink" title="SSMS 匯入步驟"></a>SSMS 匯入步驟</h1><p>Step1. 登入DB (會跳第一次二段驗證) &gt; 對資料庫案右鍵 &gt; 叫出匯入精靈。**(如果防火牆消失，請回 Azure portal 設定。)**</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLVTxckw3mB6JXx3QiMjCIxoxXhd4d2d1pPWObyCiLza84YJDT5caM5W2SRsDiu0T4bJsDGgl2LwhjsTlXzjoCmRr-6Yui2pcSBV4L0dyf4nmnTni4QTkmY99BTokSGd7JIkCDE7brUfUmc1XTMV-uMfVA=w718-h568-no?authuser=0" alt="叫出匯入精靈"></p><p>Step2. 設定來源資料</p><blockquote><p><strong>因為資料有中文，所以字碼頁選擇 65001, 文字限定詞輸入 “ (為了跳脫逗號)</strong></p></blockquote><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLUKtzIV7aucTCzSPtpvsCMTI3b-SBxdGgDSLVzFpjZLVrPS3LRfKyCT_dHzGNe4MKPVek3TvF2_dtK9jd9CPxj8nKBkCPFO2iP2iF2Ew__xoJFuDOHlTcWLxC6aoxIVhOOG3R9RTQRBrKdHCJN0XIkXrw=w629-h555-no?authuser=0" alt="設定來源資料"></p><blockquote><p><strong>全部 DataType 選 Unicode 字串，若有欄位長度超過 50 ，則需要手動將欄位 key 上加長的數值。</strong></p></blockquote><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLXbSjFhxDi2TDMutzGNrYMbEw9op1g5kFpTgmTixbpQrOmOxNFp4AL1bZ2MrjOITB95QqLShmzuGigPTYR__jv4eVB8yFKt-GUI8WBUvgQCPvgpUbK5FSdcrCDU-NclP1eh7fmUsNpE732wdJa5v3S0Cw=w628-h553-no?authuser=0" alt="全部 DataType 選 Unicode 字串"></p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLUBgjM4k-izh7u-DsrJYMIOldeU07F7iJtam7ZWU0ZqclCdTCnjW0Rqons0gzXZWsycLQUFPRHlD6tO-UWH-xvxpdU8ScFGIAogBJAx-y15I02_FmCrMhrlhwS6JomLOYPem_kXeGuPO9sSyGnffwSk_g=w627-h555-no?authuser=0" alt="手動將欄位 key 上加長的數值"></p><p>Step3. 設定目的地資料庫，這邊會再跳第二次二段驗證。**(如果防火牆消失，請回 Azure portal 設定。)**</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLW0RDriQCY79ONiFjNQuMHiBb_HEo5ecWgUrKHFpgAjZOZMRjns95s1X2uCehCFumB9yZm7nm043h0NyHTsT0eKM2CAyLY0cllG_b_KFVLvAb6ZJmRrqlr09IMhMk5DrKHI201xDAgkR2z6oFzRHhscMA=w747-h728-no?authuser=0" alt="設定目的地資料庫"></p><p>Step4. 設定目的地表格 &amp; mapping。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLVycSafTjcNlZX7nsTQDvGd2THAA1tBvLIC-s0L-5M_PlX5teFNrfPMfDirqFbYfkx8UqMfldwPzVVsTbezNWnNMoSEs8NS3-g_nFT4awF06foGJxpBT8QDlm6s_N-Po5BMC74jXmi9qyYTgEUtw_ED7Q=w958-h738-no?authuser=0" alt="設定目的地表格 &amp; mapping"></p><p>Step5. 一直 Next 到最後 Finish 執行。**(如果防火牆消失，請回 Azure portal 設定。)**</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何用 SSMS 匯入 Azure DB。&lt;/p&gt;
    
    </summary>
    
      <category term="AzureDB" scheme="http://annilla.github.io/categories/AzureDB/"/>
    
    
      <category term="AzureDB" scheme="http://annilla.github.io/tags/AzureDB/"/>
    
      <category term="SSMS" scheme="http://annilla.github.io/tags/SSMS/"/>
    
  </entry>
  
  <entry>
    <title>Naver Study Case - Naver App for Apple Watch</title>
    <link href="http://annilla.github.io/2022/06/08/UXUI/Naver-Study-Case-Naver-App-for-Apple-Watch/"/>
    <id>http://annilla.github.io/2022/06/08/UXUI/Naver-Study-Case-Naver-App-for-Apple-Watch/</id>
    <published>2022-06-07T16:00:00.000Z</published>
    <updated>2022-06-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久沒來觀摩 Naver 的設計，剛好最近看到一篇關於穿戴式裝置 Apple Watch 的應用設計，所以想來學習學習。</p><span id="more"></span><h1 id="Naver-App-for-Apple-Watch"><a href="#Naver-App-for-Apple-Watch" class="headerlink" title="Naver App for Apple Watch"></a>Naver App for Apple Watch</h1><p>這是一款結合天氣預報和 QR Code 實名制的小應用，因為疫情的關係，韓國有一陣子進入店家是需要掃 QR Code 實名制。他有幾點設計是讓我覺得不錯的：</p><ol><li>卡片使用圓角，跟手錶的圓弧設計搭得很融洽。</li><li>因為手錶的可視範圍很小，所以利用多種不同的方式來表現卡片的內容，除了視覺效果外，還讓 user 知道能選取卡片觀看細節。不同的表現方式例如：卡片疊合、卡片間的小空隙、露出一小部分下張卡片等等。</li><li>他的互動體驗也非常流暢，包括天氣的動畫、展開卡片的方式等等。</li></ol><p>下面依序 APP 的畫面，說明覺得設計不錯的地方。</p><h1 id="首頁"><a href="#首頁" class="headerlink" title="首頁"></a>首頁</h1><p>首頁利用卡面疊合的方式，漂亮展示了兩張主要卡片： QR Code 和 天氣預報。天氣動畫的部分利用淡入＋向左滑入+微放大，營造目前天氣的氣氛很順暢。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLVtx-e3oLW0zWuO4bDCyz7chtzO0VFKF89L9ngnNj8-dflWSDX3Ux-pEcHLpgDWcIGkH4UUtKQmXlKoPKJydDO0en84KMSMj1lN3Uz5bE7HQLZDneudNc4r-gQEj4DYsuPTKn-BUN7gMlNeGRbj5VU_Jg=w900-h916-no?authuser=0" alt="Naver App for Apple Watch"></p><h1 id="QR-Code"><a href="#QR-Code" class="headerlink" title="QR Code"></a>QR Code</h1><p>點選 QR Code 卡片會有微縮小＋向上展開卡片的互動，看起來非常清楚明瞭。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLXMzBB2fwRnJ3f4i8VJB2GH8RpqXRACLt3pnIi4olDLQ_ewYhMQZR0L_nnYj_1NnMeVIcX6ULgm-_83dmffKhL5WVTqoRTdndcG2UbOW1jVcl4uQMREwDvujMsaipQ8kcZ_ybGVluoC4v_3fqJDyQaoHA=w900-h506-no?authuser=0" alt="QR Code"></p><h1 id="天氣預報"><a href="#天氣預報" class="headerlink" title="天氣預報"></a>天氣預報</h1><p>進入天氣預報可以看到大張主卡片，下面會顯示一小塊綠色卡片的一點點，提示使用者可以向下滑取得更多資訊，我覺得這點設計很不錯，除了提示外還帶有設計感。下面三塊小卡片，分別利用小空隙展示天氣細塵紫外線等資訊。繼續滑會有未來 24H 的天氣預報，滑到最後還會自動回到一開始的大張主卡片，我覺得這是最貼心的一點！！因為手錶若要展示很長的內容，滑到最底後，勢必還是要有回最上方的方式，他直接做了卡片迴圈這點，讓我感覺很驚艷～(可能是我還沒看過太多手錶的 APP 吧 XD)</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLUuVmjTr6eY4TyhcOCnSlI1j8hMs0HrVshxjigdJwl5v820i-vBlDQ0sAK9MbT6ZmBVWUMKW3rDKkmr2wnYR4vJdkKIuLeHmPrFpPO3Cy1UwEHCx4LNXm_AdTCJnOJeHJDA79nttxmOkfrbsN6XnmGdMw=w966-h544-no?authuser=0" alt="天氣預報"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://blog.naver.com/nvr_design/222315744463">適用於 Apple Watch 的新 Naver 應用程序</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久沒來觀摩 Naver 的設計，剛好最近看到一篇關於穿戴式裝置 Apple Watch 的應用設計，所以想來學習學習。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Naver" scheme="http://annilla.github.io/categories/UXUI/Naver/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Naver" scheme="http://annilla.github.io/tags/Naver/"/>
    
  </entry>
  
  <entry>
    <title>VScode Extension - Azure Static Web Apps</title>
    <link href="http://annilla.github.io/2022/05/18/VScode/VScode-Extension-Azure-Static-Web-Apps/"/>
    <id>http://annilla.github.io/2022/05/18/VScode/VScode-Extension-Azure-Static-Web-Apps/</id>
    <published>2022-05-17T16:00:00.000Z</published>
    <updated>2022-05-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因緣際會下本來想做個讀取 Google Sheet API 的 web app 放在 github page，但發現 github 有擋住部分功能，所以想說看能不能改放在 Azure 雲端上，搜尋之後發現這個神奇的 plugin，Azure Static Web Apps 可以在 vscode 做一些簡單的設定，就能把 github 上的前端 web app 自動透過 github Action，CICD 到 Azure Cloud 上，底層還是會在 Azure 建立一個 Azure Function。話不多說，直接來說明怎麼設定吧～</p><span id="more"></span><h1 id="準備好要發布的-github-repo"><a href="#準備好要發布的-github-repo" class="headerlink" title="準備好要發布的 github repo"></a>準備好要發布的 github repo</h1><p>這裡我先準備好要測試發布的 <a href="https://github.com/Annilla/Azure-Static-Web-Apps-Test">Vue 3</a> 專案(用 Vue-cli 5 Create 出來的)。</p><h1 id="VScode-安裝-Extension"><a href="#VScode-安裝-Extension" class="headerlink" title="VScode 安裝 Extension"></a>VScode 安裝 Extension</h1><p>在 Extension Tab 安裝 <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps">Azure Static Web Apps</a>。</p><p>安裝完後可點擊 Azure Icon Tab，會看到裡面有 Azure Static Web Apps 的 panel。第一次使用請先登入個人的 Azure 帳號。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLWAvS3dAHOv4-hgnTEqDQLTq4AynruunlJHD0h3HYOGEbXesj5BMZRwWsQS2_Z8PzRlqgx5TF0kiZVmNcepm1qXetaXbDgEslUcUOehK5MHlP71fksNl-M6HMw21cfKVtC8a-uyZ2vGmip7H72QXbqq0w=w2308-h1442-no?authuser=0" alt="Azure Static Web Apps 的 panel"></p><h1 id="新增-site"><a href="#新增-site" class="headerlink" title="新增 site"></a>新增 site</h1><p>點擊 + Icon 新增 Azure Static Web App。</p><p><img src="https://docs.microsoft.com/en-us/azure/static-web-apps/media/getting-started/extension-create-button.png" alt="新增 Azure Static Web App"></p><p>選取 Azure 訂閱戶。</p><p><img src="https://docs.microsoft.com/en-us/azure/static-web-apps/media/getting-started/extension-subscription.png" alt="選取 Azure 訂閱戶"></p><p>輸入 static web app 名稱。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLXGDXQzcNvm0clQeIoOjM8pL8f8XkFYDvWnwGAZ9pmi6n4WT-2YHQcVTXvRmxHSN1HdmNY5YLk2RTFy9KuJBWqqBcx8MWK6GPQBT5lcOFu_VM-6k4_eFGVOu2cPnMg6yydzOKJHQW9UolFDP1d2I2Qyig=w1602-h302-no?authuser=0" alt="輸入 static web app 名稱"></p><p>選取伺服器位置，我這邊選 East Asia。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLWvk7wCs80cN0SBZuEo3ZaPzlI311LrYfE_k0oncgNhjOxPQ34afmn8WW7UEGiqTqOgiNKt0AWXxUakQIfw8iO0tkmUiMKkWizkKTiajTtu2WBT8sIT4C1bGio8FbfsAWZ6D8CJXLKWUVd4ScATscmdLw=w1600-h508-no?authuser=0" alt="選取伺服器位置"></p><p>選取專案的架構，這邊選 Vue.js。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLVg6Bvh64gcn1FRllsYl3pJn3RTMFCoRObItMPeWf9KFABDYZy7vlRAHLK04ktmx7tLbHSKbL01DLansHVhYeiT6ezNeGCjDCIiEhVyAb6jE11uWNZZB6rqhVb88cVjZDw0s6PxFfEnzd7F6OgcbGY06A=w1596-h820-no?authuser=0" alt="選取專案的架構"></p><p>設定專案路徑，這邊是建在 &#x2F;my-app 資料夾底下。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLXZfigJbpbdF-Cn7BrQ4O9rQPDXhBhASC87jncaqLR15PygdF8Ct-vxSz1nr4h92j2PVimJuiPqLzofwcDtXkBMgyLI-333vt2UbLyjW4FYiH71AzWTm3mnWeaux7bb-FoxKQ-JgsDVRxmQThVSOiQZPg=w1610-h356-no?authuser=0" alt="設定專案路徑"></p><p>設定輸出資料夾，這邊預設就是 dist ，所以不用更改。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLU-UivhBdjy6CdasFx9XKFWPQg5N8u8buRAxhkhDSbNsZBScNjnnEhInz2Q3-ELIOjH88taxcSASqVLi8uwE1lK94WIWQ86oQqgW0tSUIS3lr5k2q0q_b1bsTxjvQMpIEv2I_B5hlhhx7vUqCuBtowwjQ=w1602-h410-no?authuser=0" alt="設定輸出資料夾"></p><p>設定完成後，他會自動 commit yml 檔案到 github，之後只要有更新 git，就會觸發 <a href="https://github.com/Annilla/Azure-Static-Web-Apps-Test/actions">github Action</a> CICD，並發布至 Azure Site。</p><p>接著只要對專案按右鍵選擇 Browse Site 就可以打開網站連結看到網站。</p><p><img src="https://docs.microsoft.com/en-us/azure/static-web-apps/media/getting-started/extension-browse-site.png" alt="Browse Site"></p><p>好了，設定就是那麼簡單! 因為很少碰 CICD 的東西，這個套件簡化了很多繁瑣的步驟，可以讓我快速將靜態網站放上雲端，實在是非常方便～</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=vanilla-javascript">Quickstart: Building your first static site with Azure Static Web Apps</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因緣際會下本來想做個讀取 Google Sheet API 的 web app 放在 github page，但發現 github 有擋住部分功能，所以想說看能不能改放在 Azure 雲端上，搜尋之後發現這個神奇的 plugin，Azure Static Web Apps 可以在 vscode 做一些簡單的設定，就能把 github 上的前端 web app 自動透過 github Action，CICD 到 Azure Cloud 上，底層還是會在 Azure 建立一個 Azure Function。話不多說，直接來說明怎麼設定吧～&lt;/p&gt;
    
    </summary>
    
      <category term="VScode" scheme="http://annilla.github.io/categories/VScode/"/>
    
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term="Git" scheme="http://annilla.github.io/tags/Git/"/>
    
      <category term="Azure" scheme="http://annilla.github.io/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>Figma Useful Plugins for Refactoring</title>
    <link href="http://annilla.github.io/2022/04/15/UXUI/Figma-Useful-Plugins-for-Refactoring/"/>
    <id>http://annilla.github.io/2022/04/15/UXUI/Figma-Useful-Plugins-for-Refactoring/</id>
    <published>2022-04-14T16:00:00.000Z</published>
    <updated>2022-04-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近 Figma 功能換到團隊的訂閱制，終於可以使用 Library 的功能了！但之前還沒換過去之前，檔案內的 Components 都是在 Local 原檔案中，現在該是 Refactor 整理的時候了，把共用的 Components 改用 Library 的，並重新整理檔案。此篇紀錄其中碰到的問題並寫出使用了哪些 Plugin 來改善 Refactor 的效率。</p><span id="more"></span><h1 id="找出哪裡用了-Local-Components"><a href="#找出哪裡用了-Local-Components" class="headerlink" title="找出哪裡用了 Local Components"></a>找出哪裡用了 Local Components</h1><p>之前文章有介紹過 Locator 這個 Plugin，但若有大量 Components ，每個點右鍵等他跑的時間會拉很長，很沒有效率。後來找到一個更好的套件叫 <a href="https://www.figma.com/community/plugin/741895659787979282/Instance-Finder">Instance Finder</a>，他只要跑一次之後，就會把整個檔案的內容記住，所以只要開著視窗，選取要找的 component ，點擊 find 按鈕就可以很快地列出來，而且他有上一個下一個的按鈕，可以快速的瀏覽各 component 位置，非常方便。</p><p><img src="https://s3-alpha-sig.figma.com/plugins/741895659787979282/534/8ebee8c4-63f1-4b5b-9935-97ebb35df46c-cover?Expires=1650844800&Signature=LzzmLj0XhilqL7RPnqceLi75Hk4hJtfI7jH9sOSbPS1KPTIhqGt1RPArsOhFX45GrH5UcKd9sHXxAuuNga3Wc-H2~WTjaHB8jhCXxWuLEBTI6McuC4MJMFzUTR88KyWvrwkcwobmweNslTRMg5cbUfdytqzBCymD7I07bYMRpmpy-MRYSwOd4sWF7eHSvf9UOl5l9~30UIvauqH7p7sND4FOpPlNaTE2vdtlmvejSOmiTWUdSeRmqA-MBENtMbudomQz6wSXLqlFLlu1p02ylE0Ot4iATgIDs7v1VQ6T0~nAcT3t~NoZiHtQx8E5GhAY8icfAwdV6mOCs40Xvjxx0A__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" alt="Instance Finder"></p><h1 id="替換成-Library-的-Components"><a href="#替換成-Library-的-Components" class="headerlink" title="替換成 Library 的 Components"></a>替換成 Library 的 Components</h1><p>替換 Components 有兩種情境，一種是他本身就是 component 只要換成 Library 的，另一種是他還不是 component，只是普通的 Group 要怎麼做替換？以下分這兩種情境解釋替換方法。</p><h2 id="Local-Components-替換-Library-Components"><a href="#Local-Components-替換-Library-Components" class="headerlink" title="Local Components 替換 Library Components"></a>Local Components 替換 Library Components</h2><p>因為本身已經是 Components，所以用上述的 Plugin - Instance Finder 找出後，點找出來的母項目即可全選相同的 instance ，並用 Figma 右側 Design 視窗替換 Library Components 即可。</p><p><img src="https://help.figma.com/hc/article_attachments/360091725133/Instance_swap_30fps.gif" alt="Figma 右側 Design 視窗替換 Library Components"></p><h2 id="Group-替換-Library-Components"><a href="#Group-替換-Library-Components" class="headerlink" title="Group 替換 Library Components"></a>Group 替換 Library Components</h2><p>另一種比較棘手的情況是要替換的標的物不是 component，只是一般的 Group。這個時候 Figma 右側 Design 視窗也不會跳出來給你選，那該怎麼辦呢？我找到了另一個超好用的 Plugin - <a href="https://www.figma.com/community/plugin/813970431341620710/Team-Library-Component-Browser">Team Library Component Browser</a>，只要將此套件先去 Library 的檔案按 <code>Save or update this library data</code>，然後去你要執行的檔案把視窗叫出來，就可以選取要替換的 Library Component 直接按 Swap 做替換，其中裡面還有一些小設定可以調整，看是要保持原始大小之類的，就留給各位玩玩看囉～</p><p><img src="https://s3-alpha-sig.figma.com/plugins/813970431341620710/26936/896b8404-d633-477e-b791-17d5e451c7d6-cover?Expires=1650844800&Signature=gItyd~3boSUPCQ0KwD0CQNu08vM2tiDrCZsFqlRrjVNLl7FMirV9lgCNVTcYiRSbMXeDenD~3cBpGT2dkBwe8W0OkHlBTOBLa2bHDFDRLV9Be9AERLzELw6ajVtok2~morNFEtJSSIli0VKuqhsSN-bAZZbP-Klp-FgDGD9aMXZ7IzWP6Cz7GV933pdawj~~lUnH-mlmfuwXRrhL6ZRtBebrOto~jWVLL1qB3SGKb2xBj8cUtRmowSZoPIvt00MbdfcQsYvV1cmfHxZdZh56ynrnQ0gS0lSi9m4p-1uokitV00TC6sNVbSYvj~KQ0as6aF~TGBXrCHZ~zAjd3rXT5w__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" alt="Team Library Component Browser"></p><h1 id="快速編排大量的-Artboards"><a href="#快速編排大量的-Artboards" class="headerlink" title="快速編排大量的 Artboards"></a>快速編排大量的 Artboards</h1><p>當專案長的越來越大後，大量的 Artboards 會變得不易維護，這時候就需要 Plugin 來快速一鍵編排了。Plugin - <a href="https://www.figma.com/community/plugin/786286754606650597/Organize-Layers">Organize Layers</a> 使用上就非常便利。但使用前提是每個 Artboards 的名稱要依照層次的方式命名，ex: 類別&#x2F;01&#x2F;1-xxxx，第一層通常放分類，第二層依照頁面取流水號，第三層開頭放的是頁面第幾步驟，xxxx 放描述，如此命名有個好處是，當要做 prototype 的時候，list 會直接依照前面的命名方式排序，能快速選到要 navigate to 的頁面。名稱的命名好之後，開 Plugin 的視窗就能選擇要使用第幾階層來編排 Artboards，也可以設定 x, y 的間距，最後點選按鈕一鍵編排，之後只要新增的頁面也按照一樣的方式命名，按鈕一鍵就能幫你排的舒舒服服，好開心～</p><p><img src="https://s3-alpha-sig.figma.com/plugins/786286754606650597/5647/352fce3d-b02d-47f5-960d-68458702ee42-cover?Expires=1650844800&Signature=OiDG34Lcmk4sNLqZ71LN0CmeUgbUBD6OCzGp1ZglRvtSqJu5V1zcPZV9OiDsnbEwqLI2633wvk8BoncCSUjdVnjiteqpRX4JWHlWTg0cLEpL3dZCDdMWZhudNCgcd69uA9roElA4LStn9gkLJgDdSgHGj0BMh8flp27qGOMd--jEOub4GFJfQIElGFsoNggSbwQodErSONS~7kYox1cWIEvZ-z9rTKHYIQhCbHJYGxoDzP1Ir7e4piMMAKJjGyLQFm5lmD7jooq66KVoGvXveu6poX5C96drB-LSLU1s7dFiLk1ey-Wi1EgK2qfyWQCkrNQP~SrZy7u0OS06CnkpRA__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" alt="Organize Layers"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.figma.com/community/plugin/741895659787979282/Instance-Finder">Figma Plugin - Instance Finder</a></li><li><a href="https://www.figma.com/community/plugin/813970431341620710/Team-Library-Component-Browser">Figma Plugin - Team Library Component Browser</a></li><li><a href="https://www.figma.com/community/plugin/786286754606650597/Organize-Layers">Figma Plugin - Organize Layers</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近 Figma 功能換到團隊的訂閱制，終於可以使用 Library 的功能了！但之前還沒換過去之前，檔案內的 Components 都是在 Local 原檔案中，現在該是 Refactor 整理的時候了，把共用的 Components 改用 Library 的，並重新整理檔案。此篇紀錄其中碰到的問題並寫出使用了哪些 Plugin 來改善 Refactor 的效率。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Figma" scheme="http://annilla.github.io/categories/UXUI/Figma/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Figma" scheme="http://annilla.github.io/tags/Figma/"/>
    
  </entry>
  
  <entry>
    <title>.NET 6 SPA with Vue-Cli Webpack Base - Start New Project</title>
    <link href="http://annilla.github.io/2022/03/04/Dotnet/NET-6-SPA-with-Vue-Cli-Webpack-Base/"/>
    <id>http://annilla.github.io/2022/03/04/Dotnet/NET-6-SPA-with-Vue-Cli-Webpack-Base/</id>
    <published>2022-03-03T16:00:00.000Z</published>
    <updated>2022-03-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>.NET 出到 6 之後，原本官方的 SPA <a href="https://github.com/dotnet/aspnetcore/issues/12890">套件被棄用</a>，新版改成使用 Vue-CLI + SPA Proxy。我們就從零開始建立新的 .NET6 + Vue-CLI (Webpack base) + Vuetify 專案吧～</p><span id="more"></span><h1 id="安裝-NET-6-amp-Node-js"><a href="#安裝-NET-6-amp-Node-js" class="headerlink" title="安裝 .NET 6 &amp; Node.js"></a>安裝 .NET 6 &amp; Node.js</h1><p>要先安裝 <a href="https://dotnet.microsoft.com/en-us/download">.NET 6</a> &amp; <a href="https://nodejs.org/en/">Node.js</a>，並確認版本是否正確。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --version</span><br></pre></td></tr></table></figure><p>此篇 dotnet 使用 6.0.200</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><p>此篇 node 使用 v16.4.0</p><h1 id="起始-dotnet-template"><a href="#起始-dotnet-template" class="headerlink" title="起始 dotnet template"></a>起始 dotnet template</h1><p>這次我們先起始一個 react 官方的模板，再從裡面修改檔案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new react</span><br></pre></td></tr></table></figure><p>會看到起始專案長這樣。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLX2z5Nz_ErmoEcxAEgHX_rn68Ifr-8J1v_8NidUaMWUF3pUZviECReYXYcSG248yXZX4zB4STTJKtCSLZovNcX4hnBEqHazkJUI3fv8BOBlu_9U_mI-GYhO4xnVX7ZAqvpVQBV-PNjZsIFZT8Hcrt7c1g=w828-h868-no?authuser=0" alt="dotnet new react"></p><p>主要 SPA 放置的地方就在 ClientApp 裡面，所以我們只要用 Vue-CLI 建立新的 Vue 專案，把對應的資料夾和設定值替換掉即可。</p><h1 id="Vue-CLI-建立專案"><a href="#Vue-CLI-建立專案" class="headerlink" title="Vue-CLI 建立專案"></a>Vue-CLI 建立專案</h1><p>先安裝 Vue-CLI，並確認版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><p>此篇 Vue-CLI 使用 v5.0.1</p><p>接著用 Vue-CLI 建立新專案，但因為 Vue-CLI 不允許使用字母大寫，所以我們把資料夾取名 <code>client-app</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create client-app</span><br></pre></td></tr></table></figure><p>接著選擇要的 preset，因為 Vuetify 還沒有用到 Vue 3 ，所以這邊就選擇 Vue 2 的選項。也可以依自己的喜好選 Manual 的方式組合。</p><p>接著進入 client-app 裡面，安裝 Vuetify。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd client-app</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add vuetify</span><br></pre></td></tr></table></figure><p>Vuetify 的模板就先選擇 recommended 即可。</p><p>Vue 模板都安裝完後，可以先試跑看有沒有成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>可以看到在 8080 port 有跑出建置好的 Vue + Vuetify 專案。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLXx7Ju-EayPyEeh39b-fJieuM1K7S4ZAA20t5msauhI9baNCBCUXcgkuDXYOwVNIq-lCteGP4Coul2nMF2HEz14wIkrCxiszBHyPjexr8ovkpU6oq-JRjml797zAQu0n-vQxcS0PaRFNbNxIvWxg0W9zQ=w2206-h1378-no?authuser=0" alt="Vue + Vuetify 專案"></p><p>確認安裝成功，就可以把舊的 ClientApp 刪掉。</p><h1 id="設定-config"><a href="#設定-config" class="headerlink" title="設定 config"></a>設定 config</h1><p>接著我們把一些 proxy config 設定上去，讓 dotnet 可以和 Vue-CLI 銜接起來。</p><p>打開 csproj 檔案。把 <code>SpaRoot</code> 的部分改成新建的資料夾 <code>client-app\</code>，並注意這裡的 <code>SpaProxyServerUrl</code> port 是 <code>44405</code> 且 <code>SpaProxyLaunchCommand</code> 是 <code>npm start</code>。所以我們要把 Vue-CLI 的設定改成對應的 port 和npm 指令。</p><blockquote><p>注意！若 SpaProxyServerUrl 若是 https 要改成 http。</p></blockquote><blockquote><p>PS. 每次 dotnet 模板起始的 port 都不一樣，請以當次建立的 port 為準。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">SpaRoot</span>&gt;</span>client-app\<span class="tag">&lt;/<span class="name">SpaRoot</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">SpaProxyServerUrl</span>&gt;</span>http://localhost:44405<span class="tag">&lt;/<span class="name">SpaProxyServerUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SpaProxyLaunchCommand</span>&gt;</span>npm start<span class="tag">&lt;/<span class="name">SpaProxyLaunchCommand</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RootNamespace</span>&gt;</span>dotnet_core_vue_cli<span class="tag">&lt;/<span class="name">RootNamespace</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImplicitUsings</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">ImplicitUsings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>打開 package.json，把 “serve” 改成 “start” 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>打開 vue.config.js，將 devServer port 換成 44405。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">44405</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transpileDependencies</span>: [</span><br><span class="line">    <span class="string">&#x27;vuetify&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Run"><a href="#Run" class="headerlink" title="Run~"></a>Run~</h1><p>開啟 csproj 檔案，vscode 會問你是否要建立 debug file，選擇 Yes，vscode 就會建立一個 .vscode 的資料夾。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLW5gDiNQt5ournrdZGTd0Agbja7hRSJkN5lxzUZvyYdB0NHov4H36TB9-9hPGlvLuGdoDNhtpop1FKXeOEeb9PCMar2hpW23SFqnnWMnngsmvYaU5_c5H1SdhjoM4uxbsUQbnaS1aIuzTmobaYxfpCeqg=w2206-h1378-no?authuser=0" alt="vscode debug files"></p><p>接著去 Debug 按 Run 的按鈕，我們就大功告成囉～</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLVicP5nFFOEVCRg9q5YgzfD5ouyqWZhs191vd8zayFgn-fHTkqcRurbx8nd8LduRBA88Z5ndDsrGbkfEYGVyYOXYAmA-zCyrfXM6YxOHK2pw8ITPnN28Ko7Rza5pSxUWwh9TBWIFc0SFlIVzu6XKbsgGA=w2206-h1378-no?authuser=0" alt="Run"></p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLXNAiYrBco8XyOW95fbUADTtz7GyAt0MwSky7U0Oncxo5MqCwNTxJLG9RnIZCgqieqMV_Ieuppnn3m89u1pQeEdrOJfPtZrL9PtoMUOfIPVsB0UHqJUMx5rbCLXEutn4rJwtZ3Z5jIjDZ0W2uy5KjJrSA=w2206-h1378-no?authuser=0" alt="Done"></p><p>今天的範例在 <a href="https://github.com/Annilla/dotnet-core-vue-cli/tree/v6.0.2">github</a>，下回見～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.NET 出到 6 之後，原本官方的 SPA &lt;a href=&quot;https://github.com/dotnet/aspnetcore/issues/12890&quot;&gt;套件被棄用&lt;/a&gt;，新版改成使用 Vue-CLI + SPA Proxy。我們就從零開始建立新的 .NET6 + Vue-CLI (Webpack base) + Vuetify 專案吧～&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="http://annilla.github.io/categories/NET/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="Webpack" scheme="http://annilla.github.io/tags/Webpack/"/>
    
      <category term="SPA" scheme="http://annilla.github.io/tags/SPA/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term=".NET" scheme="http://annilla.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>SVG JS Animation</title>
    <link href="http://annilla.github.io/2022/02/14/JS/SVG-JS-Animation/"/>
    <id>http://annilla.github.io/2022/02/14/JS/SVG-JS-Animation/</id>
    <published>2022-02-13T16:00:00.000Z</published>
    <updated>2022-02-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>SVG 通常會搭配 CSS Animation 做動畫，效能很不錯。但問題來了，如果設計師給一張很複雜的 SVG Banner 圖，需要只動裡面其中幾個物件，那使用 JS 會比較方便，就不用每張切圖對 x,y 位置，且 JS 能撰寫比較多使用者互動。這次就來測試使用 <a href="https://github.com/svgdotjs/svg.js">SVG.js</a> 做動畫。</p><span id="more"></span><p>查看動畫結果點<a href="https://annilla.github.io/svg-animate-js-test/svg-playground/dist/index.html">這裡</a>。</p><h1 id="步驟一：找一張大的-SVG-Banner-圖片"><a href="#步驟一：找一張大的-SVG-Banner-圖片" class="headerlink" title="步驟一：找一張大的 SVG Banner 圖片"></a>步驟一：找一張大的 SVG Banner 圖片</h1><p>從 <a href="https://www.vecteezy.com/">https://www.vecteezy.com/</a> 找一張可以測試的圖片。</p><p>把下載的檔案用 Illustrator 開啟，將想要做動畫的群組取名，如此一來以拉輸出後的 svg 檔案會自動在 html tag 加上 id 的屬性。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLXnWoVOa7uTtIkkGUJfUAHbcmf3PUmTTE1yKqdaWG0-r6Pd9rAEr-DYqYOqsnFLbjgHIpNo0kvKTRKNYE9pGC5XAjj1oWOZLDiTKj5yLAjxUqjzFmGI1Oyuo-kiTCItxnC1sxCIU_Wpc6iPY-dse5ZhzA=w2206-h1378-no?authuser=0" alt="用以拉將想要做動畫的群組取名"></p><h1 id="步驟二：開始做動畫"><a href="#步驟二：開始做動畫" class="headerlink" title="步驟二：開始做動畫"></a>步驟二：開始做動畫</h1><p>安裝套件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @svgdotjs/svg.js</span><br></pre></td></tr></table></figure><p>引入套件使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">SVG</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@svgdotjs/svg.js&quot;</span>;</span><br></pre></td></tr></table></figure><p>以氣球和氣球旁邊的愛心為例。會先用 SVG selector 把物件選取起來，在針對個別物件做 animate 的串連。若 animate 只有一次的話，可以用 loop 函數做重複即可，不需要另外寫 function。</p><p>先用愛心一次 animate 來說明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">BalloonLove</span> = <span class="title function_">SVG</span>(<span class="string">&quot;#svgjs #BalloonLove&quot;</span>); <span class="comment">// 選取物件</span></span><br><span class="line"><span class="title class_">BalloonLove</span>.<span class="title function_">opacity</span>(<span class="number">0.5</span>); <span class="comment">// 先讓愛心透明度 50%</span></span><br><span class="line"><span class="title class_">BalloonLove</span>.<span class="title function_">animate</span>(<span class="number">1000</span>, <span class="number">0</span>, <span class="string">&#x27;now&#x27;</span>).<span class="title function_">translate</span>(-<span class="number">10</span>, -<span class="number">30</span>).<span class="title function_">opacity</span>(<span class="number">1</span>).<span class="title function_">loop</span>(<span class="literal">true</span>, <span class="literal">true</span>); <span class="comment">// animate 動畫(duration, delay, 什麼時候開始), translate 移動位置, opacity 透明度 100%, loop 重複</span></span><br></pre></td></tr></table></figure><p>若 animate 分多段的話，以氣球為例需要寫一個函數重複執行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Balloon</span> = <span class="title function_">SVG</span>(<span class="string">&quot;#svgjs #Balloon&quot;</span>); <span class="comment">// 選取物件</span></span><br><span class="line"><span class="comment">// Balloon</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BalloonLoop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Balloon</span>.<span class="title function_">animate</span>(<span class="number">1000</span>)</span><br><span class="line">    .<span class="title function_">ease</span>(<span class="string">&quot;&lt;&gt;&quot;</span>)</span><br><span class="line">    .<span class="title function_">translate</span>(-<span class="number">30</span>, <span class="number">10</span>)</span><br><span class="line">    .<span class="title function_">animate</span>(<span class="number">1000</span>)</span><br><span class="line">    .<span class="title function_">ease</span>(<span class="string">&quot;&lt;&gt;&quot;</span>)</span><br><span class="line">    .<span class="title function_">translate</span>(<span class="number">70</span>, <span class="number">10</span>)</span><br><span class="line">    .<span class="title function_">animate</span>(<span class="number">1000</span>)</span><br><span class="line">    .<span class="title function_">ease</span>(<span class="string">&quot;&lt;&gt;&quot;</span>)</span><br><span class="line">    .<span class="title function_">translate</span>(-<span class="number">40</span>, -<span class="number">20</span>)</span><br><span class="line">    .<span class="title function_">after</span>(<span class="title class_">BalloonLoop</span>); <span class="comment">// 在動畫之後重新執行函數</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">BalloonLoop</span>(); <span class="comment">// 觸發函數執行</span></span><br></pre></td></tr></table></figure><h1 id="步驟三：和使用者做互動"><a href="#步驟三：和使用者做互動" class="headerlink" title="步驟三：和使用者做互動"></a>步驟三：和使用者做互動</h1><p>這邊做了一個小互動是當 Happy Valentine’s Day 動畫結束後，會感應使用者的滑鼠位置，做文字群組的相對位置移動。</p><p>先在 html 設定 mousemove 監聽事件，這裡搭配 vue cli 做測試。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">...</span> @<span class="attr">mousemove</span>=<span class="string">&quot;moveTxt&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接著在 js 設定變數，讓 svg 動畫結束後，才偵測使用者滑鼠，做文字群組的位移。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">SVG</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@svgdotjs/svg.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">initTxtX</span>: <span class="literal">null</span>, <span class="comment">// 紀錄 svg 內文字群組的 x 位置</span></span><br><span class="line">      <span class="attr">initTxtY</span>: <span class="literal">null</span>, <span class="comment">// 紀錄 svg 內文字群組的 y 位置</span></span><br><span class="line">      <span class="attr">canMoveTxt</span>: <span class="literal">false</span>, <span class="comment">// 設立是否可以移動文字的 flag，要等動畫結束才能變 true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">startSVGjs</span>(); <span class="comment">// 觸發動畫</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">startSVGjs</span>(<span class="params"></span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="title class_">TxtLove</span>.<span class="title function_">animate</span>(<span class="number">1000</span>, <span class="number">5000</span>).<span class="title function_">transform</span>(&#123;<span class="attr">translateY</span>: <span class="number">0</span>&#125;).<span class="title function_">opacity</span>(<span class="number">1</span>).<span class="title function_">after</span>(<span class="variable language_">this</span>.<span class="property">setTxtMove</span>); <span class="comment">// 在最後一個動畫結束後，開啟互動 flag</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setTxtMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// Can move txt</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">TxtGroup</span> = <span class="title function_">SVG</span>(<span class="string">&quot;#svgjs #TxtGroup&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">initTxtX</span> = <span class="title class_">TxtGroup</span>.<span class="title function_">x</span>(); <span class="comment">// 儲存文字群組初始 x 座標（單位從 svg 畫布，非視窗大小）</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">initTxtY</span> = <span class="title class_">TxtGroup</span>.<span class="title function_">y</span>(); <span class="comment">// 儲存文字群組初始 y 座標（單位從 svg 畫布，非視窗大小）</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">canMoveTxt</span> = <span class="literal">true</span>; <span class="comment">// 開啟 user 互動 flag</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">moveTxt</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">canMoveTxt</span>) <span class="keyword">return</span>; <span class="comment">// 若 flag 沒開則不執行下面程式</span></span><br><span class="line">      <span class="keyword">const</span> range = <span class="number">100</span>; <span class="comment">// 文字群組移動的最大範圍界線</span></span><br><span class="line">      <span class="keyword">const</span> eventX = e.<span class="property">clientX</span>; <span class="comment">// 滑鼠的 x 座標（單位為視窗大小）</span></span><br><span class="line">      <span class="keyword">const</span> eventY = e.<span class="property">clientY</span>; <span class="comment">// 滑鼠的 y 座標（單位為視窗大小）</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">TxtGroup</span> = <span class="title function_">SVG</span>(<span class="string">&quot;#svgjs #TxtGroup&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> ratio = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="number">2500</span>; <span class="comment">// svg 被視窗縮放的比例</span></span><br><span class="line">      <span class="keyword">const</span> gapX = eventX - <span class="variable language_">this</span>.<span class="property">initTxtX</span> * ratio; <span class="comment">// 滑鼠和文字群組 x 的距離</span></span><br><span class="line">      <span class="keyword">const</span> gapY = eventY - <span class="variable language_">this</span>.<span class="property">initTxtY</span> * ratio; <span class="comment">// 滑鼠和文字群組 y 的距離</span></span><br><span class="line">      <span class="keyword">let</span> moveX, moveY; <span class="comment">// 文字群組最後要移動的位置</span></span><br><span class="line">      <span class="keyword">if</span>(gapX &lt; <span class="number">0</span>) &#123; <span class="comment">// 計算 x 位移，若超過 range 範圍，則最多只移動 range 所設定的距離</span></span><br><span class="line">        moveX = <span class="title class_">Math</span>.<span class="title function_">abs</span>(gapX) &gt; range ? range * (-<span class="number">1</span>) : gapX;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        moveX = <span class="title class_">Math</span>.<span class="title function_">abs</span>(gapX) &gt; range ? range : gapX;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(gapY &lt; <span class="number">0</span>) &#123; <span class="comment">// 計算 y 位移，若超過 range 範圍，則最多只移動 range 所設定的距離｀</span></span><br><span class="line">        moveY = <span class="title class_">Math</span>.<span class="title function_">abs</span>(gapY) &gt; range ? range * (-<span class="number">1</span>) : gapY;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        moveY = <span class="title class_">Math</span>.<span class="title function_">abs</span>(gapY) &gt; range ? range : gapY;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">TxtGroup</span>.<span class="title function_">transform</span>(&#123;<span class="attr">translateX</span>: moveX, <span class="attr">translateY</span>: moveY&#125;); <span class="comment">// 做文字群組的位移</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如此一來就能操作複雜的大張 svg 圖和使用者互動囉～所有原始碼在<a href="https://github.com/Annilla/svg-animate-js-test">Github</a>，下次見～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SVG 通常會搭配 CSS Animation 做動畫，效能很不錯。但問題來了，如果設計師給一張很複雜的 SVG Banner 圖，需要只動裡面其中幾個物件，那使用 JS 會比較方便，就不用每張切圖對 x,y 位置，且 JS 能撰寫比較多使用者互動。這次就來測試使用 &lt;a href=&quot;https://github.com/svgdotjs/svg.js&quot;&gt;SVG.js&lt;/a&gt; 做動畫。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://annilla.github.io/categories/JS/"/>
    
    
      <category term="SVG" scheme="http://annilla.github.io/tags/SVG/"/>
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Vue 3 Studies - Suspense</title>
    <link href="http://annilla.github.io/2022/01/14/Vue/Vue-3-Studies-Suspense/"/>
    <id>http://annilla.github.io/2022/01/14/Vue/Vue-3-Studies-Suspense/</id>
    <published>2022-01-13T16:00:00.000Z</published>
    <updated>2022-01-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Suspense 這個元件是 Vue 參考 React 那邊所得到的靈感。當我們打開頁面時，通常會有多個非同步的 API 呼叫，出現 Loading 中，等到資料都到齊，才會看到完整的頁面。以往都是用 v-if 來判別 data 是否都到齊，在 Vue 3 中就能用 Suspense 元件來做這件事情，且多個非同步的 API 也能自動判別，非常省時省力。</p><span id="more"></span><h1 id="Suspense-範例"><a href="#Suspense-範例" class="headerlink" title="Suspense 範例"></a>Suspense 範例</h1><p>我們先來看這段程式碼。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Put components here, one or more of which makes an asychronous call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- What to display when loading --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Suspense 元件內，用 template block 區分要顯示的內容， default 為主要內容，在這裡串接 API， fallback 則是顯示 Loading 的畫面。我們放一個簡單的範例如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Event</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">      Loading...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Event</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Event.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123; <span class="title class_">Event</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Event.vue 大約長下面這樣。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> useEventSpace <span class="keyword">from</span> <span class="string">&quot;@/composables/use-event-space&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; capacity, attending, spaceLeft, increaseCapacity &#125; = <span class="keyword">await</span> <span class="title function_">useEventSpace</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; capacity, attending, spaceLeft, increaseCapacity &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意！這邊 setup 有用 async，因為 useEventSpace 裡面有接 API 。如此一來 Suspense 就能知道若 API 還沒回傳 data 的時候，換先顯示 Loading 的字樣。若想放多個非同步的 API 也能自動判別，非常方便。</p><h1 id="當-error-發生要怎麼處理？"><a href="#當-error-發生要怎麼處理？" class="headerlink" title="當 error 發生要怎麼處理？"></a>當 error 發生要怎麼處理？</h1><p>如果 API 出現 error 要怎麼處理？我們可以再加一層簡單的 v-if 防呆，並使用新的 lifecycle hook 監聽錯誤的訊息，適當的傳出來，程式碼大約長下面這個樣子，這樣前端的使用者就不會接到 console 的錯誤。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;error&quot;</span>&gt;</span>Uh oh .. &#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Event</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">      Loading...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Event</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Event.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, onErrorCaptured &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123; <span class="title class_">Event</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onErrorCaptured</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        error.<span class="property">value</span> = e;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; error &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="延伸應用：Skeleton-Loading-Screens"><a href="#延伸應用：Skeleton-Loading-Screens" class="headerlink" title="延伸應用：Skeleton Loading Screens"></a>延伸應用：Skeleton Loading Screens</h1><p>像外面常看的 UX 應用 Skeleton Loading，就可以跟 Suspense 結合，放在 fallback 的地方，非常適合。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://composition-api.vuejs.org/">Composition API RFC</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Suspense 這個元件是 Vue 參考 React 那邊所得到的靈感。當我們打開頁面時，通常會有多個非同步的 API 呼叫，出現 Loading 中，等到資料都到齊，才會看到完整的頁面。以往都是用 v-if 來判別 data 是否都到齊，在 Vue 3 中就能用 Suspense 元件來做這件事情，且多個非同步的 API 也能自動判別，非常省時省力。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://annilla.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 3 Studies - Sharing State</title>
    <link href="http://annilla.github.io/2021/12/10/Vue/Vue-3-Studies-Sharing-State/"/>
    <id>http://annilla.github.io/2021/12/10/Vue/Vue-3-Studies-Sharing-State/</id>
    <published>2021-12-09T16:00:00.000Z</published>
    <updated>2021-12-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>當我們在呼叫 API 後，通常會有很多後續的功能接續運作，例如：更換狀態、顯示錯誤訊息、使用 try catch blocks 等等。來看看這個搜尋範例是怎麼把程式碼抽取出來。</p><span id="more"></span><h1 id="搜尋範例"><a href="#搜尋範例" class="headerlink" title="搜尋範例"></a>搜尋範例</h1><p>我們先來看這段程式碼。</p><p>&#x2F;src&#x2F;App.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Search for <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchInput&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading: &#123;&#123; loading &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Error: &#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Number of events: &#123;&#123; results &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/composition-api&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> eventApi <span class="keyword">from</span> <span class="string">&quot;@/api/event.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> searchInput = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> results = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadData</span>(<span class="params">search</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      loading.<span class="property">value</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      error.<span class="property">value</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">      results.<span class="property">value</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        results.<span class="property">value</span> = <span class="keyword">await</span> eventApi.<span class="title function_">getEventCount</span>(search.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (err) &#123;</span></span><br><span class="line"><span class="language-javascript">        error.<span class="property">value</span> = err;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">finally</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        loading.<span class="property">value</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">watch</span>(searchInput, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(searchInput.<span class="property">value</span> !== <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">loadData</span>(searchInput);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        results.<span class="property">value</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; searchInput, results, loading, error &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在瀏覽器看起來會是這樣。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLXQs69TPoX7GprbmZBG6Y68BrYLrm3cb6egPdaqAiNEcOc37JZKkYsxrhLBv9d7V2jR1u-9IVjRYsLb2NChLCFZExtDrAw7YgKKWvQdz3s0-tPNlcZY0ym985SowsAYQ3974n1AwsdwdR_wAuhTrT-ewg=w1420-h995-no?authuser=0" alt="搜尋範例"></p><h1 id="程式碼抽取"><a href="#程式碼抽取" class="headerlink" title="程式碼抽取"></a>程式碼抽取</h1><p>接下來我們試著把 api 這段抽取出來。</p><p>composables&#x2F;use-promise.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/composition-api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">usePromise</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> results = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">createPromise</span> = <span class="keyword">async</span> (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">    loading.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">    error.<span class="property">value</span> = <span class="literal">null</span>;</span><br><span class="line">    results.<span class="property">value</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      results.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fn</span>(...args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      error.<span class="property">value</span> = err;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      loading.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; results, loading, error, createPromise &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後我們把抽取出來的程式碼，替代回原本的 App.js。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Search for <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchInput&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading: &#123;&#123; getEvents.loading &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Error: &#123;&#123; getEvents.error &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Number of events: &#123;&#123; getEvents.results &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/composition-api&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> eventApi <span class="keyword">from</span> <span class="string">&quot;@/api/event.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> usePromise <span class="keyword">from</span> <span class="string">&quot;@/composables/use-promise&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> searchInput = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> getEvents = <span class="title function_">usePromise</span>(<span class="function"><span class="params">search</span> =&gt;</span></span></span><br><span class="line"><span class="language-javascript">      eventApi.<span class="title function_">getEventCount</span>(search.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">watch</span>(searchInput, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(searchInput.<span class="property">value</span> !== <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        getEvents.<span class="title function_">createPromise</span>(searchInput);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        getEvents.<span class="property">results</span>.<span class="property">value</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; searchInput, getEvents &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這樣就完成程式碼的抽取替換囉～另外要注意的事，如果用 Vue 2 的話，html 的部分都要再多加 .value 才會抓到值，但如果是直接用 Vue 3 的話，上面程式碼就能直接正常運行。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://composition-api.vuejs.org/">Composition API RFC</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;當我們在呼叫 API 後，通常會有很多後續的功能接續運作，例如：更換狀態、顯示錯誤訊息、使用 try catch blocks 等等。來看看這個搜尋範例是怎麼把程式碼抽取出來。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://annilla.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Figma Interative Components</title>
    <link href="http://annilla.github.io/2021/11/05/UXUI/Figma-Interative-Components/"/>
    <id>http://annilla.github.io/2021/11/05/UXUI/Figma-Interative-Components/</id>
    <published>2021-11-04T16:00:00.000Z</published>
    <updated>2021-11-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近 10 月份 Figma 團隊出的 Interative Components Youtube 教學影片，讓我對這個新功能感到很興奮。簡單來說，就是 Checkbox, Radio, Switch… 等元件，可以製作獨立的動畫，讓 user 透過互動看到切換狀態的過程。話不多說，立刻就來試試看。</p><span id="more"></span><h1 id="Checkbox-amp-Switch"><a href="#Checkbox-amp-Switch" class="headerlink" title="Checkbox &amp; Switch"></a>Checkbox &amp; Switch</h1><ol><li><p>先把要做動畫的元件一起選取起來，會發現右邊 Design 面板出現 <code>Variants</code> 的按鈕，點擊 <code>Combine as variants</code><br><img src="https://lh3.googleusercontent.com/pw/AM-JKLUYkzoSOnLFpn6ATIlBoqS-_u3ym2Guf-jv4yG6ZIrCdgzR5DyviN79bdDsDvOjsnd3AQ9veceIzZGLUYgBI8VFxvC0w9voimHvR-8z1PMHYHe4xLaNBKbY0OvSOwlEl8kU9VPTZd13DWKgV722lu4zAg=w1920-h937-no?authuser=0" alt="Checkbox"></p></li><li><p>接著在 Prototype 面板設定動畫如下圖所示(Onclick&#x2F;Change to&#x2F;Instant)，即可完成<br><img src="https://lh3.googleusercontent.com/pw/AM-JKLVKR9z6Vn4KyeGFzBGwrYkimvKGMKcuexDz7QnNpiL54lqcS8XLpF65YmO2-f1rqo8M6WpueD7qXy95ZgBYG-RI5cIncMQtjuJ4qiq4qLZw3r3nQJZGCGIQSK7Awbbs_TDQByeotTiWiv5a_jcH-n0MnQ=w1920-h935-no?authuser=0" alt="Checkbox"></p></li></ol><p>Switch 的做法差不多，只是 Animation 選擇 Smart animate (Onclick&#x2F;Change to&#x2F;Smart animate)<br><img src="https://lh3.googleusercontent.com/pw/AM-JKLVGQdknSE70a2Zjfr6J091KiFjWDWxXXFDQbi5cntP6rzQ9u1gFTPxikC85qHJdaBJ4ce7lCJHBOASzPthPMKHluWtLWnE9V-zoa-xvuqk6V-SjGgNhBByczLxlegxLCzoD5d3YRpBDmi9barNT_CrLHw=w1920-h937-no?authuser=0" alt="Switch"></p><p>完成後，就可以執行 prototype，對元件做點選的動作，可以看到互動的效果優~<br><a href="https://capture.dropbox.com/oMIXKTN9A4opyRqs">互動效果影片連結在此</a></p><h1 id="Progress-Bar-amp-Progress-Circle"><a href="#Progress-Bar-amp-Progress-Circle" class="headerlink" title="Progress Bar &amp; Progress Circle"></a>Progress Bar &amp; Progress Circle</h1><p>另外，進度條或進度圈圈也可以做自動的動畫。</p><p>可以參考下圖做進度條。<br><img src="https://lh3.googleusercontent.com/pw/AM-JKLX3LsnOhXLrfoPvbk2q2e5ZiTuvr6MBIEbdSwNaypcDUnv12FLOi-0ZM-e7UDBoTVazbUjAZonW3DPuC0EsTs0q9qlCN64jZwiteeCsYwEoJ_OeS2l_OIjxVvm4V7ANt_G1mgfv8P-jWncBAg2poIw7uQ=w1920-h934-no?authuser=0" alt="Progress Bar"><br><img src="https://lh3.googleusercontent.com/pw/AM-JKLVRb9PCdHqbjiNhSVioW5m0_R2gkwjUaWh-PyXwj22KQuzyFCDKnZghyswKo6b5csrOWDzqP52p9ne_maWVYolKe7kvCTG5_64jQMBUEHGujdu87VzwuSoY5IwZArIchIz5WrEmP9uaYKhZ2PyhPZ7_1g=w1918-h937-no?authuser=0" alt="Progress Bar"></p><p>進度圈圈的部分比較複雜，我是參考 Figma Community 的人分享作法 <a href="https://www.figma.com/community/file/826647128105027386">Progress Bar Animations</a>。</p><p>最後附上 progress 完成的樣子，動畫看起來很順暢呢~<br><a href="https://capture.dropbox.com/58G1NI28rLLtZ3Vw">progress 完成影片連結在此</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.youtube.com/watch?v=ReNbXhaL3Xk">Figma tutorial: Interactive components</a></li><li><a href="https://help.figma.com/hc/en-us/articles/360061175334-Create-interactive-components-with-variants">Create interactive components with variants</a></li><li><a href="https://www.figma.com/community/file/826647128105027386">Progress Bar Animations</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近 10 月份 Figma 團隊出的 Interative Components Youtube 教學影片，讓我對這個新功能感到很興奮。簡單來說，就是 Checkbox, Radio, Switch… 等元件，可以製作獨立的動畫，讓 user 透過互動看到切換狀態的過程。話不多說，立刻就來試試看。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Figma" scheme="http://annilla.github.io/categories/UXUI/Figma/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Figma" scheme="http://annilla.github.io/tags/Figma/"/>
    
  </entry>
  
  <entry>
    <title>Manually Install Cypress</title>
    <link href="http://annilla.github.io/2021/10/04/Testing/Manually-Install-Cypress/"/>
    <id>http://annilla.github.io/2021/10/04/Testing/Manually-Install-Cypress/</id>
    <published>2021-10-03T16:00:00.000Z</published>
    <updated>2021-10-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近發現公司內網不明原因會擋住 npm install cypress，但安裝其他的套件就不會發生，所以只好搜尋看要怎麼手動安裝 cypress。</p><span id="more"></span><h1 id="手動安裝-cypress"><a href="#手動安裝-cypress" class="headerlink" title="手動安裝 cypress"></a>手動安裝 cypress</h1><h2 id="1-下載-zip-檔案"><a href="#1-下載-zip-檔案" class="headerlink" title="1. 下載 zip 檔案"></a>1. 下載 zip 檔案</h2><p>ex: <a href="https://download.cypress.io/desktop/6.8.0%EF%BC%8C%E4%B8%8D%E5%90%8C">https://download.cypress.io/desktop/6.8.0，不同</a> version 的話就替換最後面數字版本。</p><h2 id="2-找到電腦的-cypress-cache-資料夾"><a href="#2-找到電腦的-cypress-cache-資料夾" class="headerlink" title="2. 找到電腦的 cypress cache 資料夾"></a>2. 找到電腦的 cypress cache 資料夾</h2><p><a href="https://docs.cypress.io/guides/getting-started/installing-cypress#Binary-cache">官方文件</a>有說明預設的 windows 路徑為 <code>/AppData/Local/Cypress/Cache</code>，以我公司電腦為例，Path 是 <code>C:\Users\annychang\AppData\Local\Cypress\Cache</code></p><h2 id="3-將下載的-zip-檔案解壓縮到-cache-資料夾，完成"><a href="#3-將下載的-zip-檔案解壓縮到-cache-資料夾，完成" class="headerlink" title="3. 將下載的 zip 檔案解壓縮到 cache 資料夾，完成!"></a>3. 將下載的 zip 檔案解壓縮到 cache 資料夾，完成!</h2><p>將解壓縮的檔案放在對應的版本資料夾中，如此一來執行 npm install 的時候會優先從 global 這邊找到，就不會再進行安裝，可以直接執行。</p><p><img src="https://lh3.googleusercontent.com/pw/AM-JKLUO36gFVv7dYTCNWwJWUbg6Nw_R4c15EFJxMAf2dVKFftH2Clx2QAiPjj59AsKDosLpUtryGTmDysYKMpTTR0e8svqPiaBH7J25ikCtxDEkHKrk10KrftiQECg9bAaN5lvDgJMdvawPza_Cbn1-qPc2tA=w734-h418-no?authuser=0" alt="將解壓縮的檔案放在對應的版本資料夾"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://docs.cypress.io/guides/getting-started/installing-cypress#Direct-download">Cypress Direct-download</a></li><li><a href="https://docs.cypress.io/guides/getting-started/installing-cypress#Binary-cache">Cypress Cache</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近發現公司內網不明原因會擋住 npm install cypress，但安裝其他的套件就不會發生，所以只好搜尋看要怎麼手動安裝 cypress。&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="http://annilla.github.io/categories/Testing/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
      <category term="Cypress" scheme="http://annilla.github.io/tags/Cypress/"/>
    
      <category term="Testing" scheme="http://annilla.github.io/tags/Testing/"/>
    
  </entry>
  
</feed>
