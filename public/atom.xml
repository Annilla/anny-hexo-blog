<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anny Chang - F2E &amp; UI Designer</title>
  
  <subtitle>Design thinking is EVERYWHERE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://annilla.github.io/"/>
  <updated>2019-10-09T16:00:00.000Z</updated>
  <id>http://annilla.github.io/</id>
  
  <author>
    <name>Anny Chang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anny Chang&#39;s Resume - 履歷</title>
    <link href="http://annilla.github.io/3017/12/03/Resume/"/>
    <id>http://annilla.github.io/3017/12/03/Resume/</id>
    <published>3017-12-02T16:00:00.000Z</published>
    <updated>2019-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>My resume.</p><a id="more"></a><h1 id="Professional-Info"><a href="#Professional-Info" class="headerlink" title="Professional Info"></a>Professional Info</h1><h2 id="專長"><a href="#專長" class="headerlink" title="專長"></a>專長</h2><ul><li><p>設計 <code>UI</code> 介面、 <code>RWD</code> 網頁製作、 <code>SPA</code> 程式撰寫</p></li><li><p>擅用設計 <code>UI</code> 軟體（<code>Sketch</code>, <code>Adobe XD</code>, <code>Illustrator</code>, <code>Photoshop</code>）</p></li></ul><h2 id="研討會-工作坊"><a href="#研討會-工作坊" class="headerlink" title="研討會 / 工作坊"></a>研討會 / 工作坊</h2><table><thead><tr><th>時間</th><th>研討會 / 工作坊</th><th>分享主題</th></tr></thead><tbody><tr><td>2019.09</td><td>Kingston 2019 內訓</td><td><a href="https://www.canva.com/design/DADkDdvRR9A/JzfYMOKl6_2DLqeFH-BOww/view?utm_content=DADkDdvRR9A&amp;utm_campaign=designshare&amp;utm_medium=link&amp;utm_source=sharebutton" target="_blank" rel="noopener">Why Vue.js</a></td></tr><tr><td>2017.08</td><td>Kingston 2017 Mobile Team Workshop</td><td><a href="https://speakerdeck.com/annilla/use-webpack-plus-vue-loader-in-vs2017" target="_blank" rel="noopener">Use Webpack + Vue-Loader in VS2017</a></td></tr><tr><td>2016.11</td><td>前端魔法師十一月份小聚</td><td><a href="https://speakerdeck.com/annilla/facebook-instant-articles-ce-shi-dao-fa-bu" target="_blank" rel="noopener">Facebook Instant Articles - 測試到發布</a></td></tr></tbody></table><h2 id="證照"><a href="#證照" class="headerlink" title="證照"></a>證照</h2><h3 id="Microsoft-amp-Adobe-Badges-國際-Microsoft-amp-ACA-認證獎章"><a href="#Microsoft-amp-Adobe-Badges-國際-Microsoft-amp-ACA-認證獎章" class="headerlink" title="Microsoft &amp; Adobe Badges (國際 Microsoft &amp; ACA 認證獎章)"></a><a href="https://www.youracclaim.com/users/chiao-ni-chang" target="_blank" rel="noopener">Microsoft &amp; Adobe Badges (國際 Microsoft &amp; ACA 認證獎章)</a></h3><table><thead><tr><th>時間</th><th>證書</th></tr></thead><tbody><tr><td>2020.03</td><td>國際 Microsoft Certified: Azure Fundamentals</td></tr><tr><td>2017.03</td><td>國際 TOEIC 藍色證書 765分</td></tr><tr><td>2015.11</td><td>國家技術士網頁設計丙級證照</td></tr><tr><td>2014.12</td><td>國際 ACA Illustrator CS6 證照</td></tr><tr><td>2013.12</td><td>Adobe Master Of Rich Media Web Design Courses 證書</td></tr><tr><td>2013.06</td><td>中華民國斐陶斐榮譽學會榮譽會員 （碩士應屆第一名）</td></tr><tr><td>2013.03</td><td>國際 ACA Flash CS6 證照</td></tr><tr><td>2013.03</td><td>國際 ACA Dreamweaver CS6 證照</td></tr><tr><td>2012.11</td><td>國際 ACA Photoshop CS6 證照</td></tr><tr><td>2011.12</td><td>Adobe Digital Graphic Design Courses 證書</td></tr><tr><td>高中</td><td>全民英檢中級 證書</td></tr></tbody></table><h2 id="受訓"><a href="#受訓" class="headerlink" title="受訓"></a>受訓</h2><table><thead><tr><th>時間</th><th>課程</th></tr></thead><tbody><tr><td>2019.09</td><td>台灣微軟技術中心 Microsoft DevOps Workshop</td></tr><tr><td>2018.10</td><td>29761 使用微軟 T-SQL 查詢資料</td></tr><tr><td>2017.09</td><td>Skilltree JavaScript 實務測試新手班 第三梯</td></tr><tr><td>2017.06</td><td>網站測試開發 with WebdriverIO 實戰講堂</td></tr><tr><td>2014.11</td><td>色彩溝通立即上手</td></tr><tr><td>2014.10</td><td>網路活動創意規劃與會員行銷管理</td></tr><tr><td>2014.09</td><td>如何提升網路關鍵字行銷的成效</td></tr><tr><td>2014.09</td><td>JR-基層管理幹部工作關係與團隊力提昇</td></tr><tr><td>2014.08</td><td>eDM電子郵件行銷及電子報經營</td></tr><tr><td>2014.08</td><td>JM-基層幹部工作改善與執行力提昇培訓</td></tr></tbody></table><h1 id="Work​-Experience​​​"><a href="#Work​-Experience​​​" class="headerlink" title="Work​ Experience​​​"></a>Work​ Experience​​​</h1><table><thead><tr><th>時間</th><th>公司</th><th>職稱</th></tr></thead><tbody><tr><td>2017.06.12 - NOW</td><td>Kingston Technology</td><td>UI Designer &amp; Front-end Developer</td></tr><tr><td>2015.04.06 - 2017.06.11</td><td>JUKSY 街星</td><td>網頁UI設計 / 網頁前端工程師</td></tr><tr><td>2013.07.01 - 2015.04.03</td><td>微璽科技股份有限公司</td><td>商業設計 / 網頁UI設計</td></tr></tbody></table><h1 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h1><table><thead><tr><th>時間</th><th>學校</th></tr></thead><tbody><tr><td>2011 - 2013</td><td>國立台灣師範大學, 數學系碩士班數學教育組</td></tr><tr><td>2007 - 2011</td><td>國立台灣師範大學, 數學系學士班</td></tr><tr><td>2004 - 2007</td><td>中山女高</td></tr></tbody></table><h1 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h1><ul><li><p>SKETCH</p></li><li><p>ADOBE XD</p></li><li><p>PHOTOSHOP</p></li><li><p>ILLUSTRATOR</p></li><li><p>VSCODE / VS2017</p></li><li><p>GITHUB</p></li><li><p>SOURCETREE</p></li><li><p>NPM</p></li><li><p>WEBPACK / GULP</p></li></ul><h1 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h1><ul><li><p>HTML / PUG</p></li><li><p>CSS / SASS(SCSS) / STYLUS / POSTCSS</p></li><li><p>JS / JQUERY / VUE / ES6</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My resume.&lt;/p&gt;
    
    </summary>
    
      <category term="Resume" scheme="http://annilla.github.io/categories/Resume/"/>
    
    
  </entry>
  
  <entry>
    <title>Anny Chang&#39;s Portfolio - 作品集</title>
    <link href="http://annilla.github.io/3017/12/01/Portfolio/"/>
    <id>http://annilla.github.io/3017/12/01/Portfolio/</id>
    <published>3017-11-30T16:00:00.000Z</published>
    <updated>2019-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>My portfolio.</p><a id="more"></a><h1 id="Design-Collection"><a href="#Design-Collection" class="headerlink" title="Design Collection"></a>Design Collection</h1><h2 id="Behance-https-www-behance-net-annilla"><a href="#Behance-https-www-behance-net-annilla" class="headerlink" title="Behance: https://www.behance.net/annilla"></a>Behance: <a href="https://www.behance.net/annilla" target="_blank" rel="noopener">https://www.behance.net/annilla</a></h2><h1 id="Web-Collection"><a href="#Web-Collection" class="headerlink" title="Web Collection"></a>Web Collection</h1><table><thead><tr><th>作品</th><th>分類</th><th>內容</th></tr></thead><tbody><tr><td>系統</td><td>公司</td><td>Workflow CN (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Depanel Monitor (Web)</td></tr><tr><td>系統</td><td>公司</td><td>IND4 (Web)</td></tr><tr><td>系統</td><td>公司</td><td>SSO (Web)</td></tr><tr><td>系統</td><td>公司</td><td>OPscan (Web)</td></tr><tr><td>網頁</td><td>公司</td><td>Online User Manual (Hexo)</td></tr><tr><td>網頁</td><td>公司</td><td>Reflow Supplement Page (Web)</td></tr><tr><td>系統</td><td>公司</td><td>System Profile Management (Web)</td></tr><tr><td>系統</td><td>公司</td><td>NXT Monitor (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Workflow Compliance (Web)</td></tr><tr><td>網頁</td><td>公司</td><td>Kingston Mobile Team Portal (Hexo)</td></tr><tr><td>系統</td><td>公司</td><td>B2B (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Material Requirement Planning (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Empolyee Authentication Service (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Notes SignOff APP (Mobile Web App)</td></tr><tr><td>系統</td><td>公司</td><td>Quotation System (Web &amp; iOS App Design)</td></tr><tr><td>網站</td><td>綜合</td><td><a href="https://www.juksy.com/" target="_blank" rel="noopener">JUKSY 街星</a></td></tr><tr><td>網頁</td><td>展覽</td><td><a href="https://www.juksy.com/events/avengersstation" target="_blank" rel="noopener">《復仇者聯盟》世界巡迴展</a></td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/MMPR2017" target="_blank" rel="noopener">《金剛戰士》Power Rangers GO GO！</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/idareyoujune" target="_blank" rel="noopener">放肆越限 ● I Dare You</a> - 陳建州 &amp; 四葉草</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/dope2017may" target="_blank" rel="noopener">回家才DOPE ● Home Sweet Home</a> - 兄弟本色 &amp; 邵雨薇</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/northsouth2017April" target="_blank" rel="noopener">南北潮什麼 / From North to South</a> - 盧廣仲 &amp; 柯佳嬿</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/outofcontrol2017" target="_blank" rel="noopener">瘋面人物 / Out of control</a> - 許瑋甯 &amp; 吳慷仁</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1702valentine/" target="_blank" rel="noopener">我單故我在 Valentine, So what?</a> - 藍正龍</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1701F5reborn" target="_blank" rel="noopener">人生F5鍵 Reborn</a> - 瑤瑤</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1612waittoaction" target="_blank" rel="noopener">扳勢回潮　等不及的蓄勢待發！ Wait  to action</a> - 吳建豪</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/assassin2016creed" target="_blank" rel="noopener">刺客教條 12/28(三)跨年最強檔</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1611donjudge" target="_blank" rel="noopener">Don’t Judge me！玩跳．TONE</a> - 安心亞</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/fantastic2016beasts" target="_blank" rel="noopener">《怪獸與牠們的產地》JUKSY特別企劃</a></td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611angeliapets" target="_blank" rel="noopener">耍YOUNG無極限，玩酷做自己</a> - Angelia  &amp;  Pets</td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611samsung360" target="_blank" rel="noopener">精彩視界 一觸可及</a> - SAMSUNG</td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611fashioncity" target="_blank" rel="noopener">分享屬於你的[城市時尚]─你的城市‧由你演繹</a> - SAMSUNG 打卡分享照片</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1610bromance" target="_blank" rel="noopener">The Bromance！絕對合拍</a> - 蕭敬騰</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1609intoblack" target="_blank" rel="noopener">大勢黑潮 INTO BLACK</a> - SPEXIAL</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/train2016zombie" target="_blank" rel="noopener">屍速列車 屍裡逃生</a></td></tr><tr><td>網頁</td><td>遊戲</td><td><a href="https://www.juksy.com/events/pokemon2016go" target="_blank" rel="noopener">成神之路有你有我！寶可夢全攻略</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1608hithot" target="_blank" rel="noopener">熱浪來襲HITHOT</a> - 劉以豪</td></tr><tr><td>網頁</td><td>穿搭</td><td><a href="https://www.juksy.com/events/summer2016girlstyle" target="_blank" rel="noopener">熱辣無極限！2016年夏日潮妞穿搭公式</a></td></tr><tr><td>網頁</td><td>穿搭</td><td><a href="https://www.juksy.com/events/summer2016menstyle" target="_blank" rel="noopener">型到出火！體感41度的TO DO LIST</a></td></tr><tr><td>網頁</td><td>投票活動</td><td>JUKSY超新星（連結失效）</td></tr><tr><td>網頁</td><td>名人</td><td>用歌聲唱出最真的自己（連結失效） - 汪小敏</td></tr><tr><td>網站</td><td>公司</td><td><a href="http://www.taxxtron-tayu.com/" target="_blank" rel="noopener">京達國際股份有限公司</a></td></tr><tr><td>網站</td><td>購物</td><td><a href="http://web.ntnu.edu.tw/~60040004S/" target="_blank" rel="noopener">LOVEBABY讓您在家也能呵護寶貝</a></td></tr><tr><td>網站</td><td>研討會</td><td><a href="http://tame.tw/pme36/" target="_blank" rel="noopener">PME36</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My portfolio.&lt;/p&gt;
    
    </summary>
    
      <category term="Portfolio" scheme="http://annilla.github.io/categories/Portfolio/"/>
    
    
      <category term="Portfolio" scheme="http://annilla.github.io/tags/Portfolio/"/>
    
      <category term="作品集" scheme="http://annilla.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue 3 Studies - Lifecycle Hooks</title>
    <link href="http://annilla.github.io/2020/08/16/Vue/Vue-3-Studies-Lifecycle-Hooks/"/>
    <id>http://annilla.github.io/2020/08/16/Vue/Vue-3-Studies-Lifecycle-Hooks/</id>
    <published>2020-08-15T16:00:00.000Z</published>
    <updated>2020-08-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>因為上一篇課程後連續四個影片都要付費觀看，所以我們這篇先跳著寫 lifecycle 的部分，等之後有其他免費的學習資源再來補上。</p><a id="more"></a><p>影片網址： <a href="https://www.vuemastery.com/courses/vue-3-essentials/lifecycle-hooks" target="_blank" rel="noopener">https://www.vuemastery.com/courses/vue-3-essentials/lifecycle-hooks</a></p><h1 id="Vue-2-對應-Vue-3-lifecycle-composition-api-用法"><a href="#Vue-2-對應-Vue-3-lifecycle-composition-api-用法" class="headerlink" title="Vue 2 對應 Vue 3 lifecycle composition api 用法"></a>Vue 2 對應 Vue 3 lifecycle composition api 用法</h1><p>我們先看官網有一個對照清單如下：</p><ul><li>beforeCreate -&gt; use setup()         </li><li>created -&gt; use setup()         </li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeDestroy -&gt; onBeforeUnmount</li><li>destroyed -&gt; onUnmounted</li><li>activated -&gt; onActivated</li><li>deactivated -&gt; onDeactivated</li><li>errorCaptured -&gt; onErrorCaptured</li></ul><p>左邊是原本 Vue 2 的用法，右邊是在 Vue 3 composition api 的用法。基本上就是把原來的名稱前面加上 on 就可以使用。</p><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3ft9l-k-1pd4JkQjVlC-bnM-m3pvsRu7NZ0zTlj4Vcw9s3St3gU-rTDnMzJOEoinytoqOzgS-r99OJejTmGLGfj8fANMBuMevPJ0dnTOVemWGXTU2V40mW7eJ5aoUaG7q16SgIODZXBPO5prboaNxALgw=w1708-h1280-no?authuser=0" alt="Lifecycle composition API"></p><p>那為什麼前面兩個 beforeCreate, created 被劃掉了呢？因為這兩個要執行的事件其實直接寫在 setup 裡面是一樣的意思。下面有流程圖解釋 beforeCreate 相當於在 setup 之前，created 相當於在 setup 之後，那麼就直接照順序寫在 setup 裡面就可以了，所以 composition api 才不需要 beforeCreate, created。</p><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eTC6jk4WewmO7mihl3WZU2YvgRyQcdzwFrfcpK9cBS4f4_NnaJtXoxxowNYNHyIN9cezCFQVf1diwlPZXhqrxKuVtP24RM8hse2TtQzsKTTrRgYiCEmKHYSZnvSBy_ZveiM4GA3EAcdWwLZMtTW5IQKw=w1708-h1280-no?authuser=0" alt="beforeCreate, created"></p><p>另外有兩個 lifecycle 在 Vue 3 更換了名稱，分別是 beforeDestroy, destroyed 換成 onBeforeUnmount, onUnmounted。影片老師有特別詢問 Evan You 為什麼要更名，作者的回答是為了讓命名更符合實際情形。因為 Vue 的動作就是不斷將組件做 mount, unmount。</p><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3caWXrHlW3AfJ-4C-zzXCPwETmJSvwfUc9MHMh06CZwOyLl_P8mctmQfbfE0ai5a3UW3jkNr9txlfFy05pIzJ637flTsTu66zHLrtoQmv0lsdyYig-VnkDrXMfKjbkKktf0qhGuSr7On_3dCEPKD6ddoA=w1708-h1280-no?authuser=0" alt="onBeforeUnmount, onUnmounted"></p><h1 id="Vue-3-composition-api-新增的-lifecycle"><a href="#Vue-3-composition-api-新增的-lifecycle" class="headerlink" title="Vue 3 composition api 新增的 lifecycle"></a>Vue 3 composition api 新增的 lifecycle</h1><p>Vue 3 composition api 另外新增了兩個可以幫助開發者 debug 的 lifecycle。</p><ul><li><p>onRenderTracked: 當此組件第一次 render 後的每次 render 都會追蹤。可以觀察有哪些動作造成此組件 render。</p></li><li><p>onRenderTrigger: 當此組件重新 render 會觸發。可以觀察是哪些動作促使此組件重新 rendor。</p></li></ul><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3ciF0tGZVnnmaQ1skBBPrgMVxAcbq1W23ml9VyhOdh3ft41WbJt_-ZGNJtmxZo-E2IC2nDy6a9zHk-cXIOQN6lYT0y_C_U3Sx_SByjo0hfbJaBv26r19Pspy7NCnr9zOXJtIfvNjnWqg8C_TFpDXXGIhQ=w1708-h1280-no?authuser=0" alt="Vue 3 composition api 新增的 lifecycle"></p><p>為了實際了解這兩個新增的 lifecycle ，我們在 <a href="https://github.com/Annilla/vue3-lifecycle-practice/tree/v1.0" target="_blank" rel="noopener">github</a> 開個測試範例來試試。</p><p>因為 Vue 3 尚未 release，所以先安裝 next 版的 vue cli (@vue/cli@4.5.2)。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli@next</span><br></pre></td></tr></table></figure><p>安裝完後執行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;你的專案名稱&gt;</span><br></pre></td></tr></table></figure><p>選擇第二個選項 <code>Default (Vue 3 Preview)</code>。</p><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3d50SqpyRc0dZK84rx39FszdpPDossKfclETJyVzexPZq-xRSPYdHw8OpM6Phpz8iQvpmRxAKMvucn-aeyK1_1PQMuhKBjjMJ7AUOrh-qJXI_iL3WZjAi1zxY1GPuolbvT7SG1LSz85K2H7wBv9xD8Nsg=w1860-h858-no?authuser=0" alt="Default (Vue 3 Preview)"></p><p>預設專案會產生一個主要的 App.vue 裡面包含一個子組件 HellowWorld.vue，為了觀察新 lifecycle 的變化，我們將 App.vue, HellowWorld.vue 修改如下。</p><p>目標是在 App.vue 加一顆按鈕，當使用者點擊按鈕後，按鈕上顯示被點擊的次數會加一，並將HellowWorld 傳入的 msg 後面也加上被點擊的次數。藉此觀察 lifecycle 被觸發的情況。</p><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"Vue logo"</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addcount"</span>&gt;</span>Re-render App &#123;&#123; count &#125;&#125; times<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">:msg</span>=<span class="string">"`Welcome to Your Vue.js App $&#123;count&#125;`"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import &#123; ref, onMounted, onRenderTracked, onRenderTriggered &#125; from 'vue'</span></span><br><span class="line"><span class="undefined">import HelloWorld from './components/HelloWorld.vue'</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  name: 'App',</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    HelloWorld</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  setup() &#123;</span></span><br><span class="line"><span class="undefined">    const count = ref(0);</span></span><br><span class="line"><span class="undefined">    let addcount = () =&gt; &#123;</span></span><br><span class="line"><span class="undefined">      console.log('---------------------------------');</span></span><br><span class="line"><span class="undefined">      console.log(`Click button $&#123;count.value +1&#125; times`);</span></span><br><span class="line"><span class="undefined">      console.log('---------------------------------');</span></span><br><span class="line"><span class="undefined">      count.value++;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log('---------------------------------');</span></span><br><span class="line"><span class="undefined">    console.log(`Setup function start`);</span></span><br><span class="line"><span class="undefined">    console.log('---------------------------------');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="undefined">      console.log('App.vue mounted!')</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    onRenderTracked((e) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">      console.log('App.vue onRenderTracked!', e)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    onRenderTriggered((e) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">      console.log('App.vue onRenderTriggered!', e)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    return &#123; count, addcount &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HellowWorld.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import &#123; onMounted, onRenderTracked, onRenderTriggered &#125; from 'vue'</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  name: 'HelloWorld',</span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    msg: String</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  setup() &#123;</span></span><br><span class="line"><span class="undefined">    onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="undefined">      console.log('HelloWorld.vue mounted!')</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    onRenderTracked((e) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">      console.log('HelloWorld.vue onRenderTracked!', e)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    onRenderTriggered((e) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">      console.log('HelloWorld.vue onRenderTriggered!', e)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>當我們啟動應用後可以看到一開始的 console 如下。</p><p>lifecycle 觸發順序為：</p><ol><li>Setup function start -&gt; 執行 setup()</li><li>App.vue onRenderTracked! -&gt; App 開始 Render</li><li>HelloWorld.vue onRenderTracked! -&gt; HelloWorld 開始 Render</li><li>HelloWorld.vue mounted! -&gt; HelloWorld DOM 生成完畢</li><li>App.vue mounted! -&gt; App DOM 生成完畢</li></ol><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3fXRAzTfUslKQ5JG0EWm2y76FOmGJy7nSc6XnPbRjHvf5ndbjLEST-Ca553MBwVpRny7XnnjYyPo26bIHJm9ZDqEfQTCxM4BIcuC91RAX_CBFoCsaGaPFw0TYtR_6IqO4xbpQuwuCZ-FnSrAYlyKEyrOw=w2558-h898-no?authuser=0" alt="一開始的 console"></p><p>當我們點擊按鈕後，lifecycle 觸發順序為：</p><ol><li>Click button 1 times -&gt; 點擊 button 觸發 addcount()</li><li>App.vue onRenderTriggered! -&gt; App 被觸發 Re-render</li><li>App.vue onRenderTracked! -&gt; App 開始 Re-render</li><li>HelloWorld.vue onRenderTracked! -&gt; HelloWorld 開始 Re-render</li></ol><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3dyvAcNmo16uKAzmyTJCa4KyIv3fIzTODbvFB4JKKsystt86wIBxhm4PPut7IVV7M-vjvmSaYjZWjgzYPqORYMYB3WZJGrQXL6t9REVNKAsMHRAJcMXk37Qt3LM7LdkXjF8hnRZ656XrwvxQjhoz3S3KA=w2558-h898-no?authuser=0" alt="點擊按鈕後的 console"></p><p>從上述的實驗可以觀察出父子組件是如何觸發 onRenderTracked, onRenderTriggered 的，未來使用上應該有助於開發者了解組件 render 的過程，實測下來感覺還蠻有趣的。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://composition-api.vuejs.org/" target="_blank" rel="noopener">Composition API RFC</a></li><li><a href="https://www.vuemastery.com/courses/vue-3-essentials/lifecycle-hooks" target="_blank" rel="noopener">Lifecycle Hooks</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為上一篇課程後連續四個影片都要付費觀看，所以我們這篇先跳著寫 lifecycle 的部分，等之後有其他免費的學習資源再來補上。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://annilla.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 3 Studies - Setup &amp; Reactive References</title>
    <link href="http://annilla.github.io/2020/07/20/Vue/Vue-3-Studies-Setup-Reactive-References/"/>
    <id>http://annilla.github.io/2020/07/20/Vue/Vue-3-Studies-Setup-Reactive-References/</id>
    <published>2020-07-19T16:00:00.000Z</published>
    <updated>2020-07-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇我們提到為什麼使用 composition API，這次要複習在何時使用並介紹 Setup &amp; Reactive References 的使用方式。</p><a id="more"></a><p>影片網址： <a href="https://www.vuemastery.com/courses/vue-3-essentials/setup-and-reactive-references" target="_blank" rel="noopener">https://www.vuemastery.com/courses/vue-3-essentials/setup-and-reactive-references</a></p><h1 id="什麼時候要用-composition-API？"><a href="#什麼時候要用-composition-API？" class="headerlink" title="什麼時候要用 composition API？"></a>什麼時候要用 composition API？</h1><p>影片中再次強調 composition API 只是多一種選擇的程式寫法，舊有的 Vue 2 寫法還是可以完完全全繼續使用。那我們什麼時候可以用 composition API 呢？</p><ol><li>當專案想要使用強型別寫法，將可以順利支援 typescript。</li><li>當組件過於龐大，需要用功能來重新組織程式架構。</li><li>部分功能的程式需要在不同組件中重複使用。</li></ol><p><img src="https://lh3.googleusercontent.com/pw/ACtC-3eCvFbdVnrb9iLGHa_ZjO--scQhmd4UfRh8xaImOpv_R_amOSXUVy0KvP8-dGZGfayGYuqILhRuaHk8EH30fnjbCDTXQ1sL149XDMQAtlBOiVxNG9-QAa4PM8P9g0eqsdluiHv5Z7G8c1_pS6OBYE3znQ=w1708-h1280-no?authuser=0" alt="什麼時候可以用 composition API"></p><h1 id="Setup-amp-Reactive-References"><a href="#Setup-amp-Reactive-References" class="headerlink" title="Setup &amp; Reactive References"></a>Setup &amp; Reactive References</h1><p>我們來看看一般 Vue 2 寫法如下，畫面會顯示 data return 的 capacity 3。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3fimuHNX70ZHmpdzIw8k22KdDWMKqipei1fu7xw-QKGugH2EyXBA0C7jn0VLOH6F8ypXOCIPtZqpGCTgA8U3mF-D51ktcgy2ti-yIkdrwKu7GnOM0g0xWhkcz4b_FvBuN9hj4pouUSClZBoJmVZ9eMwlQ=w1708-h1280-no?authuser=0" alt="Vue 2 寫法"></p><p>那在 composition API 要怎麼寫呢？我們使用 setup function，他觸發時機會在 components, props, data, methods, computed properties, lifecycle methods 之前，且他是沒辦法用 this 抓到自己這個組件。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3eWI_eBp_mjrFvWmA6EvNEZ356XpFV38MvVOhXq2Ge-vC-vH3_RLR6pUPw6PFBDRpXbv1jZDK__yJxOjYhrsrYD94VaMi9REsdh6A6_ZaRZwRkPEOWMkvlviRo39MYdt5aV5uAa9qMvNPzGgx6fGmNQ0g=w1708-h1280-no?authuser=0" alt="composition API 寫法"></p><p>Setup 可以放兩個參數，先介紹第一個參數用法。第一個參數是 props ，他一樣是 reactive 且 可以使用 watch 監聽改變事件如下圖。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3emWzVDwDPK7WrgHEszBhgr-UsIjKvFGVf6Itw2TAvGs0Y0hVtQyXXyZBzSKW19gvrIz5SW5a5C3NDSDNzYufFPn0wieD8RvNm3F4xpgT651nGz-PVnMat5MbiL-YI2uvSp_DBlzrPFqCZb_NKs2qkTYQ=w1708-h1280-no?authuser=0" alt="composition API 寫法"></p><p>Setup 第二個參數是 context，剛剛說在 setup 裡面不能用 this 抓取自己這個組件，所以第二個參數 context 就是拿來取得自己這個組件的內容，就相當於以前的 this。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3eGf9nsqqhd9MQbfrR3ZM5kprpY6PNwbIWG6Na2_g_PQnmmWwCKFPYwmjNS5OF8mMu5ETKiC_Z60-W33BxyP5jQUn56WiSeZNb6j89lfevlliJgYn5Luc0BF4myz1ZTENDmENgeDOXAwWuwl-SgrJSHkw=w1708-h1280-no?authuser=0" alt="composition API 寫法"></p><p>我們回頭來看看 setup 要怎麼寫。我們會令一個常數 capacity 是 ref(3)，這邊的 ref 是 reactive reference function。這邊將我們的原始值包在一個物件當中，相當於 Vue 2 我們將值包在data返回的物件中。這邊要注意的是：用 composition API 也可以造不跟此組件相關的 reactive 物件。這邊影片當中說這是個好處，但不確定好處是在哪裡？可能要等以後遇到對應的情境才會解釋。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3f_P3n5zpchz5UWRVigSz3nS4LGGw5BfF6YI83-9hPmYco3uUMDgd95x38xbPS5B4j56nIydDvWobfWDIfcj2uNs38WOecRLezuX-dHmxPJDCrEJdLGb_39-UDRRhwTOpmuI1B1cA7CXaRLLzw1lUMnBQ=w1708-h1280-no?authuser=0" alt="composition API 寫法"></p><p>最後，我們將要關聯 template 的變數和函數 return 出來。雖然這寫法很冗長，但他讓我們的程式更容易維護。我們可以控制讓哪些變數或函式輸出，也可以追蹤屬性是從哪裡定義的。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3eaJSLKDDeZxuwoPihyTaK-VtIZDVAaXKqPuHWDteFjC1KAjk5UXMCRs-gWVHoHvcQt_WTAqKm1bfUWfETaBCJgURCj3PnJF5jcp1McrVf53Zhl3X0fICg7IwvqzNGNFSG_l-R9u7A-T7EWkgVCJPlSxg=w1708-h1280-no?authuser=0" alt="composition API 寫法"></p><h1 id="Vue-2-也可以使用-composition-API"><a href="#Vue-2-也可以使用-composition-API" class="headerlink" title="Vue 2 也可以使用 composition API"></a>Vue 2 也可以使用 composition API</h1><p>如果我們想要在 Vue 2 使用 composition API，可以如下圖安裝進來。我覺得設計者設想的很周到，不過礙於目前專案開發者程度參差不齊，我應該也是等到Vue 3 出正式版且vuetify 有更新框架後，才會考慮開始用在工作上的專案。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3evT6PLP96czPiySVh0t_XjIZPawE78kFDXMuxS3JEMM8TEemPNbdqdRxS8Y577J_tIJbE_J_cpKTtciGPnRaQt3UVH29Ue-RR6lrDFGO_l7d6gwa8O7hUUig358G6lmOClZTaRnH_4PPCCw7JA3Hm5Hg=w1708-h1280-no?authuser=0" alt="Vue 2 使用 composition API"></p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://composition-api.vuejs.org/" target="_blank" rel="noopener">Composition API RFC</a></li><li><a href="https://www.vuemastery.com/courses/vue-3-essentials/setup-and-reactive-references" target="_blank" rel="noopener">Setup &amp; Reactive References</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇我們提到為什麼使用 composition API，這次要複習在何時使用並介紹 Setup &amp;amp; Reactive References 的使用方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://annilla.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 3 Studies - Why the composition API</title>
    <link href="http://annilla.github.io/2020/06/27/Vue/Vue-3-Studies-Why-the-composition-API/"/>
    <id>http://annilla.github.io/2020/06/27/Vue/Vue-3-Studies-Why-the-composition-API/</id>
    <published>2020-06-26T16:00:00.000Z</published>
    <updated>2020-06-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 3 雖然還沒出正式版，但蠻多人對新的 composition API 有所好評。剛好官網有完整的影片介紹，所以想趁這個機會開始學習。</p><a id="more"></a><p>影片網址： <a href="https://www.vuemastery.com/courses/vue-3-essentials/why-the-composition-api/" target="_blank" rel="noopener">https://www.vuemastery.com/courses/vue-3-essentials/why-the-composition-api/</a></p><p>接下來會針對目前 Vue 2 的限制解釋並提出 Vue 3 的解決方式。</p><p>影片中提出當我們的專案越來越大/醜時，三個 Vue 2 的限制：</p><ol><li>Readability as components grow：當組件越來越複雜時，程式變得越不容易閱讀。</li><li>Code reuse patterns have drawbacks：程式片段重複使用的方式有缺點。</li><li>Limited typescript support：typescript 支援上有限制。</li></ol><h1 id="比較大的組件會變得越來越難閱讀和維護"><a href="#比較大的組件會變得越來越難閱讀和維護" class="headerlink" title="比較大的組件會變得越來越難閱讀和維護"></a>比較大的組件會變得越來越難閱讀和維護</h1><p>影片當中以搜尋組件(search.vue)為例。當我們搜尋組件想要寫兩個功能：一個功能是搜尋關鍵字結果(Search)；另一個功能是對搜尋結果做排序(Sorting)。在 Vue 2 的作法，我們可能把同一個 Search/Sorting 的功能將邏輯散佈在各個程式區塊，有可能在 components, props, data, computed, methods, lifecycle methods等。當其他開發者想要閱讀時沒辦法一眼看到功能的所有邏輯，而是需要掃描散佈在各片段的程式碼才能了解特定功能的邏輯。所以 Vue 3 要解決的是如何把同一功能的邏輯統一放在一個地方，讓閱讀上更容易。</p><p>Vue 2 將功能邏輯散佈在多個程式碼片段<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3d96-4SjMB_p4-hWeSPOVnlfgcOsXoIk9PYGTL6S0mDMzbuTx3VdH5294bQdrYbITjYCyuXrsTpWXjng2H_aPb83y1kHzovuzE7dEXjhMyYB3ZZHSEJfQBgLfo_YSvaDoBQ7f2B0SP-8vZJgZYko4RihA=w2208-h1242-no?authuser=0" alt="Vue 2 將功能邏輯散佈在多個程式碼片段"></p><p>Vue 3 的解決方式就是推出 composition API ，將兩種功能的程式碼片段先集中成兩個區塊，放在 setup 函式中，且他完全是選擇性的。第一次看到可能會想說：這樣是否表示我們會產生一個超巨大的程式碼在 setup 函式中嗎？答案是，不。我們接下來看看他是如何解釋的。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3c1z4-Cy7mQ1itIsSDBCv2ydlMKfl0Uq-6ITtVczzASfVgXJ57CA66HdLv5kVdhx0RUjbRjd7Sd4UY9WLnMCu7DJa4ezAZo_QViPKXCht75yC_mzGDUS1CO3c6z193-pudoaXPEvR6eeTx5yxP60yszFg=w2208-h1242-no?authuser=0" alt="composition API setup"></p><p>我們可以把兩個功能先寫出來各自的函式，並在setup 函式 return 出來。（這裡為了方便解釋寫在同一頁，實際上會另外寫出來 js 檔案，要用的時候再引入）<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3fXgoNhS2-gvKQhmE2H80cBJmEXXfzqcm_vru2fzbhqAfcocu5NGjXvHNj0c9GRoR0wZvwXeCNLEV_o09u6Ziwpuv_PYNGOYWjHoC0w-yFH1fixvTO22LG6HLKj4ms4rppxbuC4h2upzsn0z-5FsjZgAA=w2208-h1242-no?authuser=0" alt="composition API setup"></p><p>現在，程式碼片段變得更符合邏輯閱讀，但這不代表組合函式會取代組件父子關係，我們還是會先將組件父子關係區分出來，各組件的功能再以組合函式來表示。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3eWW8YTjK_GIX91w9UCF8IRSX8PMQMkUKzPjMIU99ckLFRpZBjGh_jsTK4OsmUp2cDOpmVaiRHhsLq9UQOO32SyyhZ63zpMjSbqkWOiWT3Wrsilnx0BnxwbnieulwLw558MESaXY8P3fZEh2jbl8orP0A=w2208-h1242-no?authuser=0" alt="composition API setup"></p><h1 id="找不到完美的方式能在不同組件中重複使用相同邏輯"><a href="#找不到完美的方式能在不同組件中重複使用相同邏輯" class="headerlink" title="找不到完美的方式能在不同組件中重複使用相同邏輯"></a>找不到完美的方式能在不同組件中重複使用相同邏輯</h1><p>影片中提到在 Vue 2 有三種方式可以在不同組件中重複使用相同邏輯。</p><ol><li><p>Mixin：第一種是分別拉出來 Search/Sorting 各自的mixin，並在搜尋組件中引用 mixins 加入。</p><ul><li>優點：<ul><li>Organized by feature：優點是可以依據功能組織各自邏輯。</li></ul></li><li>缺點：<ul><li>Conflict prone：因為有各自的data等屬性，容易發生衝突。</li><li>Unclear relationship：不清楚兩者 mixin 關係是否會互相影響。</li><li>Not easy reuseble：不容易重複使用。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3cuCe0z_fEa50pIodm4hYC8od1Bs0objS-283HeyY-RdgKwAi8wJ6oYMynQBizr66oyqMXsUlQXkmGTttljZusYWrwuQ0IBi1PXJIwL0vY7wIJfrYLsMZJBsubn9bd9kTymExoN00egnmSqzIk-mBxuEQ=w1708-h1280-no?authuser=0" alt="Mixin"></li></ul></li></ul></li><li><p>Mixin Factories: 第二種方式是使用客製版本的mixin傳入對應的config。</p><ul><li>優點<ul><li>Easily reusable：容易重複使用。</li><li>Clearer relationships：將兩者關係釐清楚。</li></ul></li><li>缺點<ul><li>Weak namespace：命名方式不嚴謹。</li><li>Implicit property additions：內部添加隱藏的屬性。</li><li>No Instance access at runtime：Vue 運行時並不會動態生成。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3dJvx5OUIZEZiJR-VBBCJjDWWDlF3EfYoqT6Hruat6fvOSd8Ibv-KsrUrk2lR0sgf9ZO9CoWJ97GXELgWelH-GaTQA9VTV9Kwebx-IZnvQbSgZL4wrotK66ahn8esXsS3U3MbMWFK2drXSyN_uBBuf0LA=w1708-h1280-no?authuser=0" alt="Mixin Factories"></li></ul></li></ul></li><li><p>Scope slots：第三種是將 Search/Sorting 分成兩個 Vue 組件，並用 slot 的方式做巢狀使用。</p><ul><li>優點<ul><li>解決 mixin 的問題</li></ul></li><li>缺點<ul><li>Increases indentation：增加縮排。</li><li>Lots of configuration ：更多的設定值。</li><li>Less flexible ：彈性變小。</li><li>Less performance ：性能變差。<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3djhWxIL2elD1Nlz60lvLyec2aDpm13uSxYz3Lx7JnYYj3lYyPinDfLDesY7WwXQkW3GzT93XID13mEJCoXSK98H4KVtCVhItKl5C9zMSYhhamHQAGlUeTJZyIoTcxGsK007IzPyh3pfD26VdIEsnEmVA=w2208-h1242-no?authuser=0" alt="Scope slots"></li></ul></li></ul></li></ol><p>這三種都有他的缺點，所以影片提到 composition API 使用上可以解決上述問題。就是將 Search/Sorting 兩個 composition function 各自分出 js 將邏輯寫出來。在 Vue 組件設定變數將其各自做引用函式並設定所需要的參數。</p><ul><li>優點<ul><li>程式碼精簡</li><li>和平常的 js 使用差不多</li><li>使用上非常有彈性</li><li>友善的使用方式</li></ul></li><li>缺點<ul><li>要熟悉新的程式使用寫法<br><img src="https://lh3.googleusercontent.com/pw/ACtC-3dPPnmhsRLsSHI33vrnqj_QB8CScnf9jLwa0iM5iJfRJVhM0IW5Hs4ommjgXhu5larti1rTtA46wmwxMk2rmoQ-9kjp2CRwx5UA-s9KpjOzmH1kEQkgWXPT8YzlzJfD1_YmBF1TuQJV4wVnZiVPfspgig=w2208-h1242-no?authuser=0" alt="composition API"></li></ul></li></ul><p>整體來說，composition API 都是大大提升組件的邏輯組織寫法，讓開發者能更快進入狀況，用更輕鬆精簡的方式達到開發目的，我個人是非常看好且開心的，畢竟一個工程師要面對的專案實在太多，要省時省力才有效率。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://composition-api.vuejs.org/" target="_blank" rel="noopener">Composition API RFC</a></li><li><a href="https://www.vuemastery.com/courses/vue-3-essentials/why-the-composition-api/" target="_blank" rel="noopener">Why the Composition API</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue 3 雖然還沒出正式版，但蠻多人對新的 composition API 有所好評。剛好官網有完整的影片介紹，所以想趁這個機會開始學習。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://annilla.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Naver Study Case - National Assembly election special page</title>
    <link href="http://annilla.github.io/2020/05/04/UXUI/Naver-Study-Case-National-Assembly-Election-Special-Page/"/>
    <id>http://annilla.github.io/2020/05/04/UXUI/Naver-Study-Case-National-Assembly-Election-Special-Page/</id>
    <published>2020-05-03T16:00:00.000Z</published>
    <updated>2020-05-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>繼上次分享 Naver study case 訂餐 APP 後感覺意猶未盡，剛好看到一個是關於第21屆國民議會選舉特別頁面的設計，覺得很有興趣，我們就來一起看看吧～</p><a id="more"></a><p>原定於4月15日舉行的第21屆國民議會選舉的選舉日現在提前一個月。<br>Naver News製作了一個“特殊頁面”，該頁面提供有關每次選舉的全面信息。<br>在2020年大選中，將快速準確地提供有關選舉的信息以及相關新聞。 </p><p><img src="https://lh3.googleusercontent.com/gHll-6CMUZTF8E2Oe7feyDPlcuV9hHkS1UOCY-_Mj6XZgjh3bvsm65VqR07kyJfzn7WD_em_64tR4opuZNVv0j16jfDpe1MF3dAerQKNtXCu5xB58ToH3OTEL26fcD6niW9BMvyE_RP2NOAkJ168t-X-pI7kgGXsHPDaPE4iEClkw9BOgLLyTVkzgXhIv8_udSRz_SdQx-35ID6S_K0YfC0c_0TcIPnj1YE1LRm609KGiGhao7CaNzn2lN98CVb7qsBojMPe2Yev1hQjdgeY1boGRslYUwmQGlOEAGpFWTpF6GiMme1_kd8D12db158rxBZKoZe5EJL18p1363mxhjPfA5ZUbyLFAD6snftrkYhSzKwF8R2dVVppPgOEmmBL4a3TckLtEQhMI1MGOA5sb0_n_D_RCZsUZ0vCgg6Xf81bRyhQnS7T9y3BqxUEUXheaiMgr2-TC4yxPdkc2mzxFg-GQIDhEsPXhexq7blbDEeGqpgo9qZdu9ECL8IkzcxVH4jTcUQpbDdZADsnrPIOUk00IWoEqCWyFCUn6OFl8UkNlbT3BZWp9H7vphl1CYNMs3UvRNiF9IAf7vsFeoUo7J8cmhnPvRZI-50Y5jCKBEIzKAKVwm3N_juiQlyxzRS1vM2UyRz5EQ4DU2QALRVPQVeQb_Y-CK1B6L_AzHJuc9xN7yQypD2s6FrPau0kT8gpMC_WNE1HJSOhQpos7xuYke8OZsXJgO3usynY_BNaUM43xKzZqtrZd1gG=w966-h1078-no" alt="第21屆國民議會選舉特別頁面"></p><h1 id="通過累積的專業知識提高資源管理效率，使用AIRS技術，推薦文章更高質量！"><a href="#通過累積的專業知識提高資源管理效率，使用AIRS技術，推薦文章更高質量！" class="headerlink" title="通過累積的專業知識提高資源管理效率，使用AIRS技術，推薦文章更高質量！"></a>通過累積的專業知識提高資源管理效率，使用AIRS技術，推薦文章更高質量！</h1><p>2020年大選特別頁面的重點是提高與選舉相關的推薦內容的質量，以滿足個人興趣。 利用AiRS開發的“關鍵字新聞”，可以自動提取具有很高用戶興趣的關鍵字，並添加一個完全個性化的域。為了提高資源管理的效率，僅根據上次選舉功能頁面的指示選擇常用組件。Naver News 創建了一個特殊頁面。除了擴展個性化功能外，“ Pick Press”也是一家媒體，該媒體收集與編輯選舉相關的新聞，對其進行改進，可以從各個角度使用選舉新聞：從選舉出版物和統計數據。我們試圖通過“專用觀眾”和“信息圖表”更有效地進行投放。  </p><p>因此，第21屆國會選舉專頁服務理念的關鍵詞，可以通過三種方式進行組織：</p><p><img src="https://lh3.googleusercontent.com/zJpBnTEaW-a1pDmU64QNHOcAyEVwfT5vp95LB1a0PCBrElQUW0i0MuFjzsrRI_CjJPxfm873ofN-g8OTBsucRh-AaYJC0NnltAKjdYCV6pjElun7VeRKT6QzTB58XdmSFeOOGz01BQipGD8fk0Xvp-MdJf2te7dnPJSWH8StyF6pX6R5yEgouInJHCPRCvn9U5BdrO9jVnXHwX1pcoMU9BmKDax0zGH2AXhTwbM0Qn9aSUWT8U9dETyebXRyppLKvYGUPY881E4mJtBfSwsl0B0TtC4rdQAWJ7OYuxTsVk3Dy5v45SQojqe97WXSEidL46Se2TEDbhBFenlosOOvItZmGPVfpceheV3T4i1vFTC5PubsYJknLCtyEpK50b6y2ld5EaaOfj98isZpyf3dEmFURXj2kYgcZ-2a-IKQv0UlrdcdQe2697Da_YzraQXf2TaKGlJenI9TVwCdXmw3-G4_a8cprwBkLKVDsvKSmkcbEli0-NBqIXmjAMr7LrW5Iwe0h8h_lV9mU_D7RjX0eQSy1fRjzmBpK0iyl4TyC9TlsJMQ-COf-nj_0AMhGXMKv77wn3oIcGhhSH0LC910Qy0CRyQEuQiMtt4LL3T6_6VR4ZR6oc8J35Ze61rqVZhdZd4HZRJ0LzkFztfGdNgVQ1pLCTIHnxY7Dw0_wxav2S421719zA1lV_Wg1I-30ojPp-sgZXehdfda8KEREA0GE6fB3I-ns5Au9CgF7wN0Foz3INLtHyO_YkfQ=w966-h451-no" alt="服務理念的關鍵詞可通過三種方式進行組織"></p><h1 id="建立可重複使用的選舉頁面模板，提高資源管理效率！"><a href="#建立可重複使用的選舉頁面模板，提高資源管理效率！" class="headerlink" title="建立可重複使用的選舉頁面模板，提高資源管理效率！"></a>建立可重複使用的選舉頁面模板，提高資源管理效率！</h1><p>第21屆國會選舉專頁的關鍵改進點是<code>組件化</code>。由於每隔幾年會重複進行一次選舉，因此每次都會使用一些常用的模板，專為高效可重複用而設計。由於這些組件可以組合使用，因此在特殊情況下也可以處理它們。利用每次選舉的概念和品牌標識，無需花費大量資源即可構建每次選舉的功能頁面。 這些節省的資源可用於提高內容質量。 因此，我們希望進一步提高選舉服務的質量，並將其價值傳遞給用戶。</p><p><img src="https://lh3.googleusercontent.com/FjSEajlmRI0IjzQwBMUR5zooRMiUQSIqeVSHyfpDRm_tlIxF4FFHcdD82mC9fZ7hhx5jcaoHnIsCCxJu1u-UEe9rDV70CIpEOH8PtzM62LpXAhiMmslsYvqDbLEz2IiD2H4KfTfLExY9fLdqftebKN1r9nm1VwQboMQF_St1fU6a8aHQzZG6uzM3ePAj5mIgkrdMpuPhU_CRKJ9eoD8rxLknrDD2c2-_txIH1W8xqkw3yCgaODkLw3Uf1ze5lQl0YRGPpqeovQ_eIZH3NeKWaT5o4uRVzSJBpUjC09LGaBwzim4mDEQ6sycKKoI71HqQIc0dxu1BiHY2LjJ6V9AEEO9g-lWcAHepmgLkPgmegS2UFsioNF01Q9BXJrCWbe9LyHPfGXa3crhDuhELsUpuyEZlg5P5Wn4EifyZN0gPoeOYTflnt6KeTU7w3pAAsxnnW-C7t8EVPm-drr22U-5ptN77JKZ6nKwtV7PcyXf8qtET3eZ5b7sXe0OjBuhuWtBAxMHw-YX0RSGyXfFBnM_3PuIDQ-GZKoMA7rHy0ECCdiQlfq2I25mDVH2AlovaZ3sLIa3HJh29p17hB9Vgcx2llPdWupnb9u1YNR15QhYYcDgl2XgNwNBl-Q1fGrAhGdTHD4Uol2KJAk4a4V87kBruyErJLl4zu6cQIlFgHBzsuJkgIcW3tY6Gk2uy110nUK5kNuPBrHaf1gPMFsJZq31V6VltfKedXw6TueOzwpMw5qE7say5uEOdE6LO=w966-h566-no" alt="組件化模組"></p><p><img src="https://lh3.googleusercontent.com/BFhl4KF04dslmVH-2z-2ohDdBLBlp3Yj6sr4R69KI1HnZkWESXMlohSoGVTEcbigpRH4mvAl7lR5R1mry-Y_-ZovJlvwdq41L0RuJmuKUneM_fiL8OeX34g9h_L6Pgbsnjo4oBE7IJ6wER3twGc4kWIm8YwVFXKSsjli0jr9iYf-hyozLH9foW2yD5VknLSMxAoAmZjPMgyY-G4jGoZsiGb92DY1-L_Ii9Ac6xqJp-AV4cR6g3IZ8gQSJpmRDAOlwFWZHYgJoK2n5tX07fDLzFWGDvYzRUA8GH36T1XNGMhm99ucu1_xzqLntKOqTqMzbXbo8LhBlWXWqmG3OqZexAU-RdKP_6-vaozbX5mieWg2ETNTTAIoCe6OaoroHYF7iiTjgeBWVS0tmDBNprT_8dHJBXgS2Ld5dO4MSjYqq8a8N33kBNko-W29t8zHXzdYxuQt7wfeJYeVUBqqAsagJAepQwAn4TmFSYFUct0e8wstosD5j7d6PX3ryeMiB0_pD4oKRX9xh5bBY0wbm8XQtQYo-R6_kluiPb3yli2nbT9MKds64vGPamLkriBruWIG7WXpW4nhAg-8hkB5aWOoiWKUgYQRuBuuiBR7p38fM4FfFP6mZl5hk6iF51UV576YiLSnO_MnEA6fWIC8cwoKmBdsLsM3gboiwdLodtWYdpPvc2jaSfyB5gbGc75Rh1-BWcPBL5c5y_XWPfjsovBgCyzVE_JYn_gkkCrp-EC8_ZhBGSFzs0Nm139T=w966-h1129-no" alt="PC, Mobile 設計"></p><p><img src="https://lh3.googleusercontent.com/0IWJhj4Xfw7odRDnDDYdNqN3-E-VvvDkZnn5UgSfKc7DfSLpJ8e99EzdIyvhHHFXmGKzFL6zftXeZcjEs3T6W0I9lOyg2doZqaONhjjyf98KqTY8tRrPGbyn7xZ7ce7iD_EFaex1DaT44Yiw5sjCD-md3titMr6GA4vpTE-pyr5I6CAMobClLcSnFq2wsW7oKtFnsLEuXbSFmjFJbPN3ySRQYfnLjs5iQX6MvXdDS1HQZgd0qNp5ZrvXPSGuncDLfRXU3xwyb82qfBfyky-mSyx46daClqK7YJpHBaotCzMZzlSCtRlnY79IfYWup4TJvHDM6J9diOTV5v1Rsj8A6CnXIIF5_YRn4zRsT99E_vCs8pMjYQzVCCVLUH4Wj9ju3QvZ_BGdHn2Xh6nTSm9lyf0eJpqR9VvssGcuUPCpzS_Wb0-s-H36-cm45_HfesLcgbkfehNrBJjcvOEJ2MqAg-eJX2CI55PJSp_b2Bku1ejL_4IL9C_ISqmnevWZFmnP5Kv3EY4yG-ZFWaMoCadosg2G5xMNh1qCkH_Mi70tnRjgPlRDJfLs2FAyu180E890-hisWv-GUjd2ZFJJPShKCvIOi67W3jvlXqq3weoSrCMfOU2oIstr1O6Zpt1aL5xzhlvEDbJBdUsw3iCiku2NKf4TR0HtriREXAzOB-v5BvrPxmHgFdndUvsopj3qSsFpB4yaocWx04UklNZABo2wkrG6t7KUkPvIpLCt83pkQt91A4HMNiC7_gwC=w966-h548-no" alt="頭條新聞模板"></p><p>效率的判別是基於頭條新聞模板中的累積指標（我猜是點閱率），這些指標在構建頁面時原來由六個模板組成。去除效率低的模板，最後僅選擇了頻繁使用的三個模板。</p><h1 id="2020年大選品牌形象-“穩定”，“信任”和“改變”"><a href="#2020年大選品牌形象-“穩定”，“信任”和“改變”" class="headerlink" title="2020年大選品牌形象: “穩定”，“信任”和“改變”"></a>2020年大選品牌形象: “穩定”，“信任”和“改變”</h1><p>第21屆國民議會選舉的主要身份包括“穩定”，“信任”和“改變”的含義。上次選舉的特別頁面上用“圓圈”符號表示“穩定性”，用“靛藍”顏色表示“信任”。為了保持設計傳統，對它進行了保留，但是“更改”的含義是新添加上去的。</p><h2 id="色彩系統"><a href="#色彩系統" class="headerlink" title="色彩系統"></a>色彩系統</h2><p>選擇 primary color 的最重要標準不是讓人聯想到特定政黨的顏色，而是選擇靛藍的顏色，該顏色與九個政黨的顏色並不相似，但也被像徵真誠，謙遜，穩定和信任的顏色。靛藍被選為背景色，而具有人道主義，原始和中性象徵意義的紫色則被表示為漸變，並被選為“強調色”。</p><p><img src="https://lh3.googleusercontent.com/nUpf_i61hCuxXrilYf955BRrSBTp7N3teJWca78DaERi43YmtgmFA31_dCcQEcHo6aSISQ0U_qowcP_Oq_W9kI03kEd8eDvBRcFWuiLnrpKFEWpDt05FwjKG2X3_BllBkA8atbHn-YMQdn22qsMBimI25erdTozTLw5fganhmQWOBzZG-R2V37pgtX2Ebc00A2g2FB1e243dBcs0VKIWfnTjqa-Tmq1LZFEuPO3fsjdDkahORQuWQGOyie64MVATOO77_uEF8-DNpY60GvbwB1G-iqA52VZlLZ9xIXagk_-2y6AMbi0qLqD7VOjrz1b2tppimp-_o-t3VFxhbOh4EIPjOtLazYqLWSto4BY5p3gE-5avEfLcLwwlzat7s9Ql4QgZJ8L-qsShs34wxBrd9U9-hIq-289b8-QAiR92iu0APu4nW0YH4_mxtbiRGT-1HsfdmDZHzfX-mvfzukgOKx-0xkxi0m9SU0Ci3wPYdqkq96pjNx8RgQUGsR8ikx0cf_GDXzL48xefJ2Ftimt_OtF6UQPaqmalrqTZNbhJMzHpdPhnp09m6fsLtTkAzwEhQaALfKzPtqOThXqzGH1UcRZcJuECWEfTVUTT2QEAFJJAlAx2CWtkIkyT_A_-rlycvo4FbuFEuuDc3A0BSlp15o2ema8dj8v5SaYsj7YYbADd_4iMty4o0JbA9l3gYO4or9RtI7IQhxbcokm0U5tAC5d38RM3HuRRtQtw7AFRy_gP2zO4zrfZ13Ho=w966-h316-no" alt="色彩系統"></p><h2 id="品牌識別"><a href="#品牌識別" class="headerlink" title="品牌識別"></a>品牌識別</h2><p>品牌標識還使用 HG Codec 繼承了上一個選舉功能頁面的品牌元素。此字體是具有完整正方形結構的標題哥特式字體，並且在具有類比功能的同時，還以模塊化的形式表達了穩定性和現代感。這與2020年大選設計標識“穩定”，“信任”和“改變”的方向一致。</p><p><img src="https://lh3.googleusercontent.com/eWiy3envwtGn9XU5ZhsO3nRev3e8BBK_v0omWv5hgZIfuQtel-tx08L3V4JXPurF74S1zYJUIMFp7W9sXri0fTpvI7C_j-j-7886qYERhLEILNNr9GyecoDw_LQRZF8yo45m8u_m0D3qR4HEoyCQqHqfRCVwil7Ly7M6UKpLbTVkor4TJ_Qa1VX2UEoDltxzWwg82034QtN28-EHzziKdo0RSJhaRRphfhRskw7T6QBhztaoANY5INUWJOTbKKkOzQFbab4sGBjzycNptrPufQLWD8H3EFbZG1sQhB2kJ-vYdqfixgsD05MAHJIZrU0BpYRFVPnn7mKH1GThLKU34wSN61z5-jol-R5jHo91rmvlXfMkfSMtJ6hBXG-Xb4j703rBGqpH13EsU1B24uWu4j2VnUi6yW31ikjBAusGTgXcNyB44WCkwj28boY_6cBN_ddnhPyGc8WXi5H2DqsOzko0LJjW5f4zebRzEj3NDq00DJJksR6pNCAZxoVY1et5WNu7KKsbC_w8oE_IwtEa2lVSlHm-nBdetGvVRaZ_-3UXLLKoYoW4deXMJEOx746SCwkV1oJVu0F-_WDxtkmN-wfu9kSlCrumLZSA86nzarHOl9lq0Cq5GqMHHfnw3aGah2VfuqQMx6VtGAXlWP1L2OrbQP28sf0-c-u-5H7Y50-qD4ng7mzVPQPQq4ZCIsqHAlwTikkBOr-A00kWxcyqBU5e7DC85aPIL-ZgMWp6hfMHVb4RivSGITsv=w966-h316-no" alt="品牌識別"></p><h2 id="圖形系統"><a href="#圖形系統" class="headerlink" title="圖形系統"></a>圖形系統</h2><p>除了“穩定”和“信任”這兩個關鍵字之外，圖形系統還試圖強調新添加的“改變”的含義。圓圈的形狀意味著很多選民，並且以各種大小表示，以包含不同年齡的人。隨著選舉年齡的減少（18歲）和強調多樣性，中士的運動試圖動態地表達“交流”和“改變”的意願，並且人們強調了多元化，並且在當前的政治領域中人們對改變的渴望與日俱增。</p><p><img src="https://lh3.googleusercontent.com/lyhDNt83ya1rj7Qsuf2bsqFYWC4uh4UIEl_jCfNDOpTldDSIgw-WIGZ5HYhmd72e92corPNgs1mn_Pz9RiMdF5ZYC5GbXZ_NUAhPTGh_W298VsUtvkCybRYZGkzJEdgUdnDTsuTWHNx-5rHeyA_61DaAIR7Q9L4_U34UvLi2-KJC-NOcLznIYMVKgkxmued9npsP0Z4g-lpggcbvSF00QPNlpukELF-I4ARWnoD3Sv8fbrZZBZd2kXqLDmQCp9dB9m6-b9EUPDzuwgkmFkFi_0g5xmcX2CVrj9eR30AmwPm-dXBz9zU__SQL4eTQYOl6_3v-1oMSEzUpBgQ8lmcWquDubm2EYdD8EKEvA4Kj3bqngeeuXy-Uuuzcoz6R5daS-6AMEKWf8P5dMVpdmyMf59-1Iia9BP2rIiIy-Kqj5j0sGEQEggCYbLGCduK3xjOAqNClG4ayEWf6zLrgv6kyNA7NBmUlvPsQZ6B5Sg10cEzABVjza6OP65_VWv7MVCwNWrYBc03gHQBhv61WF6-gkr2avWG-RQ6sOF-R3Q15prkU1wvOf_kRsxNdXUWPj9QP6pdOOb93Eu8NiKymPxaF-NvRc8mVUFOG91Qefcpp4UASnC3OU6YqHmQhXEzBz83iM3iWeJ2O59WdTRSlCqx-QtSv2acL89hrtgIKzMi6vw87oJQFSDdugUEit1MTzxR5tKNPNXBJk0DC_eNXFhdSMwMb4WgiGHqzZl2fgJ4UsZtduy6oc7d321wx=w966-h316-no" alt="圖形系統 Dark"></p><p><img src="https://lh3.googleusercontent.com/BnmxrGvjgSnf1ZWZYvj7p2wb_-cu7oEEyxpRKO48SsEas1zSEpkQvY6ATeuXJ-M2AjEZlK5RjCdtOTmWEfCOoaUO_e6V72X0vTRMD5wtDFM9qXUMtmDO_bCVg4-8_QPCKiPUy5qVqQ2emBOJYjigOETK3h7SHknIxX7hxTFnUzs0NUcSR-RXM8DeXWIRUVwziPt5WI-ohZW1xDBlKKdQg228oUiW9M3S40x_oohNuBfKWnBbo3Q_mySCeay8c8EF17_cwEDG7eIU_CqIX47ffn7DdwxU8oxq8ztuDTXRo7SjjG7C0_8rXuaLKvt1xPW13YIFDaslC8IclOlmng4F7YS3fbtE_MnBmh-gbHnG5_3bZoA_9OaRkKG2ll331hjaE7MyNZVY9-0C1KpPb4FN0wCSZbeq24_cXv_J5M-5XnuDyJiMA-gydGJHcirN-rTlCoMgmLZc8ZSf6UbjkXhDnLsOG7yotbs3kzOP8SfqNS5f362dnglG5lVVUltiCzKJmmDIJZcxPhkvsJ2Pnwwo3e4JYl-uG7l0KYvlcSi-FNR0vKHT5ZRE3pH6kNziKU_dnJag7rk_73p8Ia2Jw0h2USU_dz5Vs7SWNmHNTh19YcrkDjaOxf8QAks03Fn439Rd38yDQOhAI-SFbBPFyeumKE7BuRZFygvZSojZnvkujj617saN-Y5EJAhIZ0kN0aaLyp3UIW48-aH2hNwEnA-HZdCK70MoKixJ5zDjCqN_H6tcm19Qa_qOxEPI=w966-h316-no" alt="圖形系統 Light"></p><h1 id="個性化推薦新聞和媒體新聞"><a href="#個性化推薦新聞和媒體新聞" class="headerlink" title="個性化推薦新聞和媒體新聞"></a>個性化推薦新聞和媒體新聞</h1><p>新聞頁面的組成大致可以分為兩類：“個性化推薦區域”和“媒體新聞區域”。</p><p>在“主要新聞”選項卡中，主要構成推薦內容，您可以使用“頭條新聞”（群集新聞）區域按特定問題分組和使用與選舉相關的新聞。“ AiRS推薦新聞”會自動分析用戶的興趣您可以使用推薦的個性化內容。由於此特殊頁面的服務概念側重於“個性化”，因此添加了“通用關鍵字新聞”區域，以通過根據本文提取關鍵字來為用戶提供完全個性化的內容。此外，還增加了一家新聞公司PiCK，該公司提供有關媒體直接選擇的選舉的主要文章。</p><p><img src="https://lh3.googleusercontent.com/j-9dPcTkSoS9YGlWq3VmG5L6CBZVg455wpdl1Qhu7-GVVESF9JnL-amFJlYyoQEH7OPgTsqjg7L5bkAakkEj_5BMBiM0oac1ocv2SjWqMUr4WQqwGsVo1xG4LOq6BYk2W-5Dlr-O7VWMFyihZno4dU0fZj5oCH38fe0tfJ9c1L5EospyNZ5vc7i7LKw9qAdGWMZgDuJL3OdI9Cw6wu5CMO9KVPnSY4Fa4taM1zOMy1M6gFgCJNykbT-3OkKSQu3KKtSZJA6fDN33YaO9fu3VA5EgLZ2XhoZ2sP2QssLsmO4lWq8lhC5PKe5xwzmM2WU13CI5rxKlVkDIEQ0qq-eGGJjFdb5UmJukI4dz4k-F7rqL9M6X-fNJ_OAQbmocM4s5ZRwCc5uVV9I25iAdgqEll5aINQ3oKum_6CiMxaC2xE6z82XG6ehCgYhM3s3f9MyDAy5TSLbHsOoNo-Sj7-PH-HpO1IoNoBWibSERkBOsZgytHZnjpX5R7zFBwENwEqGJAXSqpNNVZtEZjqDJrnxnjneWbQUX-4ZPwNiPZOihsL0IWwiPhUp3ewgm1MVxr9-n3gFmHZHSw4FCbXolQM7saEWkqpvzdHlJRYQuOruDvW4N_vu7IW6gOAH5iADFlrt0hIDltAgCgWAvOxxEvmKPRDHn7yzQsJk45LKjvb_I47aCf5Kd_sVhSLQHFoLfKVfvB3K5e8TgTUlSIPso9rcef1KL7bSsejEJ28e4qFL7XGRwsMDZzO_hXqtK=w472-h1280-no" alt="個性化推薦新聞"></p><p><img src="https://lh3.googleusercontent.com/KbjcqbXWk93P8ZQkCFORgI9pHgerFLXQbfHzuL0qUsi72s1cYHSe2HQj-L59TzRLAex9Mj1eAxltkXwWQZYq4aQtRKw2vhaUvrrKXDrsNCA5ZghHv05oqDCopTkA9lm6tTVSXTm2DsSqqNuUGJ3JKl67BJk9hQ5N9hGm7mY8VTMXvUn7rthrUy4kcoEephzxkvatV-hf14WxxOg5BaaedV7VLp0fvbksKVcxAHnAu39vVl7y4DTwAt5W8F-6uCA1qQQzZ-qY-BKczCKC2mreCpCcPC7ksMpLp2r-rRy6eWJTY6hueZl9xrACAedeWl-9kvJA6MkeP0mHDdYnOiRc0e2OufKy-phRiUwtsT80ltT4AtZq1b9egla6kAAwFGsbAbtAGHGBibWHI6S0ow-pA7v8Ld5iOVYbdgzYQB7PpTm_7I2a-JjeCl0VhR_-w4ae3mJUkc30OyXyS83Tzu7RmS7YPPpAIbcyHo0-RyeUHZNWb60HCN_bOBWbdBvnpmYtAafXi4Ril3Reuv5pvMsxDWYt9jGutyiTbBSWo1xh_V0XEbTnPcTe9Lr5vaUD1mEozw_xYaU_ryWq8jqJCVvQB2O-WkwW5KjojVBgH6K1tKio6qYuTqAmjbA3A-bypdBy5bb4BNs6RnNejP_LJJnD9hPvtww_AvgywodUqorbJ_QiLeApyLTkRz62lz6dVHfXobevbCz4FUB6Tn7pZxtVkHHMGUztC-pdiIeS6YT84XFiJrxcKfb18xz9=w966-h744-no" alt="媒體新聞"></p><h1 id="由各媒體發行，民意調查結果集中在一個地方！"><a href="#由各媒體發行，民意調查結果集中在一個地方！" class="headerlink" title="由各媒體發行，民意調查結果集中在一個地方！"></a>由各媒體發行，民意調查結果集中在一個地方！</h1><p>自2020年大選以來，Naver 提出了一種在圖表中顯示和處理意見統計的方法。目的是“使用者和媒體之間的交流更加直接。”與民意調查相關的文章，例如由媒體直接編輯和提供的政黨批准率和候選人批准率，可以在“人口調查頁面”的一個地方收集。</p><p><img src="https://lh3.googleusercontent.com/G-Zv5PZYMCHG3PM0qyLs8Ll6z3wA1k1vG-p1Kv7g1mqakFqnPjcQ7cwYkOOc9yM50bprbrnXC67Cj-IeP_L_rAdRbw5UzXN3ogZpwQFGq46Y_eyUUxJ5M_wsEN5OyipM9Pv9ru9QIoAUTJJvFoZFHEcxAJg7ZjDe25RURF_8yVUD-NGVBkh13rOUwUbox4bC3B5YI5jeXDcBpcVaqX3DkgYjttNlRUdnrNdQMHVihLKB8Jcfeh6tWarB-p9diA_DGwIIuU1TlPRFbIi8LkraMbDxKwey1otEtPRxJwIffbjeEO_8PfmS_kiqQCZ64TLgMWBGH4a1WmHWNwXJYVDGGCQl62crcd5Ofd2XC_YPDVKw_y0JNSi_3J-WflpnBR08XZXjqWToJ-FwXqyYsDVbkPp30gJg1uU8MV_bW3FSFaynwbPE83CuLgrQh0OJ70VYDmT_oRMlzbew9geWh8Lpc-Ni7Icq_HEt-XUcWgJdIjtqtmIHKVIxi_5_BLvov833Nkck2LMwBwu6sKLAzToZvwVyl2mWlu1k7L2wrR8F_0zwLogp3O8QOl3Fay5-VUKSZ7BokJdKUEDWKwDfS_rWH_hRTGK0nyBFgwQuDxDVgMT55PFEBrCJxsFtOnBbi0quDv874EHSO9VWCQPXmgmTPoK9F__WZuCePF-JZYsQtWKZEQ9brhx-HsYXpg2GYKDkP7SDUYfUMVXuJOuj6QfeQbWmSCTsXc_p_mojrHKonC0bVLCSWBU1qEaZ=w966-h1066-no" alt="民意調查結果集中在一個地方"></p><h1 id="通過可視化選舉數據，有效溝通！"><a href="#通過可視化選舉數據，有效溝通！" class="headerlink" title="通過可視化選舉數據，有效溝通！"></a>通過可視化選舉數據，有效溝通！</h1><p>“過去區域選舉的投票率是多少？”，“哪個區域的投票率最高？” 選舉統計信息和有關選舉的有趣信息以圖表的形式提供。選舉頁面的信息圖用上述的色彩系統，清楚地分類和傳達信息，並在插圖中積極使用這些顏色。</p><p><img src="https://lh3.googleusercontent.com/D2Mcxo5J5hmivUmwxqBmm6h9TeX5E6E9HDM1AC1pqm7SKez47EaINAuI1NttePLU7XCxtCTCaDwTcuCFLDcXUGcLJdebGS-TQdrLbmhosCQ_aINNEy_YvCmpyZnEZSx9WUn9gbbI7r59NPhEkKuTUkpXdxqn0W3ZOAjAYaZf8hypdWouZ_ZBA2-N1o4JEceNMZHtNrE_Cp7hZDbUOgc-w8qe2b46yTckY6thigoToND5-BwshFD9tDetPKTi_xsj4TkbuS_SXy38wKsGgEElgrEmkTIq1Ou9IUHaf7GT67QmcGTYPFKkQXHsWv9ebY4E_Cy2EETn5L5qZvGVz3pbH4_vMz42WGjkR6uq24vwyOglumQSqdH34cteMmgRpkETFGeQLaNSWVwy0zDjxYDki08PsTzEjayZCnLlr3GXHdt3560fXkm6N7DpTMANKlJy_A0DjXxzyqaNI9OTxEUFPczXdP2XZ14Aq7wPSH3sEF5xsUTVmh7DTqvDQuvkgBTL42tBliEVQRCrA3FMJupdKoBDA3DOMFhMcprs_pjc4ONruLfG5UBD_nRqKJ68ESjnTglwVNnUYjX9TnJ_pjWQEiAbtVso3SoAZAntrLJrh1anX0b6ZnXVfVv3nX9HByrz0XwFp-yHyn_uo_fe_1reHquPGSZAkyjEH_dFe6no-ISR1XKOJLl2BVnnsNc9U02yJ-IWLng0DEom4mcFUVFksidmww4A6g4VaNwUgNxeU7eUYY8e8vKQaIjC=w966-h1066-no" alt="可視化選舉數據"></p><p><img src="https://lh3.googleusercontent.com/pEL562dFJAJyM-Yw4VHp0_k6jtu9bxDNw8-4sP-vC2JvuK6knMSf15Guo3Azo_QBfmqCpQ_W75rnWcqcZnpOa3vOC8c6QUK8DRkOHKiK74ft8wi17mgUySLDaLBjOwMLmo6O8P8_6AjDikg7o7O834pkk3ft-5_YisDSG9xP36b8WAhlSSa3z8FrHhU4zpQYNobH68WiOBmnQRWx0GffW3N9nn7reT33ECbqhNTn8_kjJdH6qyRCVNQkeigJoEcoI7n8Jh0mQVmNwagcYRbr6IUBJCpKFChWfT6tH2nRfBneiPqk7dMQrUMkGNjtfgC9rghVaYEAkMhwwdPM-L_Te24cp7nRdQzDDTPkv0zweLybfE7pIkXvfBgK9CNx7ZOH14mKedG6ICQb4JUeLt7za741UcwcdVygNnLzjaNqpKv7ZPaEt9NdJa7JuPwX9Bl7buxqrAnQ-HRzXNFuEUS_cm7BysU_1PRd-KqvPdgBMzpJBRVPi4zc4eWeQmfCHedLi8hTF3HcrITVYwGPGWddBtJsIu2n26ADuo42wPPqrdp_Vw08HFa2BJmH0ZPHSVxeUofpIxUoy4jwSnNZzwSrgLRlyeMOhYxnx2nBBRmNw43dV5ypphkd-5EXEEIFImMES4t68AdtbEuBpKdJ0yEvux6SOp2OmyaT9f3juCF6eym3Q_EB8ESdeUrk-v30iYIbOTzMwRE_J_LEre3d5E_HS0YdMuom_-el0Y-2CYnOmIeaI-_0X6hCoyLK=w966-h316-no" alt="數據色票"></p><p><img src="https://lh3.googleusercontent.com/y7kgnDGceI-stEN5mqX6eSpT16h2An675kVne2nliakhZhOjujMvoLSezmRmr9w-1nyr-miTrg6r6_dmiMhZvkceJJr7Hmjbykm0ef4LyNS9ukq4IXnmcHd7X0EM3Zm610JbQtnrisqpmaxfPQyP4llK-sF74m2WVCEfYZVr7ylU7cqYpxPTOtXIsSzGv7uCObvUirn-wPSruojg2mqXct9ouC5-XpI8WxGcJKmZJIbC2dxlPd2x5Vcl6fd7GasJle-9w0uOV93psbOX2yGRv93CQUFM5gLTuip87ZzINR6cf2x4Ze1e_A3KpT0SKYxCAtdxSYWyQZaWlO-IEitXs1uv9BG-Q7kHfYmAxoyfrNSJl-mHRk4eXHN9YJ2LHT0xIeWiirqPq9kVUHb9KW2yfQnHgzVd5Oiz_HNWFaSQd0DBs0XM4PNbyqYEYD9hWr_Zlk5jNSCU-UzLX9kNw4zNZdRJM8bk5Zi1uelU0pcfvgm5qgqmjkLKSZce-UmVua9q8MyOhVQNxkNDeg4CzVR3flS33fu_XyDIxMeOvG9AmDzS7owY97940mtocEVUMzpghG4fbhYaFZbMpvIwmVfN6eSqXNsOykYPyulIdQMjbgqwcmok94jk74TFvURFXSMVIR9y3C2pY9MHhnd4kO5PP-Sa_tsPWlUvJfsStT91F0QfTfsp7HJUDs8EIiH_izHJGsNiRUw1RFqxYS8PhIqRF1nbqcyf8jM_rbRAzk_4lEmS6HQoYBacOj9f=w966-h521-no" alt="插圖中積極使用這些顏色"></p><blockquote><p>心得：選這篇來閱讀主要的原因是裡面有許多視覺圖表的部分，他把圖表的總結寫在上方讓人很清楚地理解狀況，我覺得這點很值得學習，或許在系統 dashboard overview 的統計圖表部分可以採取類似的設計，讓使用者更能快速的掌握目標訊息。文字型的描述則能搭配同色系的插圖，讓內容更豐富，這點也令我想多多嘗試。</p></blockquote><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://blog.naver.com/nvr_design/221868269402" target="_blank" rel="noopener">제21대 국회의원선거 특집페이지 1차 오픈</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;繼上次分享 Naver study case 訂餐 APP 後感覺意猶未盡，剛好看到一個是關於第21屆國民議會選舉特別頁面的設計，覺得很有興趣，我們就來一起看看吧～&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Naver" scheme="http://annilla.github.io/categories/UXUI/Naver/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Naver" scheme="http://annilla.github.io/tags/Naver/"/>
    
  </entry>
  
  <entry>
    <title>Naver Study Case - Table Order APP</title>
    <link href="http://annilla.github.io/2020/04/19/UXUI/Naver-Study-Case-Table-Order-APP/"/>
    <id>http://annilla.github.io/2020/04/19/UXUI/Naver-Study-Case-Table-Order-APP/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Naver 是韓國最大網際網路服務公司，台灣人比較熟悉的 Line 通訊軟體就是他旗下經營的子公司。最近發現 Naver 有一個設計部落格，裡面內容介紹各種旗下軟體的 UIUX，所以就挖了一篇出來多學習看看。</p><a id="more"></a><p>我找了一個有介紹後台的點餐 APP（後面簡稱 Table Order），畢竟目前主要工作還是對 B2B 的設計。</p><p><img src="https://lh3.googleusercontent.com/XG4gRzRuptmRaM_rWmwXSEzGo4CnHvGwjhxUPw8eg4rhoNaIgtpuh023h8KwE7lNtr0XvAFO4YVYgzBsoCkkw9ABtIaUFOcwTXj7lZIl1x5pUWXVH5CwOzPmv6xgsSZwQt1Pm55doNVDCvohThqOlznJwD1wpKGTYwKyT261OzZx6ybJ9FFcEL7NAhLcgcIjGR0wxFXaSL4K7Soyw4Iib1Oac015362LTVCHCWX-pxtv_Ar6B2LjsDvGvj-Z8rUGlB6xMQlvkzPowcVcPYjUm59o1JBjQkoIqkpH1sLeOEafSOrPipFN2xshdAKJ5pAHxVZvhw74TxzIiRVhO5E5WAuOUsdveb_wZb0uKDH9g8EdxGjQnbQxfV-3OfCLT9ObaJB82uxnpsuVVhC39PUsFDDL45PjoE-B0viLww17EP0DidMAXXHtFlIUtfUCqyQfBdkH2KBWisiAHo8KNeJq3LbU3bBCa5cMGwHxKRWfA1sdc-shLPooaOQ2f10nd_o_mUQrMlWD85gZhS_cjPJWQbRas5_iIqIe1QPKCN2I7fnClmV_TLm20reuI5En9G2nklXe2nj-xjGhoudeaAgXv7HIesR5uAx2lzgpP6IIJlrdzlPiWIJAV5UywMf2sMwB3QPXI5ozHyVDX0NzYV-8fcyDByk1TiHszfP6ikR_iGtp55FmPYcF7iXJM-HkWmRuczwRa2JVR8mkTC-7GhX075ejOMVY5WSA8COAMqCkhd27t3x3-MQfe1w=w966-h952-no" alt="Table Order APP"></p><iframe src="https://tv.naver.com/embed/9822927?autoPlay=true" frameborder="no" scrolling="no" marginwidth="0" marginheight="0" width="740" height="416" allow="autoplay" allowfullscreen></iframe><h1 id="拍攝-QRcode-gt-建立訂單-gt-付款"><a href="#拍攝-QRcode-gt-建立訂單-gt-付款" class="headerlink" title="拍攝 QRcode &gt; 建立訂單 &gt; 付款"></a>拍攝 QRcode &gt; 建立訂單 &gt; 付款</h1><p>Table Order 服務是一種智能訂購服務，可讓使用者點餐並通過商店中的QR碼完成付款。以下是用戶和老闆在過去幾個月進行的 Beta 測試中留下的部分評論。</p><blockquote><p>用戶：“可以不用等店員來點菜，食物就出來了！”</p><p>老闆：“我不喜歡點菜或服務，但我可以專心做飯。”</p></blockquote><p><img src="https://lh3.googleusercontent.com/3NC-L_SEbMTSRi6xUVcJ8pDfjJYWJGyD7rcoHsPWxPIU-hzd-oQ4Z85GdA1DwboM92eyz2x_yQO3DbOF9mC2THs3ntjo_5FIrUYU5s8BF-zaxCbW92e4S4284Y4KTJHFqNrGVioS373QtXTMxjGmxIcxHb9wlq_k8MqSXZ6YMy5xDlsggls1TaISTCCS9qRFM6auxEV2Po8BVP9aD8vKOyTZsL1L1EBkpMM7vdMXLGmRV7fZbRDF7S4OQgFKxXsvggTdqTdnA-LLQEdmVFCl7ELVyWSbOXwo2b8tLv62HHVfcjluzrJSF44Gczq1n0Yt4rosWJLrFx397nAbjNjm5zzLGVWkXU54WpEo5-GlvWGAWoA3tnrRqB_O7BtkPJ8w-7nsL02-5y5l6YHK65LzmsWs_hO0j24CAXWqSLibbMOSRpRD8V4x3P64igatKVeiT30wxjJOWBiMYw224NqO9ig_xptpi_tz_7BUuzRO2dfDNfTSrVWfzhqWaSeQmAQrmzxl3aoeArhQEoi09fbeVzfjcYembDJhuKcfU-ewalWQwG42asweXzhHIc4NCTxxpqaEP0cccCgF7jfRVuxy6gdflEIDYfF9B2ZOF-1giXFBaOICgsJfLHzxhzOS7ho5d1hQw7PgYOevl1SRZ0MK-OFm67JQwRzlAECWUmfM4EV-4-1Ms5acOOTNMOhVuy8U5HBUkklEsBRtGcJgyBP5l0VMZjnuqdd5OZdmTshQjTxWvfugi_rV1ZI6=w966-h329-no" alt="點餐流程"></p><h1 id="線上菜單的優勢是紙張菜單無法做到的"><a href="#線上菜單的優勢是紙張菜單無法做到的" class="headerlink" title="線上菜單的優勢是紙張菜單無法做到的"></a>線上菜單的優勢是紙張菜單無法做到的</h1><p>你是不是覺得去餐廳看菜單是一種無趣而令人擔憂的體驗嗎？ Table Order 的菜單易於選擇，因為它顯示了新菜單，老闆推薦的菜單以及在屏幕上已訂購的菜單。 從老闆的角度來看，這是一個很好的參考，因為使用者可以一目了然地看到訂單數據，例如哪個菜單受歡迎。此外，即使有一個菜單因價格波動要改變，也不用重新印紙本菜單或用黑筆劃掉，線上菜單可高度自營編輯也是一大優勢。</p><blockquote><p>中餐廳與意大利餐廳，菜單導航方式是否相同？</p></blockquote><p>回顧系統在餐廳點餐時的經歷，系統可以看到每種菜單的提供方式都大不相同。在某些商店中，菜單說明很重要，照片很重要，某些商店則可以快速瀏覽整個菜單。因此，用戶將有權力選擇要怎麼瀏覽這些商店的菜單導航體驗。</p><p>Table Order 的菜單順序設計，以能均勻儲存各商店的菜單信息為考量。另外，未來將以各種觀看方法（例如圖像的類型或描述的類型）添加客制的菜單，進一步考慮模板設計。</p><p><img src="https://lh3.googleusercontent.com/-fsfcXAcyh5ddOQfHj867nTtdyOyNtVWOEr2lL-7JN7yyOyknGGQn-GWbCodQtVVTxXBfnBcI1qZCxwv86o0bZgWWsSuTuH5HyQlOdQ7Ec4IhaQqRVlSlToYXjrar8HlxSvTSg0zyWRD8eEBIzmZNB9QKTaX_sEG9DRC0j651W2EAVDQGIj7qwsvQjKc2zn3fVv30O0_0f-ND0Q7jWmbrUDhMsP7LdX1wC1YRXvs2nnmVX2rg2N0uqsoxXW9Jn_201XH7Z9JQh7nZS3rRpYi4M1eRP21KfZvs1n-7tkTThPYkvdMteak7eyOreqykBayRzMpu9Z0YUmj24q6dDZopbOLj8qye4HmQmvp8259nZrgdwR4MuW_Xf_ORVJo7cO0_lIQIqaZx4allA55TrTSpJ_vaq1sFpbPvlBi5IMhiCHy94RritJxZQrTwYyqECjDra9MXfboTd-nPnaOU0as2kLcDUB5myUtGne1aE4mV6DaSp-F06UjznHO-DR_a19SAxoY31BoRC16FE4iiSo0pcCcCsAREshaw5E8w0J7_MNQDg2OUQHxqr5fa8ULb-Fs3Gk28NfDdbMtv4gbQT74lm9IJqtKb56mpNl72rrvFm_UfZt2eWCj0mYXyCjtfyJDxo6XJznW9HNl2d8CPcje975Quzx-TbEo8ft5TK3Z7uTyHZ0fFb__hPkcr0nYYmA2hWm8DB20Xr2UjxEKZLtZU8MXbww9H7iND6vz2rLZtoPL05-VJvG3uDvk=w656-h1280-no" alt="菜單導航"></p><h1 id="別人覺得這個菜單如何？"><a href="#別人覺得這個菜單如何？" class="headerlink" title="別人覺得這個菜單如何？"></a>別人覺得這個菜單如何？</h1><p>選擇餐館或咖啡館時最重要的事情之一就是評論。商店的評論是非常有用的信息，可通過他人的意見提供客觀信息。Table Order 提供了在菜單的基礎上查看用戶照片，評分，評論等的功能，而不是全面的商店體驗，因此使用者可以更詳細地查看評論 。同樣，可以通過自然滾動瀏覽評論照片，就像使用社群軟體瀏覽貼文一樣。</p><p>為了使這些審閱平台提供更多信息和更高質量，來自多個用戶的良好審閱至關重要。系統正在設計一種審查方法，該方法可以包含諸如食物量，味道和辣味等詳細信息，以便於編寫關鍵內容。</p><p><img src="https://lh3.googleusercontent.com/RKkqBEUWuVEVRWY7hUu1_i2WseuXlZeB643XDYhpkCDlQf-8xjtKyrEnkVZsGLOuBifUiYB1RM_RtgbnhRCI3VoaJBok41Og4PHT5jvanbhq_vEwIpZqMPNEEn6TdQOKBAPSg1OQDkXfQ4fhCpjEyNJwKjKO68yK88TVD1X827u52WNokHp7FYYlq8ZXdRZRJZXcK7cWyfhrYVJ6DzO8ZDwfspS6iOgtgD7lrZDyXNtIEYmcF9-G381XYq22podPK9Gyh-jxmStYFA20IwUCGHeC8rrlqZoUIyBfxGWBxlqjOmOutg3oW2O6DchlMcVhR6QoyuDDWWqvSde_z9AD-01v2fJbfD7RcwtUTZNq-mIPCiBqpz7mgrxhoOT7aU1I-t0RouHrcLcaU59kqRyV3X_YXEt3RbUKV523Z4QBnIc-xwW85_rq3mcmLQbpV-JA5lI20rd5lwVon8fIwBZyI5gNxhARDeoJyeArfnKqhgdKYG_CEox0kS2iv2SF6CtQ3C_HsYssMvmmmTsACvAbC_1Xrtdx3PKQ3OLN92j0eJPoXGKVAd_yrfTZsH6j9UE-bFfhKQpl5xVX21jO_6TYT0xjeGia_9pog1ZMqyrc4cjZECV8vjS7xwTdG-zvwG8LLBJlCBz12ccuZCiWPzFYByhNbaxTbYXFSZGl8yB1Jjs090psFaiX-U7AZnzO_g3oyIKlVXDa_V7ocSg9o2vVuVhoyc2QFoFgH5tk59mLrJbVDNS5skswGws=w966-h1174-no" alt="菜單評論"></p><h1 id="我的訂單進度，一目了然"><a href="#我的訂單進度，一目了然" class="headerlink" title="我的訂單進度，一目了然"></a>我的訂單進度，一目了然</h1><p>了解我的訂單進度以及何時下達包裹訂單也很重要。Table Order 上的訂單會提供狀態的通知，例如準備/烹飪/服務已完成以及帶有步驟的事故單，以便可以快速共享狀態。</p><p>另一方面，使用者可以隨時發出有關訂單狀態的回覆，但是什麼時候是寫回覆的最佳時間呢？如果太晚了，我記不清了，或者太快了，可能是在我吃完飯之前。根據 Naver 過往資料統計和 beta 測試中累積的統計信息，會依據每個公司的情況和特徵，對 Table Order 進行分類和應用，目前仍在測試最合適的模型。</p><p><img src="https://lh3.googleusercontent.com/BMQIcFt9651Rrd-9lzZn7tO9hNQNp6Do-RtyVlIBzHmcgNB3eELlccCeYEGVomRplhdME13vMPVeLezOZ-e3Nock63Rp65FqV_wbFEZ11qBRTgygORafgyNqRImMDIzQKVVuQjGhPtyj-BOiRA6nca6Ts2lwusweIo2DX6R6IxNcu3BDR0qKGZGnsnsmjwuF2bzWrduYmErABF4WfUYQYMxACZZuoyoDrhsbS3qYPrK3OrftJMLWRAVcpT1hQerhIy3RArBddk3U4ewufgVjcsI84eo6qkW7v7ooXueTaZ3YU-iFAhSAV9rLzuPDDcBbZjuxEfZCdbUneLd0w6R9ci-wf8r10jB-SMKD2qzhiP5KrltnmdH-cVg0IuqAvRDFFuRIRN_FI_WHRTtRVITqKDLbnkNdRAv8_kjn9O5igNZyoNwkdgvKQOudAmAoxWxePXK1QNpMK9slBPKcZKVaejVDeS5-qvF2WMIotc0bg61hPLOUHS1Z_0XQ57zXneKn2dcGpaba-9STslBY7Q8KDD9urUlzj8ORaBQLO-WRDh71WFrWb0rVQNMhPTuSI0KtNkgaKMT5htaxCsagFN1MPdUBIGp9rx4G88XKfzRnW7f1TnMCTDbOmtzOOLygc1j-2yXvOMIuD5_dRRdvhjZEDXJnfj57cJ0ve7Xv7ZktPq8fNnnIgqCfNCVbtXsg9iv9K-2jws63ER1iU4clVrakABfsPkquulMgZbSyE_NO81Y2m6o_JGeraypw=w966-h1269-no" alt="我的訂單"></p><h1 id="成為常客的捷徑，老闆提供的優惠券"><a href="#成為常客的捷徑，老闆提供的優惠券" class="headerlink" title="成為常客的捷徑，老闆提供的優惠券"></a>成為常客的捷徑，老闆提供的優惠券</h1><p>除了立即累積的 NaverPay Point 優惠外，系統還帶來了一些概念，例如使用者在外面看到的集點卷。家裡只有一張集點卷忘了帶出門嗎？如果使用者使用的是可自行集點的 Table Order，則不必擔心，當使用者獲得獎勵時會收到通知。另外，為每個商店收集優惠券和集點並立即查看它們很方便。將來會添加各種優惠券類型，因此請使用它們。</p><p><img src="https://lh3.googleusercontent.com/WSFepfEVuaKAvWJWR2X8vYZlrAILBL_ajqmSXpGklqfOQfiCiuHDX5t25oQw_ZY_gLnUfw7UbcwCneimk6SRU1m6XrdPKL0TyVk-SjcI3KHStRrEpKxparf_FaKAnLe3IgWaR9KyZPpYjwdMSEuuA_NiekgXZfi1sP6VSF7mjFKEKIVlw90VI_yXE0kiZ6QtRBSZkCfvcSOuH9_QQc2q7c6-q4xyZKPVM3le_A66kTv9MFKzyY5NbedDCCDUZdPKbmbQ9picATJgDst7c_b63G0i5f2Hmq4o268szVf51tg5kTAQZ-_nZX9llNJO3l1BbfVj-BTQFk6Uf-TCulcaWjqgUouPbmY3CL9R6KAd1r42MRUL5MEdHqrkSUbar5YazxQkJUcWvzk9DYcaorY5p5SGsZE3WfM2fzvaILKwZ5EOebDEJfvvwfa6-YZ6wzo7yk4ZTVLzxPc9Ds2d07ia09FBekCAP7Ax5dY_EofRMVtkplKNC5ddQsbBb3oOqXo15esKTwyXd6zfJuA_2G3K7dVx-_dG5oWyfGmL-psy4Ro5JApTiCeJfYtJsnNoc9wzxNGgRiMnqZGfxkXWrJRXQziJK2fUzCrGj9jLuiv09AbHaBfp0ByPsdXGlZi3KGjz52KmmtLioTwEjA1MBzBm9PU2rJwoI8nByJQY_-CAMN5gjTNQgGSyUO7Cknk80rglswbMVi5WzxTf__b4EEj_WOtqTvs26w-ljd8wpMY7d9kpWGmZfIxlpmk=w966-h1146-no" alt="集點 &amp; 優惠券"></p><h1 id="智能商店管理"><a href="#智能商店管理" class="headerlink" title="智能商店管理"></a>智能商店管理</h1><p>系統還透過合作夥伴後台創建了 Table Order 管理工具，以便老闆可以輕鬆地創建和操作上述各種功能。老闆可以通過設置“使用者操作時間”連接“菜單”來建立午餐、晚餐、工作日和周末等不同的菜單。</p><p>在工作時間內，老闆可以根據桌數或擁擠情況，選擇地操作餐桌座位兩種類型的 Card 視圖和 Table 視圖。通過此操作，老闆可以立即檢查商店的狀態，因此不必走到大廳，老闆可以專注於烹飪和操作。</p><p><img src="https://lh3.googleusercontent.com/HOZkhxmM_T3rUOzmXb8NUBYRIqPEcH9oQe9ReHKeGIwZlUZ1MDa1yKKo-balld5tBADi0YYh4D-LevCXRIJl79I0DNEYjHeQAgPHvqs9HlwPfAQAUKdQcTVNArHsIUWM5xOVbc_8cb6trQGSTdd-H_e_yd8quPuUOLZ9mIxCG4HHL6SndTEJjjTc3E7zy_uJKnkN87EsTjNMi2u5K4vGjK03TKxVlGBStLSfkghwN0DnhqAPoSNmdBjasfWAJSigYsH4_p8mMn1pnIBTk-Q_R6sesoybsBhj2eXdYmRFi-eQtdZipOpq2n2s25mQHolf5hZ9D_9paAe1sg-vv82MvOtrghERbUVhtuLh1SMWmyqR2JIVdqIy9lIUYBTRCMmR8wejvm-6P6VAHJxMqWYEzGHgtyaqCVG_txrWTseRg4ekf2HIIjdm46zwBOyA2fXHZAKm0V4ICG_fKnZuSRcR8OGpQ7P2E-o4SQz__4AyEQUFirpC5WGN4z4EFDChb5p4fdqdH5YV3keQd3eUe9Y0JrjvAllaGpUUcpNr9Odr4D8wecrmxHjvXm_ukM77330a_hJpSo-iWvrD9FoGqGNHMn_pFNevW7yuhb6b7FndHUa3u4FW2kuCK3LZAoLn0x8t2029mrfXjrsxUcaysbeQ0yAR-KltuGi9YWt-iEPil46xQCYySYODDniWKmb31hG5zwrNdod347Xq7rCKEoPsEfqdDOSR4CoYVFeCam6dKrOT-jNw8tZv-6jd=w622-h1280-no" alt="智能商店管理"></p><h1 id="線下品牌設計"><a href="#線下品牌設計" class="headerlink" title="線下品牌設計"></a>線下品牌設計</h1><p>提供老闆各式線下品牌宣傳設計，包含海報、名片、立牌等等。</p><p><img src="https://lh3.googleusercontent.com/FUSeSIVW_9rF-gzfpopRZrPcDgTWXA0yHE_0PuYwFijro10tkOgTx7H3dmfBqrvwA9oJebI8Ucho14c82n4d5-PCDsfzjUrvqBazJfv6fr-kZby0PaM2RlO_lzuuSvWkHaLQ6QtYwe9AS75YRQaSOBhoc-AAID7jzErDqCW4E0AO7DS6ysArYbhbYiOWNpP5McBwvTUw6SkBxupnszYhdL-B6_xLd-vYq98JLibrg2fJQEuMPp7uvUTHhthcJGo05hKurmN9hLqnZh1os1wTWLAS9kS0ngycLm0iEQ6p2MYXDaw7vfKCGpVa6Jd9oPp_7kGBmBDK8IXqZYKLXFdoUbIQOoXU1uCjzOF3hDEwJ6dzXKyUN2CP1AtPFlFZ4T3i2A3x6M_xNU0eVgyNQrJ3TCkI5JdHnOTeRZzhBDaEVk-Mxy6VcCo0o9EnROIHQYJSwHQOB0ds5Z2ERIRXUh9X4UMFrkTsMMbByaOubRlGTsR21kIDjNrfewHp9HS9JJUtfZICZX2vhy79h5-1g6YrFS5O3avUnm3NGN7Fe-OHyIgEhc29A5BCFYvu6Lp-3-RKKDmkejuZTQtrHahutPIoM2woVSUfU9ASJa6-CjIECU2BJ2du6H_gBSNyOZyqw6OXkngbsCrXRUrwST1ZF_46JK1LK0BLMmGOYoyDqfkPzEdU6m0JLcQdegZYLNMGYCT2gXmRpVvQOBkpZxeqfZeoYhPcf8tsAkO4zuDF1jfwBp0b02M83XSdudM=w966-h841-no" alt="線下品牌設計"></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>下圖為使用者 &amp; 老闆在 Table Order 中得到的優勢圖。</p><p><img src="https://lh3.googleusercontent.com/dYB97w9E6EjZQmRoxE8LOGOqjM9C2KTOR73CeQt1C_8aj7TaQnMeqAUqnrOAAjiNDGyapNhM9cyjI4Ru7-AopcO10DLh_gSG87u1XDQrX7hbUd98iuuKqOabhWbAqNop1pd0QswoREPurXvzk3aDn4vbBW7Ko--xPATdisNbkVW9VccA41cGAoPRKoDKjXNu275F32w5zV71qtIF81FcsQNnW-di0CyL9GSxbVnUHXjfV65vujoPgKIobvcy8vsf9hZbrVzf0RoUQv6-zyeD93poFiSO7VmDxMsxLisAbXfDz175gxzn3AdPr9A8UAd7-xaZNiszrKtXv-G-E405SRUIxeoyRze4mULQmYdDauIadxU7CgUlKRbSR0GDNCVBlkxBWVaB0s4j6VZuDj5rRRezK3rRXnmZXhzH41K9aG7T6OhWtrh0QPoDwSTxvroD-v1ayI0IcRSQ1AG9oDst6uNGZNxlTFw_lEK3etpjbqDUVplxt-Ct10jgoAgMfFMI8MoMi8KhYCbtzHsqcLZMsdzp9c18g0_85fY72Sux9y5NLFmL6bws6BjFtAovPw2paxaWGivTdnnVffjLIRsbjGX33jAESJmq3b2HIpmapF08z2eeH5PMs-zWC-RjJ0p7gOSurC--efBJP8OJvqAoekj6EIC8OLGeRjtMCBOD6SoZNoP6K8_HUnFuYjd0ye0sR0A558hnTefdj67GAuKFPlwbZrZM2OqFU-PTTpiRyTYsqeXpklBgnd1X=w966-h516-no" alt="使用者 &amp; 老闆互惠"></p><blockquote><p>心得：看完後覺得能讓老闆自行設計不同時間顯示不同的客制菜單是很不容易的一件事，當中又要把操作簡易化，設計模板是很重要的一環。這些模板（自己常吃、新口味、老闆推薦、受歡迎的菜單…）雖然設計簡單卻能把大量想表達的訊息清楚地展示出來，非常值得學習。後台部分讓老闆自行選擇用 Card 或是 Table 模式瀏覽餐廳狀況也很清楚，方便隨時根據現場資訊做判斷處理。未來如果 Real-Time 生產有不同的方式可以切換瀏覽或許對控場人員來說更好。</p></blockquote><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://blog.naver.com/nvr_design/221668077330" target="_blank" rel="noopener">네이버 ‘테이블주문’을 소개합니다.</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Naver 是韓國最大網際網路服務公司，台灣人比較熟悉的 Line 通訊軟體就是他旗下經營的子公司。最近發現 Naver 有一個設計部落格，裡面內容介紹各種旗下軟體的 UIUX，所以就挖了一篇出來多學習看看。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Naver" scheme="http://annilla.github.io/categories/UXUI/Naver/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Naver" scheme="http://annilla.github.io/tags/Naver/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning by Python - Use Keras-Sequential Model Example</title>
    <link href="http://annilla.github.io/2020/03/22/Python/Deep-Learning-by-Python-Use-Keras-Sequential-Model-Example/"/>
    <id>http://annilla.github.io/2020/03/22/Python/Deep-Learning-by-Python-Use-Keras-Sequential-Model-Example/</id>
    <published>2020-03-21T16:00:00.000Z</published>
    <updated>2020-03-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>model API 分為 Sequential （循序型） 和 Functional（多功能型）。</p><ol><li>Sequential API: 用於單輸入單輸出，簡單的 model 由簡單的 layers 串接組成。</li><li>Functional API: 用於多輸入多輸出，layers 可有分支並可共用而組成複雜模型。</li></ol><p>簡單的keras 的工作流程如下:</p><ol><li>創建 model</li><li>創建和添加 layer 到 model</li><li>compile (編譯) model</li><li>Train model</li><li>訓練完成後可用於 prediction (預測) 或 evaluation (評估)</li></ol><p>本篇只是測試安裝環境是否成功，所以只會練習到工作流程第 4 點。</p><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>DL (Deep Learning) 是擁有多個且多層神經元之 NN (Neural Network 神經網路)，而所謂的多層通常是指隱藏層（Hidden Layer）。DL 要用幾層、每層要有幾個節點（神經元）、每個節點間要如何相連、要採用什麼激勵函數等（統稱網路架構），都是由我們決定，因此可以說是 NN 的天賦；而權重與誤差則是透過大量資料自動學習而得，可以視為是 NN 後天的努力結果。</p><p><img src="https://miro.medium.com/proxy/1*5egrX--WuyrLA7gBEXdg5A.png" alt="Deep Learning"></p><h1 id="此篇要練習的完整程式碼"><a href="#此篇要練習的完整程式碼" class="headerlink" title="此篇要練習的完整程式碼"></a>此篇要練習的完整程式碼</h1><p>這次要練習的完整程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入要用的函數</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 準備測試資料</span></span><br><span class="line">data = np.random.random((<span class="number">1000</span>,<span class="number">784</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 準備要逼近的目標資料</span></span><br><span class="line">labels = np.random.randint(<span class="number">10</span>, size=(<span class="number">1000</span>,<span class="number">1</span>))</span><br><span class="line">labels = np_utils.to_categorical(labels,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 創建 model</span></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment"># 創建和添加 layer 到 model</span></span><br><span class="line">model.add(Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>, input_dim=<span class="number">784</span>))</span><br><span class="line">model.add(Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile (編譯) model</span></span><br><span class="line">model.compile(optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">              loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">"accuracy"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train model</span></span><br><span class="line">model.fit(data, labels)</span><br></pre></td></tr></table></figure><p>以下我們分段解說程式碼。</p><h1 id="引入要用的函數"><a href="#引入要用的函數" class="headerlink" title="引入要用的函數"></a>引入要用的函數</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><ul><li>keras.models: 從 Keras 引入 models（模型），Sequential 是 linear stack of layers（多個網絡層的線性堆疊），單輸入單輸出。</li><li>keras.layers: 從 Keras 引入 layers（層）的 Dense 類型。Dense 類型的層（layers）為具有64個神經元。</li><li>keras.utils: 從 Keras 引入 utils（工具）的 np_utils 函數。</li><li>np 即 numpy，而 NumPy 是 Python 語言的一個擴充程式庫。</li></ul><h1 id="準備測試資料"><a href="#準備測試資料" class="headerlink" title="準備測試資料"></a>準備測試資料</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.random((<span class="number">1000</span>,<span class="number">784</span>))</span><br></pre></td></tr></table></figure><p>建立一組測試資料，使用 np.random.random 在 [0, 1) 中產生隨機數，DATA 為 1000 行 784 列（1000x784）的陣列。</p><h1 id="準備要逼近的目標資料"><a href="#準備要逼近的目標資料" class="headerlink" title="準備要逼近的目標資料"></a>準備要逼近的目標資料</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">labels = np.random.randint(<span class="number">10</span>, size=(<span class="number">1000</span>,<span class="number">1</span>))</span><br><span class="line">labels = np_utils.to_categorical(labels,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.itread01.com/content/1541532849.html" target="_blank" rel="noopener">numpy.random.randint</a>是矩陣變數，其語法為 numpy.random.randint(low, high=None, size=None)。labels 結果 為 1 維隨機整數組（1000x1）ex: <code>array([0],[8],[6],…[9])</code>，因沒有 high 的值， 數值隨機介於[0,10)。</li><li><a href="https://www.itread01.com/content/1549602019.html" target="_blank" rel="noopener">to_categorical</a> 將類別向量轉換为二進制（只有0和1）的矩陣類型，原來 labels 為 1 維隨機整數組（1000x1），to_categorical 按照 10 個類別將這 1 維隨機整數組的每個值都轉換為矩陣裡的一個行向量。</li></ul><p>舉例來說，<code>array([0],[8],[6],…[9])</code>的1維整數組，to_categorical 按照 10 個類別將 array 轉換為<br>array<br>[[1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]<br> [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]<br> [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]…<br> [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]]</p><h1 id="創建和添加-layer-到-model"><a href="#創建和添加-layer-到-model" class="headerlink" title="創建和添加 layer 到 model"></a>創建和添加 layer 到 model</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>, input_dim=<span class="number">784</span>))</span><br><span class="line">model.add(Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br></pre></td></tr></table></figure><ul><li>定義Sequential模型，並model.add添加層。</li><li>此範例第一步添加 Dense 類型的層（layers）為具有64個神經元。由於模型需要知道它所期望的輸入尺寸，順序模型中的第一層需要接收關於其輸入尺寸的參數信息（Dense支持通過參數 input_dim 指定輸入參數信息，而某些 3D 時序層支持 input_dim 和 input_length 參數。</li><li>ReLU為激勵函數（Activation Function）之一，<a href="https://mropengate.blogspot.com/2017/02/deep-learning-role-of-activation.html" target="_blank" rel="noopener">詳見此</a>。</li><li>Softmax為激勵函數（Activation Function）之一，<a href="https://blog.csdn.net/bitcarmanlee/article/details/82320853" target="_blank" rel="noopener">詳見此</a>。</li></ul><h1 id="compile-編譯-model"><a href="#compile-編譯-model" class="headerlink" title="compile (編譯) model"></a>compile (編譯) model</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.compile(optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">              loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">"accuracy"</span>])</span><br></pre></td></tr></table></figure><ul><li>模型在使用前必須編譯模型（model.compile）</li><li>Optimizer (優化器)為 RMSprop：優化器目的是建立優化模型，優化目標函數並訓練出最好的模型，其功能是通過改善訓練方式，來最小化 (或最大化) 損失函數。RMSprop，<a href="https://zhuanlan.zhihu.com/p/34230849" target="_blank" rel="noopener">詳見此</a></li><li>loss (損失函數)為 categorical_crossentropy：損失函數基本上可以分成兩個面向(分類和回歸)，但都是希望最小化損失。loss(損失)就是實際和預測的殘差，損失愈小愈好。categorical_crossentropy，<a href="https://blog.csdn.net/legalhighhigh/article/details/81409551" target="_blank" rel="noopener">詳見此</a></li><li>metric (度量函數) 來評估模型性能，’accuracy’為評估指標。<a href="https://www.cnblogs.com/weiyinfu/p/9783776.html" target="_blank" rel="noopener">詳見此</a></li></ul><h1 id="Train-model"><a href="#Train-model" class="headerlink" title="Train model"></a>Train model</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(data, labels)</span><br></pre></td></tr></table></figure><p>最後設定參數輸入 data 與目標 labels，來 model.fit，也就是訓練模型。<br>執行結果，如圖表示以 TensorFlow 作為引擎使用，損失率為 2.3494，準確度為 0.0920。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*dIwMENM7YtaYqdFOOYnQvw.png" alt="執行結果"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a href="https://laoweizz.blogspot.com/2018/12/keras.html" target="_blank" rel="noopener">Keras 簡介</a></p></li><li><p><a href="https://medium.com/@baubibi/%E9%80%9F%E8%A8%98ai%E8%AA%B2%E7%A8%8B-%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E5%85%A5%E9%96%80-%E4%B8%80-68e27912ce30" target="_blank" rel="noopener">速記AI課程－深度學習入門（一）</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;model API 分為 Sequential （循序型） 和 Functional（多功能型）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sequential API: 用於單輸入單輸出，簡單的 model 由簡單的 layers 串接組成。&lt;/li&gt;
&lt;li&gt;Functional API: 用於多輸入多輸出，layers 可有分支並可共用而組成複雜模型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;簡單的keras 的工作流程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;創建 model&lt;/li&gt;
&lt;li&gt;創建和添加 layer 到 model&lt;/li&gt;
&lt;li&gt;compile (編譯) model&lt;/li&gt;
&lt;li&gt;Train model&lt;/li&gt;
&lt;li&gt;訓練完成後可用於 prediction (預測) 或 evaluation (評估)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本篇只是測試安裝環境是否成功，所以只會練習到工作流程第 4 點。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://annilla.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://annilla.github.io/tags/Python/"/>
    
      <category term="Deep Learning" scheme="http://annilla.github.io/tags/Deep-Learning/"/>
    
      <category term="Keras" scheme="http://annilla.github.io/tags/Keras/"/>
    
      <category term="TensorFlow" scheme="http://annilla.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning by Python - Setup Environment</title>
    <link href="http://annilla.github.io/2020/02/15/Python/Deep-Learning-by-Python-Setup-Environment/"/>
    <id>http://annilla.github.io/2020/02/15/Python/Deep-Learning-by-Python-Setup-Environment/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2020-02-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>深度學習(Deep Learning)將以數篇呈現，先簡要介紹以開源機器學習平台Tensorflow與神經網絡API Keras 在Python實作 Deep Learning。</p><a id="more"></a><ol><li><p>開源機器學習平台Tensorflow，TensorFlow是一個開源軟件庫，在維基上提到用於各種感知和語言理解任務的機器學習。如語音識別，Gmail，Google相簿和搜尋。TensorFlow提供了一個Python API，以及C++、Haskell、Java、Go和Rust API。第三方包可用於 C#、.NET Core、Julia、R和Scala。TensorFlow的底層核心引擎由C++實現，通過gRPC實現網路互訪、分散式執行。雖然它的Python/C++/Java API共享了大部分執行代碼，但是有關於反向傳播梯度計算的部分需要在不同語言單獨實現。目前只有Python API較為豐富。</p></li><li><p>Keras 是一個快速實現深度神經網路用Python編寫的開源神經網路庫，包含許多常用神經網路構建塊的實現，來簡單處理圖像和文字資料。能夠配合TensorFlow，Microsoft Cognitive Toolkit，Theano或PlaidML之上執行，其代碼代管在GitHub上，社區支援論壇包括GitHub的問題頁面和Slack通道。</p></li></ol><p>環境設置：原本按照《深度學習入門教室》一書安裝步驟發現遇到許多問題，python版本與Anaconda的適配問題，以及一些tensorflow相關問題。<br>在安裝與環境設定過程常卡住，以下提及安裝需注意的適配版本。<br>以下安裝範例為Python 3.7.4+Anaconda+tensorflow2.0<br>安裝Anaconda：有分python3.7與python2.7版本。</p><p><img src="https://miro.medium.com/max/2880/0*svhqy8xjtu21TnE9" alt="Python" title="Python"></p><p>安装Tensorflow ：<br>輸入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensorflow python=3.7</span><br></pre></td></tr></table></figure></p><p><img src="https://miro.medium.com/max/3200/0*DZi-3SBgonasZeH4" alt="Tensorflow" title="Tensorflow"></p><ol><li><p>安装tensorflow：<br>輸入命令<code>pip install tensorflow==2.0.0 -i</code><br><a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>激活tensorflow：輸入命令<code>conda activate tensorflow</code></p></li><li><p>安装Keras：輸入命令<code>sudo pip install keras</code><br>測試執行：表示安裝成功</p></li></ol><p><img src="https://miro.medium.com/max/1650/0*peFE1lqO8w65CN3W" alt="Keras" title="Keras"></p><p>確認安裝環境：輸入命令python</p><p><img src="https://miro.medium.com/max/2944/0*gRcC0khdnxuynJI8" alt="python" title="python"></p><p>測試執行：<br>輸入命令<code>import tensorflow as tf</code><br>輸入命令<code>hello=tf.constant(&#39;123&#39;)</code><br>輸入命令<code>sess=tf.Session()</code></p><p><img src="https://miro.medium.com/max/2912/0*k7tyXMt7OpeznOiE" alt="測試執行python" title="測試執行python"></p><p>會錯誤！<br>原因：在於TF 2.0不使用<code>tf.Session</code>，若要繼續使用，需改為<code>sess=tf.compat.v1.Session()</code></p><p>這裡我先備註以後會需要的資料</p><ol><li><p>tensorflow 指令說明網址 <a href="https://www.tensorflow.org/api_docs/python/tf/compat/v1/Session#graph" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/compat/v1/Session#graph</a></p></li><li><p>待研究將TensorFlow 1.X的代碼轉換為TensorFlow2.0代碼<br><a href="https://blog.csdn.net/xovee/article/details/93402172" target="_blank" rel="noopener">https://blog.csdn.net/xovee/article/details/93402172</a></p></li></ol><p>接著<br>輸入命令<code>print(sess.run(hello))</code></p><p>會發現錯誤！</p><p><img src="https://miro.medium.com/max/2884/0*5JslrazdBViiv0ek" alt="測試執行python" title="測試執行python"></p><p>原因：<br>使用<code>tf.compat.v1.Session()</code>雖可執行，但是，然而TF 1.X的的API 使用 Graph Execution，但是TF 2.0 默認使用 eager execution，要解決這個問題有兩種方式一種辦法先定義數據向量圖形，或是使用<code>tf.compat.v1.disable_eager_execution()</code> ，在tensorflow 指令說明裡提這個指令被使用在TF1.X代碼至TF2.0代碼的轉換(It can be used at the beginning of the program for complex migration projects from TensorFlow 1.x to 2.x.)</p><p>因此，最後如下暫時解決，確認是可執行的。<br>測試執行：</p><p><img src="https://miro.medium.com/max/2214/0*MApZjmF_L-69z5Kn" alt="測試執行python" title="測試執行python"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深度學習(Deep Learning)將以數篇呈現，先簡要介紹以開源機器學習平台Tensorflow與神經網絡API Keras 在Python實作 Deep Learning。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://annilla.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://annilla.github.io/tags/Python/"/>
    
      <category term="Deep Learning" scheme="http://annilla.github.io/tags/Deep-Learning/"/>
    
      <category term="Keras" scheme="http://annilla.github.io/tags/Keras/"/>
    
      <category term="TensorFlow" scheme="http://annilla.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Use Cypress with Cucumber for UI Testing</title>
    <link href="http://annilla.github.io/2020/01/04/Testing/Use-Cypress-ui-testing/"/>
    <id>http://annilla.github.io/2020/01/04/Testing/Use-Cypress-ui-testing/</id>
    <published>2020-01-03T16:00:00.000Z</published>
    <updated>2020-01-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>隨著時間越長，專案總會越寫越多功能，可是如果每次重構後都要人工測試，會花費很多不必要的時間。所以為了往後能安心的重構程式，我想要一個可以方便 debug 且使用簡易的 UI Testing Framework。參考了許多架構後，決定要使用 cypress + cucumber 來寫測試。</p><a id="more"></a><p><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> 的好處是對於開發者非常友善，開發時在 chrome 瀏覽器模擬，且有變更都會自動觸發 reload，大大減少每次重跑的繁瑣動作，且每個步驟的紀錄都會視覺化的呈現在左方，Debug 時還可隨時搭配 chrome dev tool，真的是開發者的救星呀～如果要搭配 CI 的話，他也有 headless 模式啟用 electron 來跑模擬，出來的 log 也是非常漂亮還會順便錄影！</p><p><a href="https://cucumber.io/" target="_blank" rel="noopener">Cucumber</a> 的好處是他可以寫可讀性高的測試情境，讀寫上很直覺，搭配不同 tag 的功能，可以把測試情境分類的很清楚。</p><p>接著我們就來介紹怎麼結合 cypress 和 cucumber 吧～</p><h1 id="安裝-cypress-cucumber"><a href="#安裝-cypress-cucumber" class="headerlink" title="安裝 cypress + cucumber"></a>安裝 cypress + cucumber</h1><p>專案內安裝 cypress</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cypress --save-dev</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 加上啟動 cpress 指令並執行 <code>npm run cypress:open</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"cypress:open"</span>: <span class="string">"cypress open"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若啟動成功會自動建立測試情境，確定安裝完成後，可刪掉範例。</p><p><img src="https://lh3.googleusercontent.com/OSU2uLttYHh0s8kaXnZocadud55Ocg3pyVv3_qE4xK7X6DoKsLxdu5_xbRUpiqGEAQlgFuqg2JoCYQBnUQ6GjDpyBz7th_1HzIeu9jR_GcWq5h1_jYaJuiqN7NESfbV8md-WAfZA1juon6IzsD173Y3-yoF2WLfnVrX_A8TPLrWajG67KGg4rBCDDzdE2hQmEb4ZH8JSKSgSOPwUbDsAyfqjzWDeV960edneVbOF4QubqRro6e4E19g5W3AxN1csRix71ltckQjgzu_gGE4lqxLN0khOgRCDwORgTmlhDipHi9Gk10l2hPuD-1w673agOUFqJdZf8zCdK3EIHxOsj2hJv7Za6iz3r7cjp3FqYTlKjBpoz3w_fWASXHCokwzq7h5hyzYS4aj58CWN4MSKd08zPpP-xKdK-f5fdkvh0vs0J6T2IrQYCaA9RSsaAMp6DHD9FwFe0wN1T2oj8rLuQ5fUMbyq0G8IzFUi8Hbyw06yD_lWMaFdGj-eoXug0tfAgAygE3L06DZalwhltkyIajN4h2iFu922dAEJQyEH2UvF_N8mjXShSrZdSmJ-WpJANLnzQqgjaO51x2Ub0zrd1nLuzuG8eSGyRHtEN17YGmhOEvcnX7O7pDEbrM4VeAKuvJ80-HUzF9Pe3lPtoI6tK1iN5wVQPzKTHvMyym576jk1sKUdv2zwo6nXUFVD_z_7WoVNP8E2OtZREC-aDlKy4LSbJP0P206fRR4VlBcmq8DZcdO1AA=w1720-h1196-no" alt="npm run cypress:open" title="npm run cypress:open"></p><p>關掉 cypress 視窗，接下來我們安裝 cucumber plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev cypress-cucumber-preprocessor</span><br></pre></td></tr></table></figure><p>在 <code>cypress/plugins/index.js</code> 設置 plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cucumber = <span class="built_in">require</span>(<span class="string">'cypress-cucumber-preprocessor'</span>).default</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">'file:preprocessor'</span>, cucumber())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>cypress.json</code> 設置測試檔案位置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"testFiles"</span>: <span class="string">"**/*.feature"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 設置 cucumber 的情境預設非 global，這樣可以區分是否要用 global 的情境。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"cypress-cucumber-preprocessor": &#123;</span><br><span class="line">  "nonGlobalStepDefinitions": true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>把原本 cypress/integration, cypress/fixtures 資料夾的檔案都刪除，就可以開始寫一個測試囉～</p><h1 id="寫一個測試"><a href="#寫一個測試" class="headerlink" title="寫一個測試"></a>寫一個測試</h1><p>新增 <code>cypress/integration/Google.feature</code></p><figure class="highlight feature"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># language: zh-TW</span></span><br><span class="line">功能: Google</span><br><span class="line">    <span class="symbol">*</span> 前往 Google 首頁</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Google</span></span><br><span class="line">    場景: 前往 Google 首頁</span><br><span class="line">        假設 前往 Google 網址</span><br><span class="line">        那麼 看到標題包含 <span class="string">"Google"</span></span><br></pre></td></tr></table></figure><p>@Google 這個 tag 是讓你能將測試做分類，這樣之後要跑測試的時候，可以指定執行特定類別。</p><p>新增 <code>cypress/integration/Google/google.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Given &#125; <span class="keyword">from</span> <span class="string">"cypress-cucumber-preprocessor/steps"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'https://google.com'</span></span><br><span class="line"></span><br><span class="line">Given(<span class="string">'前往 Google 網址'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(url)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>若是放在自訂的資料夾內，則情境不會被共用，下面示範將看到標題這個結果放在 global 的情況。</p><p>新增 <code>cypress/integration/common/i_see_string_in_the_title.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Then &#125; <span class="keyword">from</span> <span class="string">"cypress-cucumber-preprocessor/steps"</span>;</span><br><span class="line"></span><br><span class="line">Then(<span class="string">`看到標題包含 &#123;string&#125;`</span>, (title) =&gt; &#123;</span><br><span class="line">  cy.title().should(<span class="string">'include'</span>, title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>這樣我們就放好 global 的情境囉～其他情境若是要共用的話就可以不用再寫一次。</p><h1 id="測試～跑起來吧！"><a href="#測試～跑起來吧！" class="headerlink" title="測試～跑起來吧！"></a>測試～跑起來吧！</h1><p>因為剛剛有使用 tag 的功能，所以我們可以把 npm script 改成指定執行特定標籤，<code>package.json</code> 修改如下。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "cypress:open": "cypress open -e TAGS=@Google"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>再次執行 <code>npm run cypress:open</code>。跳出 cypress 視窗後，點選 Google.feature 開始測試，成功就會出現下面的畫面囉～</p><p><img src="https://lh3.googleusercontent.com/3NKaZFg0tnUSbAdvXVq8YQ2y2nVZeUmNQ1oiCujS9rltLp-920w2uP4-bY38Wqg3aDooYB4BBR9wB_ndxabv-8y0r0Q_PTeKF38zHSa4BM5rNksa9X65HNTG_DtguFuB6W-wzSlno2A8l0c1aZFl-bgpmXoUCgKQmS1mAH-Ep5CpOZ7VMeebFambMqaoSBsYpWlhEzneck1Luk4oo-n1ilw1U4T8sAbZ61D00-gcPdNPD4pJNIoJjwsoQys38NbQGlGKFjoCOP4qZEn84VDuY_sRBQaUbV1LUKBzoJWs0QzgO2cn4WAVfQ9b6SiM50VivyHre9awThFdy8FPCteyIUW185Ssf0k8HtKPghH9blF4fL5iigVO97F_VYby50hlX21vAQUNCk8jtIAPp9NHqVKuWditNgKKlsUpVwRS-UVsBBvE9ChpIh3UrDlyb0otGggx2CgBzu3CASL5vxSElUtGuKdUddjD5HUojNUD2Ua_pZBHr1uEOumD6L5ypSlkx5GbhWjxTB9ROqTtsr6w7fOLH0KcjG0cfSnap9igjoJ-eVI0oKFgkJv1gqXz8hyQEgKW0_xWwBay0p1hVjG2zEVHrHByzgdIzWZ0fdWe1NVdcavOvHhfO7bnYv-EXrVFcfH_EZRqRV02oK3Q3Zl-wFh6v2oJ7HIwdiwh8nOBep4g3QI0jKrd30f3hmFOgQZlUieKrTjZQ9xh8ZM47RZbFs1elT9VLPAp0unTXixIl1w7VyYunA=w2206-h1378-no" alt="npm run cypress:open" title="npm run cypress:open"></p><p>今天的練習放在 <a href="https://github.com/Annilla/cycpress-cucumber-practice/tree/v1.0" target="_blank" rel="noopener">Github</a>，下回見～</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a></li><li><a href="https://cucumber.io/" target="_blank" rel="noopener">Cucumber</a></li><li><a href="https://github.com/TheBrainFamily/cypress-cucumber-preprocessor" target="_blank" rel="noopener">cypress-cucumber-preprocessor</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隨著時間越長，專案總會越寫越多功能，可是如果每次重構後都要人工測試，會花費很多不必要的時間。所以為了往後能安心的重構程式，我想要一個可以方便 debug 且使用簡易的 UI Testing Framework。參考了許多架構後，決定要使用 cypress + cucumber 來寫測試。&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="http://annilla.github.io/categories/Testing/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
      <category term="Cypress" scheme="http://annilla.github.io/tags/Cypress/"/>
    
      <category term="Testing" scheme="http://annilla.github.io/tags/Testing/"/>
    
      <category term="Cucumber" scheme="http://annilla.github.io/tags/Cucumber/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core 3.0 SPA with Vue-Cli 3 - Make Nuget Template</title>
    <link href="http://annilla.github.io/2019/12/07/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3-make-nuget-template/"/>
    <id>http://annilla.github.io/2019/12/07/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3-make-nuget-template/</id>
    <published>2019-12-06T16:00:00.000Z</published>
    <updated>2019-12-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇寫過 <a href="../../../../../2019/12/07/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3-make-nuget-template/">.NET core 3 + Vue-cli 3 的起手式</a>，這次我們要把做好的專案寫成 dotnet new 的範本，這樣以後就不用做這麼多繁瑣的步驟啦！</p><a id="more"></a><h1 id="製作範本"><a href="#製作範本" class="headerlink" title="製作範本"></a>製作範本</h1><h2 id="Step1-將內容放到-Content-資料夾"><a href="#Step1-將內容放到-Content-資料夾" class="headerlink" title="Step1. 將內容放到 Content 資料夾"></a>Step1. 將內容放到 Content 資料夾</h2><p>新增 <code>Content</code> 資料夾，把原本專案的檔案放到 Content 底下。</p><p><img src="https://lh3.googleusercontent.com/DM0FGhjan-_q6Kldvpdse7NxiCwGNlimwMYeakJ-kS-P5jyKz01UeewDUCCNVj-P81V9dssVgwmszQlwwBi40pZuFMI-EFnoREY6RmVcToZZTAx6zi29PEbH7d2eKEQcFSIM7CharolWbPK_UC1HngzN6u1PVKfYu4qhIETIUPccN9zRjGUfBwCOexzAMB_JWzoCy1nhR09B8n3x8zVdcQ8KHQL8UkjlJT7EECU7JE4hvWjNKbalwzROwjGlJHR8Rm_8Arje9iN3v3d4hvewzRtCWx8zpzjxMyPgWYYX-jofabaeM6rcAOhCId0BqCTjQ_ObVpRUK_lE1Vf1O2jqFRjOvas1Ll9Z5dXjuis_KXDsMyvcogE-Q6HzzzmcI5qyDK9FrB93N-JBCJD33fsfIeYbwIvevNOejtO-UNUvRces2Xxmj4RzjKVxBPiYBayAILx4PEqEY9VwKlBuDFVJZXAO1rF9RVPzVlmARhNG7_ezALQSlDXVIG1nAEA3uwXV4Ry3vxsb4N662yy2OufzZ-6W8z_C69WvDmPHCZb_J2eaQX6zQ_3KNlO1AwjrTlGNEGRw3eUudGQAwND2PkC0Lj-HeCZWNkPZwY8ToMQ2dKDrrow3px3qjqB6hbU8nCkkdO6j2C8qqFZnR0ETIH-7V7OyJE0jLu1c-exfR0bUmm1e__deylIbqI8yFG3uP3c-bXoXec0pMyU7TqUMshAaQAhslIAZ4m1hquCsOkls1hKIKnzQyQ=w636-h1324-no" alt="將內容放到 Content 資料夾" title="將內容放到 Content 資料夾"></p><h2 id="Step2-設定-template-json-nuspec"><a href="#Step2-設定-template-json-nuspec" class="headerlink" title="Step2. 設定 template.json, .nuspec"></a>Step2. 設定 template.json, .nuspec</h2><p>* 在 Content 資料夾內新增 <code>.template.config</code> 資料夾，新增 <code>template.json</code></p><p>Content/.template.config/template.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"http://json.schemastore.org/template"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Anny Chang"</span>,</span><br><span class="line">  <span class="attr">"classifications"</span>: [ <span class="string">"Web"</span>, <span class="string">"MVC"</span>, <span class="string">"SPA"</span> ],</span><br><span class="line">  <span class="attr">"identity"</span>: <span class="string">"Anny.DotnetCore.VueCli"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Anny Dotnet Core 3 With Vue Cli 3"</span>,</span><br><span class="line">  <span class="attr">"shortName"</span>: <span class="string">"annydotnetvuecli"</span>, </span><br><span class="line">  <span class="attr">"tags"</span>: &#123;</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"C#"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"item"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sourceName"</span>: <span class="string">"dotnet_core_with_vue_cli3"</span>,</span><br><span class="line">  <span class="attr">"preferNameDirectory"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>屬性</th><th>說明</th></tr></thead><tbody><tr><td>$schema</td><td>使用 template schema</td></tr><tr><td>author</td><td>作者名</td></tr><tr><td>classifications</td><td>dotnet new 列表顯示的分類</td></tr><tr><td>identity</td><td>辨識此 Template 的唯一 ID</td></tr><tr><td>name</td><td>Template 顯示名稱</td></tr><tr><td>shortName</td><td>dotnet new 使用此 Template 的簡寫</td></tr><tr><td>tags</td><td>dotnet new 列表顯示的語言</td></tr><tr><td>sourceName</td><td>這個是到時候使用 template 時，可以將專案名稱替代成要的</td></tr><tr><td>preferNameDirectory</td><td>dotnet new 沒有指定專案名稱時，他會自動命專案名為所在資料夾的名稱</td></tr></tbody></table><ul><li>在最外層新增 .nuspec 檔案。</li></ul><p>Anny.DotnetCore.Template.nuspec</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">package</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">metadata</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Anny.DotnetCore.Template<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Anny DotnetCore Template Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      Anny's DotnetCore Template for example.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authors</span>&gt;</span>Anny Chang<span class="tag">&lt;/<span class="name">authors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">      ASP.NET Core Teamplate for Vue Cli.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packageTypes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">packageType</span> <span class="attr">name</span>=<span class="string">"Template"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">packageTypes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">files</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"Content/**/*"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">exclude</span>=<span class="string">"**/node_modules/**;**/package-lock.json;**/bin/**;**/obj/**;**/.vs/**;**/.vscode/**;**/wwwroot/**"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">target</span>=<span class="string">"Content"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">files</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>metadata 屬性</th><th>說明</th></tr></thead><tbody><tr><td>id</td><td>dotnet new 安裝 nuget template 識別唯一ID</td></tr><tr><td>version</td><td>nuget package version</td></tr><tr><td>title</td><td>nuget 官網上對於 package 的標題</td></tr><tr><td>description</td><td>nuget 官網上對於 package 的描述</td></tr><tr><td>authors</td><td>nuget 官網上對於 package 的作者名</td></tr><tr><td>summary</td><td>nuget 官網上對於 package 的摘要</td></tr><tr><td>packageType</td><td>告知 nuget package 類行為 Template</td></tr></tbody></table><table><thead><tr><th>files 屬性</th><th>說明</th></tr></thead><tbody><tr><td>src</td><td>指定來源資料夾位置</td></tr><tr><td>exclude</td><td>排除特定檔案</td></tr><tr><td>target</td><td>指定生成資料夾位置</td></tr></tbody></table><h2 id="Step3-上傳-nuget-package"><a href="#Step3-上傳-nuget-package" class="headerlink" title="Step3. 上傳 nuget package"></a>Step3. 上傳 nuget package</h2><p>執行 nuget cli 指令，若還沒有安裝請連<a href="https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools#nugetexe-cli" target="_blank" rel="noopener">這裡</a>。</p><p>執行下列 nuget 指令打包 package。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget pack</span><br></pre></td></tr></table></figure><p>將產生出來的 .nupkg 檔案上傳至官網。等待官網審核成功後就可以使用 Template 囉～</p><p><img src="https://lh3.googleusercontent.com/yLk0gObRHknv2ngdI8O11NeDcMkR29sCTV7ppUmQ-IEKBunro_4vpsh-TcIlpQYXj1ujWf_cZ6_lp-vl6oBui1KJYT59C4BT2GNvkv8qg0CMC93NWgio63OTuHf_344IVhUuX_CAgdMrE153QPu4soqcBaUlF0Ax3dYF0x6sHyyyGP8x8YjslbFdMVrMxTus7AfcC0h0b3Mzz19iUmzCu5OvB_5iVjNYnMNrMCHwURSvQP0J1w9PVBiJykWluB73IMh-EGcTIxH_6eyvArkdz_-pz-_Am3ZNdWiUXQml86aAJb7Tm6OJqcRlxNuO_nQpFW6JtUQVRWlkA85Xb32_uG9JymE_zrG47g6p982LlXTUv3kJC5RfjebKnbwlVDxoO7J501XO1abfjTKWzbSx6ERhyVjJE0CzJg2qiEKtOmXsJbAew0tJiSjH2H_ri-adgAudtsPS-Rair5WVtpB0AHaRjLcmZG4L1beOmWOcK1_0RejtWgE_Lwx19ngM1D8fuXsNd3uX_EGua57gR-0DlUpDwfknu14k9YuG9Wdz_TMmacAdfPFcR38vjLuGCzcHZ3RtSv-vmy-42x4KN5mKARKYKbmYptqVijJYN2yuI_W7LlVA9ruHKkLaBXKW8tHRyiWTx4nOvGvuLlNw6Qv9PaVp3ch7Ml8_lOnmChtNaCoknd4wE_txHXjegvpypmHrxE-RDGEw9LCGjn-Ny8R5p0yLSI8OoSho5ZcfdSkYyP-fNllqew=w2560-h1376-no" alt="nuget package 審核成功" title="nuget package 審核成功"></p><h1 id="使用範本"><a href="#使用範本" class="headerlink" title="使用範本"></a>使用範本</h1><p>執行下列指令安裝範本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new --install Anny.DotnetCore.Template::1.0.3</span><br></pre></td></tr></table></figure><p>成功會看到列表出現安裝的範本名稱。</p><p><img src="https://lh3.googleusercontent.com/bEIRs1iYDfjJPgiOMe5tbywr7VZZh_RY9rw8mRHrA4BiWNwSzDO98dQrZ4CNe6QONzhdr1DQOrLJRw_OjjGie1lbOkCwlyTMqYb-5bV-3kL0McGF2mzzsbCJBuKRBxG2J4_7D3StYlRJoNbwb9GkOxDiB_uV0E2jY10ZNc5Uh0W7aaAx56zcLz7J7aWZCpLJfSBPBHXtXEDn6N3vnYwj2W81s_UHv95Zy78tJrRPrpWfk-FvLQM4LLnfKmTL0Ta0bv3eTBGYyzBXZKRuWIpkXeIjgmHh6eWXECGrM1LQ47tCYFTQ5vxJ4_eG0J75qOOYuZNmEl2fWHXYjlDjrr2e03lIPC5SFcgcymDvRViA9ZKtWooNCpirpA4xmWwHuMCr2-krpuudLCnOD0JmgYG2vfJ5yYjUvOc7IPuvrpHHMGZHNmOlVt6KRgd-B4n1D3C1QrFQ_l-hi_GyBXQNiHOj8roiW4vAh0WWmh2TjevORVh43ZOQ6WNWU8kLta63wAkWRCpBRcOP3_4f69fy3Wpkjex9T025guk11itdMNRkdDLNR8DUuz7-fLJmy1fI_6_urs9-lodG7NtKAxAtaxh5RKf2ZuW0ZA7MITnXFX28BMazKheqQEnn5F3fuaWoJVipRkawc8xTwN9AHh5o7NYRqcp_Rto3KP9NPAwy_sPPY2-SaDexOvRsZHpM9ib7LebSDb7iA7YLcAjOYOhJOZnFWls8Q56Wtl7VxrZC_1gPSF9aRGcPEw=w2310-h1354-no" alt="安裝範本成功" title="安裝範本成功"></p><p>請去一個新資料夾來測試範本。<br>不指定名稱執行的話，專案名稱會自動取名為當前位置的資料夾名稱，如下指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new annydotnetvuecli</span><br></pre></td></tr></table></figure><p>若要在當下位置建立自己命名的專案名稱，可傳入參數如下指令。 (XXX 請替換成你要的專案名稱)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new annydotnetvuecli -n XXX</span><br></pre></td></tr></table></figure><p>若要安裝新版本的範本，記得解除舊的版本，解安裝請執行下列指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new -u Anny.DotnetCore.Template</span><br></pre></td></tr></table></figure><p>這樣就完成我們的模板測試囉～今天的 code 放在 <a href="https://github.com/Annilla/dotnet-core-with-vue-cli3/tree/v2.0" target="_blank" rel="noopener">github</a>。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://devblogs.microsoft.com/dotnet/how-to-create-your-own-templates-for-dotnet-new/" target="_blank" rel="noopener">How to create your own templates for dotnet new</a></li><li><a href="https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools#nugetexe-cli" target="_blank" rel="noopener">安裝 NuGet 用戶端工具</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇寫過 &lt;a href=&quot;../../../../../2019/12/07/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3-make-nuget-template/&quot;&gt;.NET core 3 + Vue-cli 3 的起手式&lt;/a&gt;，這次我們要把做好的專案寫成 dotnet new 的範本，這樣以後就不用做這麼多繁瑣的步驟啦！&lt;/p&gt;
    
    </summary>
    
      <category term=".NET Core" scheme="http://annilla.github.io/categories/NET-Core/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
      <category term=".NET Core" scheme="http://annilla.github.io/tags/NET-Core/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="Webpack" scheme="http://annilla.github.io/tags/Webpack/"/>
    
      <category term="SPA" scheme="http://annilla.github.io/tags/SPA/"/>
    
      <category term="MVC" scheme="http://annilla.github.io/tags/MVC/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term="Nuget" scheme="http://annilla.github.io/tags/Nuget/"/>
    
      <category term="Template" scheme="http://annilla.github.io/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>Use git extention in VScode, goodbye sourcetree</title>
    <link href="http://annilla.github.io/2019/11/23/VScode/Use-git-extention-in-VScode-goodbye-sourcetree/"/>
    <id>http://annilla.github.io/2019/11/23/VScode/Use-git-extention-in-VScode-goodbye-sourcetree/</id>
    <published>2019-11-22T16:00:00.000Z</published>
    <updated>2019-11-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>因為 sourcetree 在公司內網些時候會一直跳出輸入 AD 帳密的視窗，前陣子因為換了密碼，結果舊密碼被記住，結果每用一次 sourcetree 就會被鎖一次帳號，真是冤望啊！後來索性就決定刪掉 sourcetree ，想說如果全部都在 vscode 一次解決就完美了～所以就開始我的 vscode extention 探索之旅。</p><a id="more"></a><p>首先，得先理出哪些 sourcetree 的功能是我常用的，並找到相對應的 vscode extention 。想要的功能如下：</p><ol><li><p>資料夾整理專案功能：因為不可能記住 repo 名稱對應的專案，所以若能像 sourcetree 有分資料夾的功能，就能快速找到專案對應的 repo。</p></li><li><p>Git Stash 功能：能暫存程式碼片段在本機。隨時可調用。</p></li><li><p>Git Graph 功能: 能看清楚每個 branch 的 commit 圖形化介面。</p></li></ol><p>接著，我們就來看是哪些 vscode extention 吧~</p><h1 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h1><p><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager" target="_blank" rel="noopener">Project Manager</a> 能用它做資料夾整理專案的功能，而且他在 vscode 還可以做 open in new window 的動作，整合開啟程式片段的功能感覺超方便！</p><p><img src="https://github.com/alefragnani/vscode-project-manager/raw/master/images/vscode-project-manager-side-bar.gif" alt="Project Manager"></p><h1 id="Git-Stash"><a href="#Git-Stash" class="headerlink" title="Git Stash"></a>Git Stash</h1><p><a href="https://marketplace.visualstudio.com/items?itemName=arturock.gitstash" target="_blank" rel="noopener">Git Stash</a> 能用它做 git stash 的相關動作，而且他整合在 vscode 的 git 頁籤中，不會像 gitLens 跑到另一個頁籤，我覺得整合的很好，操作又簡潔。</p><p><img src="https://raw.githubusercontent.com/arturock/vscode-gitstash/master/resources/docs/screencast.gif" alt="Git Stash"></p><h1 id="Git-Graph"><a href="#Git-Graph" class="headerlink" title="Git Graph"></a>Git Graph</h1><p><a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph" target="_blank" rel="noopener">Git Graph</a> 能用它看到 git 圖形，也可以透過滑鼠右鍵做 branch 切換、加 tag、cherry pick 等動作，最重要的是他也整合在 git 頁籤中，所以就可以把 git 功能就統一在 vscode 原始 git 頁籤中，整個融合在 vscode 介面中，再也不用另外開 sourcetree 了！</p><p><img src="https://github.com/mhutchie/vscode-git-graph/raw/master/resources/demo.gif" alt="Git Graph"></p><p>透過以上三個 vscode extention ，就能永遠跟 sourcetree 說 goodbye 了～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為 sourcetree 在公司內網些時候會一直跳出輸入 AD 帳密的視窗，前陣子因為換了密碼，結果舊密碼被記住，結果每用一次 sourcetree 就會被鎖一次帳號，真是冤望啊！後來索性就決定刪掉 sourcetree ，想說如果全部都在 vscode 一次解決就完美了～所以就開始我的 vscode extention 探索之旅。&lt;/p&gt;
    
    </summary>
    
      <category term="VScode" scheme="http://annilla.github.io/categories/VScode/"/>
    
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term="Git" scheme="http://annilla.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core 3.0 SPA with Vue-Cli 3 - Start New Project</title>
    <link href="http://annilla.github.io/2019/10/10/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3/"/>
    <id>http://annilla.github.io/2019/10/10/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3/</id>
    <published>2019-10-09T16:00:00.000Z</published>
    <updated>2019-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前有寫過一篇 <a href="../../../../../2017/12/02/DotnetCore/NET-Core-2-0-SPA-with-Vue-Cli/">.NET core 2 + Vue-cli 2 的起手式</a>，到了2019，兩者也紛紛出版本3。這次，我們將說明如何用 .NET Core 3 + Vue-cli 3 起一個新專案，附贈最新 <a href="https://vuetifyjs.com/en/" target="_blank" rel="noopener">Vuetify 2</a> 的 Material Design 框架。</p><a id="more"></a><h2 id="安裝-vue-cli-模板"><a href="#安裝-vue-cli-模板" class="headerlink" title="安裝 vue-cli 模板"></a>安裝 <code>vue-cli</code> 模板</h2><blockquote><p>注意： vue-cli 需要 Node.js 版本 &gt; v8.9</p></blockquote><p><br></p><ul><li>安裝全域 <code>vue-cli</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ul><li>起始一個 vue 專案 <code>my-app</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-app</span><br></pre></td></tr></table></figure><p>按照 <code>vue-cli</code> 的指示選擇預設 (<code>default</code>) 即可。</p><p>安裝完後，可以把專案從 <code>my-app</code> 資料夾中移出來，如下圖。</p><p><img src="https://lh3.googleusercontent.com/mg4HgncLJ66AZ4wnPznFb1X55drWjTCgDy-22BLolsQRlBTYghwQg8kDxWkCaneH4eoyns8JS9Xi42b74lk4ATinxc19-ka7voTtH8ySKcfZZ4j9nRsj_X0FQvBCzIIsk9ZHBv159X0piGmlaJKvLm2q6V-Rpmzbpl6pvd9M1zNtO5Cu01hFRED2G0Zoh9y5ELB6u_vU1uqoCFfNM-eDDjFMQrqTZ0vd3PxmjciMwdQ8hjMxMGoo9pVci3V3z-K0NlFqfuX5O7Skg1Qhk0OgCa7DYqfmL-QrdZ-PcJOK0sMBCY2LfW3cOjFK9AkQTCTYnbn4xMLLAX8dR1jRgFXBGIsDJl_FiE-HCNrT71O1wrA1yd751rABO2w8ghElsJgteqvSBBoukRrgYwX4z8Efuu1BReVfX3hfdPAsfJKSHsZZuM-C5G3GzT58GHQpXpVHyAQME344dX0zqaZmDrWb0PKcD77G0lsYmZcpXAuczuhWADSAPMUGCuswMgan3q35GRrpN9SJwekmzHXs1J818eOptpn0jTO3x--I6bhsvB9OpmchFI8ZoFtE21LDPa1Jfrss_-HZ4ZpzdNslDdNeOL33kHLu00zXne8AwMCCmD1KKp4aLwniW3-n7tVuQFTKLYRb3sNfKOgbdYwNHK4urpo1IaBLazDwcjnhESmz-fJEzyZ2mH-121t3_VfSDcwsmSOKlZKs6pXbA_uK_YFIIBHF5IozC1vv6QUQ40WIe9aiUnLTqg=w618-h934-no" alt="專案目錄" title="專案目錄"></p><ul><li>執行套件安裝</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>安裝 Vuetify 框架</li></ul><blockquote><p>如果不想要安裝樣式框架可以直接跳過這個步驟</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add vuetify</span><br></pre></td></tr></table></figure><ul><li>測試 vue 專案是否安裝成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>用瀏覽器看 <code>http://localhost:8080</code> 如果有成功出現如下面畫面就是安裝成功 <code>vue</code> + <code>vuetify</code> 的專案囉～</p><p><img src="https://lh3.googleusercontent.com/WTI7SZCavIJAmLRqZNbCMMRHxPwSm6yD_EkBf-DHV8Rn_96Sa39daK1aYjxFd34c_XAjiC8yDZVwspgn2arZdo-_ptFvduN4CQ0cNnJC5_xohUq10ggkuzHrdn7m9KezmU-8E4FZMBD3PzRMeWPYlwJCj-JjSfkNpQZGLRn37RyoGNvpJECdgnBsEEQx5AZHx-E4ZJDOTujyDBGEkqvp8lI3oW--jDOoCIMaFUuLu-vHxKvWtFprE_mBzwI7KIkkeC9D0rWhUsX93hJT4x46Elmj1TOYSDRMiNogHG0P5cZ5JSUIUsdM_T9XKQ-U0oTDeD3iHipDBmBfJH5KgmpXGh3e8cBlyHqpkqu5DVXe468cWfNT9nRqCB3IQOPtPcJg5tB0bKe68fQTjaIwwiqEngW1aB-8gXZgt5OCDeAyOZJB0rvXvr9uoL69sUrHCamSGT0ppGLenX7yFeP-uNVPXgi899gQj9siNlqWbQWnjjdrhsTAvrx5-3rFS43GIssEkwwB_MiQT411oAdd_g9ds_BgCDSohxD2NOWZAWJ3NmvrSupIsvckps0p7jLJ-4Mqb82J5KvJ0GdIT8wIjqF8hZmhFeAWxFgmwE10axr7eClFsN4CjIqhnFdO_v86vyYDx2S60EVqUPW8t1PorW0jbXJG3TGjEeWlHYLEme8d7mQaIT1001f174oEY9twCvgAd5YxmLFCZyaGrqvleFOveUc221DTKkgYdC9k9oAjr2qAyV4J7A=w2206-h1378-no" alt="http://localhost:8080" title="首頁"></p><h2 id="起始-NET-Core-3-0-MVC-專案"><a href="#起始-NET-Core-3-0-MVC-專案" class="headerlink" title="起始 .NET Core 3.0 MVC 專案"></a>起始 <code>.NET Core 3.0 MVC</code> 專案</h2><ul><li><p>安裝 <a href="https://github.com/dotnet/cli" target="_blank" rel="noopener">.NET Command Line Interface</a></p></li><li><p>新增一個 Core MVC 專案</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new mvc</span><br></pre></td></tr></table></figure><p>把產生的檔案都移到最外層 (跟 Vue 同一層)，如下圖。</p><p><img src="https://lh3.googleusercontent.com/W203GfdGjLI_7ZhUUZjmE4LYVKs6AFGNMcVohuF2E5_eQqKQrXc_ZV58HCPvQPjwBuxBPZEplhsJ_-WrPJ_nH_5OgjijEFAcZsStz2-ckatWBngIvgpo4p1pWPt_o613hObxX2CS9jz7g9zuRqIyQH5CAwrF8pnQAvls9fHvsnL3Zzuy6mqCNjzy9H6C1KJTmA7mdNbSJhtUr6JqNjFuw1hWgEAyVGiDCJNcNnGFK0zi3f74byGEMh_K7ymwRv6iJUhXN74GwTRMpV7r_jZIOrs7AOv10UhezxHhKFvkCe_ZZ0YbhohieE4LmwiAzL-urryjpLE95apTMTf6xRIRB8Gv-0lX4UNjC4MN9CI7jwdGklQ2djXDnmfys7rbsk0p6a5gr3dPsD-98pwTC3I--LmngPdBjOR6QED59piLeKbeQ4N3QG0L19JW6hcF0liPvdEwToC3psjUiC-jYimsUK6jvxU2xlyMqAIAtjm9fLCmnFp5kfMH_qbihmO9dQGnpmsYx_rCQqTXrfmODYvTL1LwiMBRe-Hp_twIBHB1S6K5XtCCk19SLYHD7VEKKK6sfAcawo5V4Ohe_yJ8Phxkod0rhXv4KSvlYdD3iJbCLCFhMhWgyAIGhZTcST0lDzUhxz5L8TKZRa5hbHA8kjw7hNlnjhYm5b92HFetGcwPbTi-3t57nL9C0H2drgjwqOBh8m8Zwh5l0QDdBrdToOQg-PKII9XK0eMh5oriRCvgjjaP_H14vg=w614-h1208-no" alt="專案目錄" title="專案目錄"></p><ul><li>刪除不必要的檔案</li></ul><p>因為我們是 <code>SPA</code> 不需要用到 MVC 其他頁面的功能，所以將多餘的頁面和樣式去除。參考如下的資料夾結構。</p><p><img src="https://lh3.googleusercontent.com/_6YDysh2v7AoOk4y82teBx4qsEXdrEvO5y6LKda2Vt87eLX1RCRfXOIaFhHK5Iy7OsBCkzdRehhB7-VsvrRSUWZsPO9tONVNw-c1pwcsrsA6wOAMn-D22zI0gQa2DrEDmBYttUore2G0kNtZkGaLwt2LQMuK3Zs-8cOEyHUPy1nnWD66GVUNozqty6tNTGmyIK20sN8kZpCLEikfEYunKI3gVlT0G5UfEmVAJ25VlKUbkziTEPwTDtwxvBmz6qlPbcEKXNSOLAe-zAeYR6b4-yTPFifwmiNrwdHEebD3kkZrYdfCPO9KFw4FOFQpNHkrGP-LxbeXCnatvDzMA0k9A81iHtVD0t8_9vkfb0lBvm40S0sFTvXXI_kUW-ncr639iMkXZ66v55ZXWOMAUL3trWESyUZ6FPMtiCzUVZRNlR0kfKV_CmgLivBugJxl696Vh6MPbUWcAwr3dxBnU9Iwvd5wHad4lpGbDEF2GTSzL8ZV1Hh8HnwLiGbqqGfJzFs9O8sgsa4dDJAnQpwCuCTrJJbk5KmMNPLR5tbiSyY9MGz1nbkCYtrtSNNPro_OsqiG3uMNXm-tCbtUkTjGG953ULeTY45NQqPwVqugKu3T0t4DMKjEJvoky0IBUOd7hdoTMgyRb9bMMJMedWyAuoFLZwM5Ar4qOZ3Um-nmQ2HA-lp4GDG1wO9rbxk4Sh2Ng8WR_rzH9Hnwy1DR8qFrXWv4E58WrzfK79A01VcCgBkAyR74bl9vUg=w620-h1248-no" alt="刪除多餘頁面和樣式後的檔案" title="資料夾結構"></p><ul><li><code>HomeController.cs</code> 刪除多餘的 Controller，只保留 <code>Index</code> 和 <code>Error</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using Microsoft.AspNetCore.Mvc;</span><br><span class="line">using Microsoft.Extensions.Logging;</span><br><span class="line">using dotnet_core_with_vue_cli3.Models;</span><br><span class="line"></span><br><span class="line">namespace dotnet_core_with_vue_cli3.Controllers</span><br><span class="line">&#123;</span><br><span class="line">    public class HomeController : Controller</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly ILogger&lt;HomeController&gt; _logger;</span><br><span class="line"></span><br><span class="line">        public HomeController(ILogger&lt;HomeController&gt; logger)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public IActionResult Index()</span><br><span class="line">        &#123;</span><br><span class="line">            return View();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]</span><br><span class="line">        public IActionResult Error()</span><br><span class="line">        &#123;</span><br><span class="line">            return View(new ErrorViewModel &#123; RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Index.cshtml</code> 多餘的 HTML 刪除</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>_Layout.cshtml</code> 修改內容如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"~/favicon.ico"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dotnet_core_with_vue_cli3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/@@mdi/font@latest/css/materialdesignicons.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We're sorry but my-app doesn't work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    @RenderBody()</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"~/js/app.js"</span> <span class="attr">asp-append-version</span>=<span class="string">"true"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    @RenderSection("Scripts", required: false)</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>誒～你有沒有覺得明明我們把 <code>wwwroot</code> 裡面的靜態資源都殺光光，卻在 <code>_Layout.cshtml</code> 上面放 <code>app.js</code>？因為這邊是留給 Vue-cli 去產生靜態資源，所以我們接下來就要說明如何設定讓 <code>.NET Core</code> 和 <code>Vue</code> 做連動。</p></blockquote><h2 id="設定-HMR-和-vue-router-的-fallback"><a href="#設定-HMR-和-vue-router-的-fallback" class="headerlink" title="設定 HMR 和 vue router 的 fallback"></a>設定 <code>HMR</code> 和 <code>vue router</code> 的 fallback</h2><p>接著才是重頭戲～如魔法般的 <code>HMR</code> 功能登場!!!</p><p>如果還不太知道什麼是 <code>HMR</code> 的，就 google 一下囉～</p><ul><li>安裝 <code>aspnet-webpack</code>, <code>webpack-hot-middleware</code>, <code>webpack-dev-middleware</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D aspnet-webpack webpack-hot-middleware webpack-dev-middleware</span><br></pre></td></tr></table></figure><ul><li>新增 <code>Microsoft.AspNetCore.SpaServices.Extensions</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Microsoft.AspNetCore.SpaServices.Extensions --version 3.0.0</span><br></pre></td></tr></table></figure><ul><li>修改 <code>Startup.cs</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">using Microsoft.AspNetCore.SpaServices.Webpack;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class="line">        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)</span><br><span class="line">        &#123;</span><br><span class="line">            if (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">                app.UseWebpackDevMiddleware(new WebpackDevMiddlewareOptions</span><br><span class="line">                &#123;</span><br><span class="line">                    HotModuleReplacement = true,</span><br><span class="line">                    ConfigFile = @&quot;./node_modules/@vue/cli-service/webpack.config.js&quot;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            app.UseEndpoints(endpoints =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                endpoints.MapControllerRoute(</span><br><span class="line">                    name: &quot;default&quot;,</span><br><span class="line">                    pattern: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);</span><br><span class="line">                endpoints.MapFallbackToController(&quot;Index&quot;, &quot;Home&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><ul><li>新增 <code>vue.config.js</code> 在最外層</li></ul><blockquote><p>這邊就是設定 <code>Vue-cli</code> 將產生的靜態檔案放在 <code>wwwroot</code> 讓 <code>.Net Core</code> 去吃。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  outputDir: <span class="string">'wwwroot'</span>,</span><br><span class="line">  publicPath: <span class="string">"/"</span>,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://github.com/vuejs/vue-cli/issues/3603#issuecomment-483913563</span></span><br><span class="line">    <span class="comment">// remove vue-cli-service's progress output</span></span><br><span class="line">    config.plugins.delete(<span class="string">'progress'</span>)</span><br><span class="line">    <span class="comment">// https://intellitect.com/quickly-configure-asp-net-core-api-to-work-with-vue-cli-3/</span></span><br><span class="line">    <span class="comment">// aspnet uses the other hmr so remove this one</span></span><br><span class="line">    config.plugins.delete(<span class="string">'hmr'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若要使用 vscode 跑專案：修改 <code>Properties/launchSettings.json</code></li></ul><p>修改 <code>Properties/launchSettings.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"iisSettings"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  "profiles": &#123;</span><br><span class="line">    "IIS Express": &#123;</span><br><span class="line">      "commandName": "IISExpress",</span><br><span class="line">      "launchBrowser": true,</span><br><span class="line">      "environmentVariables": &#123;</span><br><span class="line">        "ASPNETCORE_ENVIRONMENT": "Development",</span><br><span class="line">        "NODE_ENV": "development"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "dotnet_core_with_vue_cli3": &#123;</span><br><span class="line">      "commandName": "Project",</span><br><span class="line">      "launchBrowser": true,</span><br><span class="line">      "applicationUrl": "http://localhost:5000",</span><br><span class="line">      "environmentVariables": &#123;</span><br><span class="line">        "ASPNETCORE_ENVIRONMENT": "Development",</span><br><span class="line">        "NODE_ENV": "development"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若要使用 npm 跑專案：<code>package.json</code> 指令加上 HMR</li></ul><p>安裝 cross-env</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cross-env</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "hmr": "cross-env ASPNETCORE_ENVIRONMENT=Development NODE_ENV=development dotnet run",</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行如下 npm 指令或使用之前寫的另一篇文章方式 <a href="../../../../../2017/12/25/DotnetCore/NET-Core-2-0-Debug-with-VScode/">vscode task</a> 來啟動專案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run hmr</span><br></pre></td></tr></table></figure><p>成功的話就會從 <code>Chrome</code> 開發者工具看到 <code>HMR</code> 連結成功囉～</p><p><img src="https://lh3.googleusercontent.com/iwyqGKY3x0PNLHZvmRMQxAG53ta1MNkplE5rDHIwfr884IxIPhOlHaZwUzMdPS4B5MvWrK-BzP1afJMnZkHfuwAGJ8szM1VJmqo3BkZZs9GN92uP-zTk3oS7spcGo8DinPhbi9M7TZJkku95nzIxh1UIebtussfopG1byaWLQOna9wt9_CK8tiSyugr1A6x0bPG20SsAO6--hwmNa4SiODAyeTeADmMs1dtrI8d-6gDvtULip1yljjzKfnDm2iECcreinLfD3mUyUkAaW25-jzyXpa3dQ5EokLdx9JNVVLWM1kKmeadHGdcPNXEKJIaWK8TMFuxjRL6YiiwPeRpEMXSHGZI7Czbaqxh1GJmdBCejLIbWaOy-NKuqKJ37_Xf5FVFTnXlEyBZs3yAfr2pNtBgbk9SsZJvB1ljszKOE-CwhXmJJinfBpJ-kGd2Lh2gsQwo2JC6_frvi3uv3gl9LVhBQC6iZdawwvwTveTr_E4X7Z5-P-EenyBMKUV6IRoFUE_b_dfPZlPYMBCD8UBSau-F3Y1HZNAIihor6R1o4c2RSKF01GWXq62HBdnlQgX-94mNkj4noSm9dHaErDzTOm0WUwJVw_SxfdFB3_2aP6ddi5ce2mxHiiau5ajes_rvFBuMlLAmwIOhiXR1KwdBdS5hqjTB4rdGTGEA3IYqlyLXtLdFNzM8iuMhZvlFra90dpXFlLvYBGCitsQ8VTQFc4ukw1Di0HvdY4cZFsLulfcTv9FhEAA=w1780-h1112-no" alt="http://localhost:5000" title="首頁"></p><p>今天的範例在 <a href="https://github.com/Annilla/dotnet-core-with-vue-cli3/tree/v1.0" target="_blank" rel="noopener">github</a>，下回見～</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices.Extensions/3.0.0" target="_blank" rel="noopener">Microsoft.AspNetCore.SpaServices.Extensions</a></li><li><a href="https://intellitect.com/quickly-configure-asp-net-core-api-to-work-with-vue-cli-3/" target="_blank" rel="noopener">Quickly Configure ASP.NET Core API to work with Vue CLI 3!</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/migration/22-to-30?view=aspnetcore-3.0&amp;tabs=visual-studio-code" target="_blank" rel="noopener">從 ASP.NET Core 2.2 遷移至3</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有寫過一篇 &lt;a href=&quot;../../../../../2017/12/02/DotnetCore/NET-Core-2-0-SPA-with-Vue-Cli/&quot;&gt;.NET core 2 + Vue-cli 2 的起手式&lt;/a&gt;，到了2019，兩者也紛紛出版本3。這次，我們將說明如何用 .NET Core 3 + Vue-cli 3 起一個新專案，附贈最新 &lt;a href=&quot;https://vuetifyjs.com/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vuetify 2&lt;/a&gt; 的 Material Design 框架。&lt;/p&gt;
    
    </summary>
    
      <category term=".NET Core" scheme="http://annilla.github.io/categories/NET-Core/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
      <category term=".NET Core" scheme="http://annilla.github.io/tags/NET-Core/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="Webpack" scheme="http://annilla.github.io/tags/Webpack/"/>
    
      <category term="SPA" scheme="http://annilla.github.io/tags/SPA/"/>
    
      <category term="MVC" scheme="http://annilla.github.io/tags/MVC/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>Serverless Azure SignalR with C# and Azure Functions</title>
    <link href="http://annilla.github.io/2019/09/10/DotnetCore/Serverless-Azure-SignalR-with-C-and-Azure-Functions/"/>
    <id>http://annilla.github.io/2019/09/10/DotnetCore/Serverless-Azure-SignalR-with-C-and-Azure-Functions/</id>
    <published>2019-09-09T16:00:00.000Z</published>
    <updated>2019-09-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次接觸使用 Azure SignalR，順便玩玩看雲端託管的服務，那我們就來開始吧～</p><a id="more"></a><p>因為我習慣用 <code>Vscode</code> 開發，所以下面說明都是以 <code>Vscode</code> 為主。</p><h2 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a>安裝環境</h2><ul><li><p>安裝 <a href="https://github.com/Azure/azure-functions-core-tools#installing" target="_blank" rel="noopener">Azure Functions Core Tools (v2)</a></p></li><li><p>安裝 <a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener">.NET Core SDK</a></p></li></ul><p>查看 Azure Functions Core Tools 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func --Version</span><br></pre></td></tr></table></figure><p>查看 dotnet core 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --Version</span><br></pre></td></tr></table></figure><h2 id="登入-Azure-建立-Azuer-SignalR"><a href="#登入-Azure-建立-Azuer-SignalR" class="headerlink" title="登入 Azure 建立 Azuer SignalR"></a>登入 Azure 建立 Azuer SignalR</h2><ul><li><a href="https://portal.azure.com/" target="_blank" rel="noopener">Azure 入口網站</a></li></ul><p>新增 SignalR service 如下圖設定。</p><p><img src="https://docs.microsoft.com/zh-tw/azure/azure-signalr/media/signalr-quickstart-azure-functions-javascript/signalr-quickstart-create.png" alt="SignalR 設定" title="SignalR 設定"></p><blockquote><p>注意：這篇介紹的是無伺服器的方式，所以 Service Mode 要選擇 Serverless。一個 Azure SignalR 只能選擇一個 Service Mode，所以傳統的 Classic 方式和 Serverless 只能擇一，兩者不能共用同一個 Service。</p></blockquote><h2 id="設定-Azure-Function"><a href="#設定-Azure-Function" class="headerlink" title="設定 Azure Function"></a>設定 Azure Function</h2><p>1) 開啟建立好的服務，複製主要連接字串。</p><p><img src="https://lh3.googleusercontent.com/ebUg5MNe8j6YLI5O56lihd2NTFy9SHkFwW0WZdZnz25HzlKWkEpveUnMpfw9Og1Mkm2wPnqATYzpizjHtt6onCppsz7kRYnrXE-DRBapeoxUwNJLvjKR7O8nkZzNVu37tdUtRXIqFCluv42EXrrKaCQbWRKEfsSFsotts0AnmxXqpyEjB7gKkDUngv-Si0OX8UAy4nH2t5oc1uJumiSBkucK4djsxN_QQVLuBjXlFlzN1-lNt6x3j-KlraBvkCf7J9wLB7cp1_lOMldLoK6bG5ixiKebGTJly_gfZ9J4HN2JF0OCPP87eI4QsGlVPprfTGwgw6swCJaO4TiodAj0zzgPq8SX6qmCE7fS7-1gSDLK1hzTNedZ5EzcCTblltvhdsOuxgSJFc464UYaYcTfcwzZ3377cg9jzGa4ijNRdFRGHYQbvdssgoMuxA8_gRV3qmtsssBOQzKhRwFriUOcR2Mk2RnJEzCknPvIhDDq_aDuO0DJvUr18p4zLV3IK3gdawQtusInwbLdySAFB6VGiKoPK2xP6IJA1RYGUIWx3a7uEqX3KPpI0OjVY5lORd_rtCzv2m69xRSB_ygGXHYVt1_Mr_MsI-vVbpOzZtPob9L3BljtzaWXYBaDaFMeFGVKKhTHR_Gv9i12qfSZCi1j9pffRE8uAVRTmJVYozGlhqffUtNkUHxaDsO2=w1035-h483-no" alt="複製主要連接字串" title="複製主要連接字串"></p><p>2) 複製官網 <a href="https://github.com/Azure-Samples/signalr-service-quickstart-serverless-chat" target="_blank" rel="noopener">sample</a></p><p>3) 進入 <code>src/chat/csharp</code>。 將 <code>local.settings.sample.json</code> 重新命名為 <code>local.settings.json</code>。 將連接字串貼到 <code>AzureSignalRConnectionString</code> 並設定如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"IsEncrypted"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"Values"</span>: &#123;</span><br><span class="line">    <span class="attr">"FUNCTIONS_WORKER_RUNTIME"</span>: <span class="string">"dotnet"</span>,</span><br><span class="line">    <span class="attr">"AzureSignalRConnectionString"</span>: <span class="string">"Your connection string here"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"Host"</span>: &#123;</span><br><span class="line">    <span class="attr">"LocalHttpPort"</span>: <span class="number">7071</span>,</span><br><span class="line">    <span class="attr">"CORS"</span>: <span class="string">"http://127.0.0.1:8080,http://localhost:8080,https://azure-samples.github.io"</span>,</span><br><span class="line">    <span class="attr">"CORSCredentials"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：Host 的部分是在 local 測試時，為了避免 CORS 的限制所設定。請務必將 local 要測試的網域加到 CORS 的值裡面。</p></blockquote><p>4) 開啟 Functions.cs。 官方解釋如下：此函數應用程式中有兩個 HTTP 觸發的函式</p><ul><li><p>GetSignalRInfo - 使用 SignalRConnectionInfo 輸入繫結來產生並傳回有效的連線資訊。</p></li><li><p>SendMessage - 在要求主體中接收聊天訊息，並使用 SignalR 輸出繫結來將訊息廣播給所有已連線的用戶端應用程式。</p></li></ul><p>5) 啟動 local function 測試。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func start</span><br></pre></td></tr></table></figure><p><img src="https://lh3.googleusercontent.com/3504Bocz7haQ3JPmdJwqa2XwHdc_EhIQpmtPqtOftqxaQUK5qLHeVAaSz9JNWpEhD7ezP81kEeq6LB6Loa2aL5OIYYWVjjA4GwibWVIl_pbw_BAN9IyZfTBBvmE9Vz-NRljNw1h-6deKZJZLgWT57tKi5I1ml_PwuOFGL0fh1PHbrPq6VC8YyVchEb4l0OdFYdpFz2h14pJMmelh0jV8M7lqQrIY4aK-lN0ttAn01wQZWh7nnXO-aVhFxYVdI6_-SKoDsu2LnFscOqb5QohvLZkFF3FzgPzRqraWwE4F-KRgXrfk1JPrh0r1qB0yAtu0VZfdbwk1PSXlhnabxHVn6_F0Z6pfrcaASFIkQHzrIonsxwPQm40_W5_BJvRxWCxVHQJed5--C4226IoeDXHRu3jevGzWButrAGJq0s9bCDzrmDg_u9MNKP4klPgZDmmLVfOrqZXAIOhrXmiEOvUSPdUXnIyOOzo0mtU7sFyqmf3UnCk7afZQ3uR8gxGhTSEBsVSl743Csc2-Xp84PJ4xWsmwxfi5vxrPRv3NVO5LQ6v5GB_vx49YCqaxJjYv5tZ9Fd_Hq_2S4MhASR5fSGzD_TzReNfs7p0KM333949JNKUb-e2-nLCkwxdHS0Yk-AZKQ70M-bZTUVu3HElg9UrkfqpdMyu4LtzbiimLqIOGyekCOD3FqShQ8r9q=w2206-h1378-no" alt="local function 啟動" title="local function 啟動"></p><h2 id="Local-Web-測試"><a href="#Local-Web-測試" class="headerlink" title="Local Web 測試"></a>Local Web 測試</h2><p>1) 因為瀏覽器若打開 html 頁面會預設使用 https 處理。所以為了避免 CORS 限制。請安裝啟動本機的 http 伺服器。 <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank" rel="noopener">Live Server</a></p><p><img src="https://lh3.googleusercontent.com/91mzygWcGmu3ljW09OLhtTAfv2Ugb589jczgciy3mOSuWbCUBjOAeN2BUA-MgYWzRbaoXFWwIqoUHqzcykEA4Aw4odpSHDSboaTWxYYpnTT8CmclxtK9t2HYZWUF4HlUKk806h8Jhq3iup2I414hAKpWCtcKgPidv64aPwucq3GYS_ZKsTXudLB7MIfK0wZ_yR47MscN_9ne6KDJvzv3EU4T-1XNMJZdu6ISqzgrUUCgIh-hnUHeSUH6Vy0M1Kc4rNDjBnp14xLA899OhmeZJiB5xQ5UKbv9Icf-dT3yW7qQRSgxWnMvMWgyle_DdmFSYwLJTqMjLaCnBF_LZiS1bJMfDcuctigjp3lqhy75LDcVssUs55sG_8qmd6zgY1A1PVeEbc3faMfQwM9ANDRZA4GAPLFTVYfsp5wVR6cCkYc6tehN7Q1D2DhTrgoJCZ55r0-9nsG-uA11nh5Lmy9Fe7TmPMceVqZXWYYqdP8Q35UHa8Kgq54dfYLjJ2PLOisuHzurd-qQes4NQfhCvsnsXW78VL-UsaW29tFMS_7k7_NH4X9DFNP7oUBsv87ISO_kpm0VWAylbsilxbLT8n5xa57q3USTJuBR5e6DYixRM0L0K_ElogvfiC2TMmYg_F4M5j_Fmg-VoPrxzIt4u6CQ9sNJ6ExcujX0ZEth-aiguKyQNlK2xBs2x9L8=w1908-h938-no" alt="Live Server" title="Live Server"></p><p>2) 用 <code>Live Server</code> 開啟 sample html 範本 <code>/docs/demo/chat-v2/index.html</code>。</p><p><img src="https://lh3.googleusercontent.com/AgiqJicbCJPOqOd7krSCj4eoQulKtewUr71Gs67h-Z3PWiWpQT3hUguVvqQ_Wbsg82SPMZ6Cq5BC9BLN-YkgZQTf1l7JRwd3k5l0yfztgG3Mb_rRUps_ozF1ebzft2z4rst0i4xcEdY453CtVWWHIfkpl6iGgAdDptdUUDfeWvytYg8LEZX-Z9mpkyXI79oI3sYcXVgloKf0FH3ArfwUquBNNwQEUano4e7PPOcYkvXP3d0v9eO2JvayxYfc-c3WSSHEj4rPbx6SvlbZa8O4-0Q_x-rDQuLEoa7u7kCrBnIdaw0xbRxRBhPiGGxbYUJ_s3dBstI4DKzDt-wyJyKBwwV8K5zhfy5wwx4E4grg9NVZf9dp0l2-DDoh7zjHBLCpgLU1-YdmLKp47cmwxLPA7-FnloIsldbLrBS7hv3OQAfDMEb9o8_MQb_44ELsklUVY6wSo6rY894Ew5Wmu24CBd5UbjnO_vjOvvtKNPZKrnDmvnqmofS0x1Kk-Qzy5qKgZ4M3xXt8NAwGm6qa2Xi2vTZhKwy-ApKzBz-VqaOE1VWNW4cCgUZCh00MBeYxWSCdeJOrQlHgkW_tP0zuBBZFxu88siuX6ZTxq3mpVNa7bENEjPJjCSpxMXQemG-CqhQCnGZJTBkSUArTNUSNRDaQ4jixziHJURlhdZlS04s0MGEjPgsLJGM_RKkR=w2206-h1378-no" alt="開啟 sample html 範本" title="開啟 sample html 範本"></p><p>3) 自動開啟後，務必輸入 <code>apiBaseUrl</code> local 測試為 <code>http://localhost:7071</code>， Name 也是必填，請輸入聊天室的使用者名稱即可。</p><p>4) 成功之後就可以輸入訊息測試。並能多開數個分頁，測試訊息的接收是否正常。</p><p><img src="https://lh3.googleusercontent.com/PYziZWr5t2kOAe9sp4dAJ7f9RmUy-MVlPhZqyus33kJyLQIj61CocH4Rdj955TFA1SVQXZlsSqDhZtafBG5Z25vcLlq28mHCp8OnbxOqh65P81rNFxOH56SfUkJ91ha4KPI8ZHzzSk9zArbDgBNE9iM9NjTZ97lsDsbyO9kuqLDpuj2emQ1r9ak9iRLQXAotahmAelkr2dUiLCsbCphjQHX_fZA9k9KAsAmt2Rq7s5eBTqoHr_V3ZPHemP8QHJg41cHBMfLMwxaKKxqh7PtubOq33yRamyEsrFBfEi8mWAPfLTYmJbGD0izpZEuG1fhBamxoRt175Tgjv6qEIrwakqNQyBn_LnRoQCXYsntJ0XaWDka9yM1Vk9g4zeXp9Jdus09p3Gyj_ACYL98ESUffg8ifDiOPy7cAeFje9dM_FG3bQMtNBLn6Rq8BXXOcERuYUunQsOyalskX_8rnrfvDFGNm9I7Lm5y-wUMw59DmiuvvZsftTtM8lzhLKJDPziD1a_r13RhjLlBo1vfXM0Iq8dsGGe0G4KbinGq4kLIIx0rjg_BDDRQwQUThCUzpOVkYzkKPr7zyFTilAaZAsOeF_k54MrnLVq0sBPCUNN2EYUxI-mzWuhEtNIOzY4K-tmP1AtljaQeVRYnuDp-mMbmLfPW-2PiSf7iSlu6B03DhIpS3EfbFHW0xKEUH=w2532-h1246-no" alt="測試訊息接收" title="測試訊息接收"></p><h2 id="發布-Azure-Function"><a href="#發布-Azure-Function" class="headerlink" title="發布 Azure Function"></a>發布 Azure Function</h2><ul><li>安裝 <a href="vscode:extension/ms-azuretools.vscode-azurefunctions" target="_blank" rel="noopener">Azure Functions</a> 擴充功能。</li></ul><p><img src="https://docs.microsoft.com/zh-tw/azure/includes/media/functions-install-vs-code-extension/vscode-install-extension.png" alt="Azure Functions" title="Azure Functions"></p><p>安裝完後請務必重開 VScode。接下來我們開始發布 Azure Function。</p><p>1) 請務必確定 VScode 只開啟 src/chat/csharp 中的 csharp 資料夾。</p><p><img src="https://lh3.googleusercontent.com/F2CzlCEtvEpCrmw7V_8x9zWfv-OYRpzWj18QN-HL_WfF6s3XCH8u8FW8QStEVeNvXCI6PDmPNKPdLolL8Vlh5EvtSYJvuYRpCADBrALiZIy510xQPTNSl4vZAiwWfFu7IXTGn9sIINa8YVH_ya_KRfkSX3-_5EvsFNJOwyQna6Itv0IaqDKpR2-TEOADt1-FN73D1WyTINzPcd3xS2IYk5EKJrloZPO1Jbj3ZlXxpvahgExMM5uxUZOR4X49neuWpuyIjxVzjdAKvY4ADg2W5cdBvQG-b02xAer7yQ6k4gB15eI3_d98HWArt-FDrMwt5EP9foIFU-dBT5V4B-C2-woI0MejtaK07QNZ082ahzsqV7odBCUVH2u3laLEVGzFRhAddf1DhpDobOQhk4-IB3XG7kYiRiWXr4lco1JTCYTDhy-TxgyHSpUsyMxtb8f--kjdQ5y1IF_uGQDRhF7dFhEUKImOFRj1Kc7sypo4uMS07dQAvFm0Nt7G5xX-IE8QOKjmgNrvOypegpsFswjQ_RDyd0YuT21ioMs4oogu8qEdanhGBc_9-lmbxa3Pfe_P2RauuKrczEJ2zIZlahNBP_e3CsPQqy1B5FwtWWk7Aej0GkqHLwJ7HmTi4oC6cH0fXQzz2ATYuSKg0VsPPeh5PGAbLsQZDZIipl1ScojTL07PltVv9ZDBYVwn=w916-h898-no" alt="csharp 資料夾" title="csharp 資料夾"></p><p>2) 從擴充功能登入 Azure 帳號。</p><p><img src="https://lh3.googleusercontent.com/3ycoKSgCD3L5bhujgJ_qsAaR7iEmu-cDzoi3GceJ4nRtwqz9Sh9ZCNXXQ8nvcuWIUgm4mezj76JL3t3dy1lSdIi-74oqXPTDQYxol0-kaSbF5YTSgsdGI2wgSe_TN4g3UToGBBZdBHrGl9Xw784YIbzI2oFFgQ5FGaH2v3-1JkYpHJB1tde5NdND30pRpnwrbFzotRiyxOyt6lBDlWxuBbSpfIDISQa8Ya-sO79Z8r8cl2RMywRmX3WLVBI3OKVl9Gvi5OJuWmoRyb6jIfeBAWM8i89h5rwdEpCVkXvZO1BlxXRnIrp3Bo4u_EMLkC3VZb9G2KNlVkXgVel-6dL9IqoJ8oVPvorFZMV_sgZwW2_C_D6TH_1SsOs3OVlVT8lwoRjY4RGDJbaQzi7QtfZXfGk5--aTvDw7AV25IP0grR_qAt9X2_SmU4tjEWcjTYN6wG6a6FrQsRhbLhhGC1QOdD1NhyMC-tXZhz9XXuwKyC58CHc_ebYMGogv1PUuqhEy0wMrtKKtC0ZxhGZmH52BcjBrp0fIkp5JJIOeaiZelgAQLJ5-PpAvyY4OpDmSUnJle6hKAHFh6UmCFAu3v1bK4nS0zILSiPobyLEnwrkMbHAJzr44wOMTSVQlsa0ogK5GqER5NNRCACJ-61ztnUEEvdLGN3AhkWmQiCk2ya0YEECjl0LeXGuHk72f=w463-h431-no" alt="登入 Azure 帳號" title="登入 Azure 帳號"></p><p>3) 選擇要發布的地方上傳。</p><p><img src="https://lh3.googleusercontent.com/g-Un1PRQE8Npznb4Hhi9gK6Doc7h4nunpZA3zKMEypcb5j5Ks54x20lEc2UeRykR532VeixY7u11THtW9HeALTz47SUBzzvE6vYzKZxg56VCa8GugLdxRDxvkDu0x6rZvvilshkKnPhsaNCsWEM2IkWSR3Nj1ctjhoGhn0gjjCTPz63muznRew9qqt87p-4ozb8EVNuHwIkJpCvG99uRGQ5L7cdaL6rS-CMmnJUB4EjyM15NeVCKJRpeiYJHkRnvuO_OhqLRhAVYRNtiFywIfnSviMhR1TU9XHYkq-IzS2V8cJ0FRw5u1FE9sF1BE3tjFNiuGiogDdVZ5X4JaGenHgYQU6TrACnF0I6xkHdC9oKXzXvaDgrQGos5UjNytVJeikB6DhCo0afU5vz1Qjtdn8sNRWqEAJvFAfYzVjDNtLgESZQ-ADAE099ID81UPDTnzbVYjZA8zCBkBZUNwQQOplIK-Xft_6cCFQtcsZx-ReUUJnma0MuhTd866gyM4_07eadyJ3ahZAQCZG73AvpUzxRIUsRpgjJ_-lGeEumg_CMxbF0QdEbvZfxriX7azPOitHPKC8YuXhcMAAmmD_3IEpp_VAVyadbRHWBzPtRvS8pkuMN2mFDlY1Kkabuwo5gvHF1FE9PyNodyni6pMPIJ4d2OOT8UO_5e_26Pjxsp5FOnO1nKbV5UPRqy=w916-h402-no" alt="上傳 Azure Functions" title="上傳 Azure Functions"></p><h2 id="測試連線上-Azure-Functions"><a href="#測試連線上-Azure-Functions" class="headerlink" title="測試連線上 Azure Functions"></a>測試連線上 Azure Functions</h2><p>1) 拷貝 Azure Function url，將 html 中 <code>apiBaseUrl</code> 改為線上的 url。</p><p><img src="https://lh3.googleusercontent.com/H_G9dyo8H_V-04HnuKLeYz_RIzpELVQEeIU2Oss1BgV4kb0ih2rs2ihnSG5V4cBpF27Bhuax9uA3jrh5jzi4NXG3xJR8g16s8Nksmlp7Q5zbI6JBkepAhstRwqkBhFiTtt2jAwGlTnWy1TXkPOqzjD8ejAxMDZYuR1Tsrrw9lHCxdicNe233wUwB_9T9Rj7CGP3SM3VvpYsBQ2EBQhrFYyCrEd7bHkMNT7lkuT1CIGT0eniiMKF5r8lmI3JWDKejkDnDj-Xhk5FJ8GhKIpbUTqfbGoYpmRCvhXkXGlPv_225nceq7FJjLbP47e7d0Xyiw4DSfpY4-eLzFQ9Pk1A36sw6u-3kko-FOEWx9hgm2wFkgUn8W-VG60dkn-edy6xzzVBG60BpNBtFU566ckPtVMv0BVtr6rcyTSghwv2BY3iJ5NNQNYl2n9wzDxGAhvp8USAVfkkooBvzISbwUHFE5mdAujs-xyUaQ7JGGwZEP2gpj5UrhW1mj2FKEtuywYk_HW02qkLII8igNcPqbHSy2xKB-hjsaERItaiDeBZvhujagZOWVhYDqdA6MvgfHm9IC8Dx2T2TtZSb6HsTNABrbi3tcRLbiG93_egs5jCaeLvkgA0yxATUZNXirp1z83sRtolFWzJOKeurzUtbT8qSlTkelW7UmZGEblCO6egJM9Oz7e-L4QE8mosh=w988-h371-no" alt="Copy Azure Function url" title="Copy Azure Function url"></p><p><img src="https://lh3.googleusercontent.com/6knLBtYnBsO_4Q_JDPw8eeF1ndcFzBRIKrQPXxJY1XU-e_Dtcsf950sXVO5EDI6CsFwAcMyQ_C_noV8rIb-tWuQZaSVgYTV9-PAn8BHzHShn_8oP_nF3-ix7-6bTR_Zd8ABaSYk1mo3LN6bED7uxK0U9mTY36PF53UpWKF018lOsSezcpuouyeM_qF8TPOsuZ4T4t2V7QBc6NM8z5qXVC3uDLPUrQFQwfegIKE_8k5kPgHMxNTPOoVChCf1k4_YEIxQDJUvGdWa36rI789G10b0VHjzCQxS4vRROdTKJ3p2nNfhDd1LxTvsuUGUnIRvcK7wozQ5G0j8hsxCv-xQJ29dgQkG8nhM8RrBX4oz4Na5_169tKWRUIbIwsJQ55UugbqxpM3OC36-BmvxZ9s3cz9ROJ4cYCkKVnREJyXo4gGMFck_h0XYxJe94-I0LXQQ3A3uGATHqRgl_CcE-1xISolLp0mYvgKpOC6XuDiZH1tRGt0xSInHwnZYuMc59fBawXeiivDGkIjacRbbUsHKr0RLPQtb6eAW1MUyVpOVMhjTQlcNWUJ_Vbsy6VtprtIeolwbUQQSNgqRSemMaS_zPCH1djV1gG-94h_8wOcm_phJ8AkfKmN1elF_gB8WTMPFvs9etI30qy60U4zba4HU2tlFYE0OnoyGHOlvaHzjBSj4Pm7zHJ8Ben9tG=w2192-h880-no" alt="修改 apiBaseUrl" title="修改 apiBaseUrl"></p><p>2) 因為不同網域去打 API 會有 CORS 的限制，所以需要將測試的網址加到 Azure Function CORS 清單。</p><p><img src="https://lh3.googleusercontent.com/QrDuwqSA60bt68i0DoP72Ci94RwvCX6hbD_cjb-yYHhAzBboVJxMZzYIZ6lMgkZAlcv3wyBfBx9sqxwsnUpKwsB9HU8cmQiHCDEnHHLaf5ZsIe5rXI6x8yPAifMnei4xjnRoR5qBkTWoE4jw7gwIE7aDoQeu3VnWTLAndv0-N5nmdY5FoBp1h2ESAM6rvoYYdwxvyWJSJq_xaq43p-koGaoOlEyxfeiUuVGNfPadwjWg9mBAEXFNp2pBa84A4OOd6dfLX1Wzdm1cWgwRtzob9-bF1GZT8f7cj2hl2WMRdhQaP-itxxoFcSVut6uscXFkN1G93Yr7ckHLeiM04jqcMWUdf5IkAtfEInI9lDinK9gljEDCRe8xHCRewByz2Fbp6eSt_RA3RV6FqBi8-VaIuBn0aqlBvPrP7HC4lfFLqy3tdeh7T_afav5Cn2rPn6YuTn4eFGduKK6vvslTShwT208Nl7VE2I9-p9IF0Hndfty1uINjTWP66RRhvpBo40qFSNR95vDw2pGXY-QCEvZinXOk5-YK5RZ6-mmXxc-B5D7mjwbR6u0fiX58NaIL2Wce1hVkraoycTOg2Q1wN25L-OwN2zLmTe9KbwQJ3lqoTsAGuq_tGz-nfHWLpf9cXaqYX3YvEqwN2BwNAs6YKyYCnsR65zG5FlzgSM5UERmDd05BXpI7mnDlhLKF=w996-h574-no" alt="功能設定" title="功能設定"></p><p><img src="https://lh3.googleusercontent.com/Rp_UC6QBZeSOB_6j3kFgK-w9aZNOhE_oybskL2rkFZSdEFYrrfnylveIY0fX-wv3wODLHZyD8AOu2IUwYZebGn5Z7r_rx1jNg61SVDRhuXDYKoLpz7WTfCkcrlZqUx2iEyYJifDtSjDE8GtWehIa8QhwbX1Bvd5qV2vg3Ib5opXrbirNkPy_u-LACXcIrb2ppbRJgs18C9KQs-PY1EPOq3L0s82tpCNkDgGm7vXPVzxcof5zYRpF9VEWumxKadf5a080ALj2oqP6zmZsKJNQdLNzVr2xX8GU-n37TijB4G2masD6i1M6LcSxupOoO038I4nlYutuCUfAy4zp4VKB5xX6oFpX1cXePexfH0Lcdak1yjxSO9r53B_ZrbDC3GhG98V9YehQ7ONMzcy0-vEGyijB-D5mzP6FMgDt6qQHOBwgjOt2p7DOOfHv3em8Z08YVcjb0PJD1hLCI6L28CynDIhZKmtVFAYFJnJytd8938x7xdRJ1p4Y0QMZSBDlXj6nj7uEbRcC082NGv9Q4HCjARts7YVkriMl6mmpGcXg9SsBJhfZOLaPl9_eUP2hAu2dntZpSxg9gOVpoEK3yohgeaXLKAOgqH55KDiAikDyw5e_Waqbvz3LqbfT3wR-z5SkYjhaK9nz0pZ4p59cnOkWqu_81nqpMHdGn0quQokoh-nO7WNgfZyL-7RZ=w561-h592-no" alt="CORS 清單" title="CORS 清單"></p><p>3) 一樣使用 <code>Live Server</code> 開啟範本，就會成功連上囉~</p><h2 id="把-web-放到線上-server-測試"><a href="#把-web-放到線上-server-測試" class="headerlink" title="把 web 放到線上 server 測試"></a>把 web 放到線上 server 測試</h2><blockquote><p>注意：剛剛上面都是使用 local web 測試。若要把 web 放在線上測試的話，需要在 Azure Function 設定連線變數。官網沒寫這段，害我鬼打牆了好一陣子呀～怎麼設定變數如下圖。</p></blockquote><p><img src="https://lh3.googleusercontent.com/_aALFr19DSl7A3vekHZWLNC-DKSZhWp44BLPoujaLFiCL6MDn8sxVNKZvw3IKB9-OmwOoxCHSa-ltJurLIG83osiLAaZeTjJxj8AlFnJBt3uGR2tyegFXkdoyxKpa1gDW3dZdPICSsCPiN4KMTlYAzSBdNEQoI3RnOvtkoNqruCcVph5qICYnAfBkGywtdR-dJjTyKKfuW8RZaFEPcHqqGhg35nibhg1jei8wJflLVHtN48vFNcsrAuyfGnziyEGjj-VxPocDb9ofJEHR8uRnIjL9qUOB-zGb9TA1j7Pyo1tV9UkuczX1KWXCO_jsd3rp-FDCAQ2dcHoLc6y9OagLkJSqGC7EJkaccgCuu1HRmb7_woIrvnIO8k5iYbvsf4bO7af8IBLgA-OFR_YlQpIGsXwoc1PSu-rMCGAEzSkhHsDNmTaCpyO-L-YLB7Z3vCOkavIMRpDV1ZcnLYd8jQ5USusENO0bzOXZNo4-D6sPyGhpl9g92pOoQmJ8DRgaxAqTGRxItUpkNLBDudfi-4-jGM_IDbnRTyLlWW9hLx3FLjDfA2QL0-z2Plp0NRfh9qdegDb3Ym-fmKS71Wp2g0WsVxhNhfdf9pDYcAkBDKqNF9HpIlRuATIi_HAGFGJ0W9imvB0-q2gQ1AfS2_YOIvUTK0v1Kl3-OFJuLwZqbm2kL4d-Sei-CSUkhV_=w451-h285-no" alt="Configuration" title="Configuration"></p><p><img src="https://lh3.googleusercontent.com/jeAfFyL52YQfyyvIpqgAMgrqCLGm3yBtZDYfH_VXbFExgRV2kTjgkj5TOad0fZ4EkwPYyKOfKrgajprSXSsqmn4Tdcp_73h5YRS0VBZz55ZoHE6_ojFZ7TmeAOnd7ONKRQFxzr5jRZEZd34eWwVahN9o9bZYgcBWpebxN0fIihVQdrf3a6meMzzLPRH1HVX8hXwXr_W0j3FKVAz2Lf2-cNa1Bni_eycfszIrU7XIf8fiVuldSBReqZgd5NtbSuiRJSPFIuCjg08_X9e2aCeeKYBfjuy9tS7c2V4f0gUk3CoC9W-Beyh3ueJ17TkIm0BhzbUqWt8y374DL7FQKr55GaHzz734aRkvVOQnUNeR6efL1KVcriTVDwNCbjuqovljM7_b7VvQtY9O766_F8R1TNMRz26z6sqN9QfFbEFGEBbmECjJbecN8VKb-gTZ_4qSqnHTyiI-UCzcWPddZkoZ1mRridVcnZexsEQ6TD-k7upFmprShkVX-MuP-QIjR6MPqS0QCiwTbzSLB6rwgXbdylDIh6oUlc-5PrpYBhetsdjEIKqIDQNKOkEngxCuZn50bixXooAT78orR4EatTwcd67ERYGRqJRB4KQOxSfHaJCuq9ut53NvM9lPxsPsO0f_kuFsYL46-sSodOnd2-CE2dtRUK-nrqejDhWL_9EdLwBTrlAM9Dqph-Yt=w989-h560-no" alt="Add Variable" title="Add Variable"></p><blockquote><p>記得如果是線上 web 都要把網域再加到 CORS 清單喔～</p></blockquote><p>以上是無伺服器的雲端 Azure SignalR 基本安裝與設定，如果要玩地端的話可以參考官方<a href="https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/signalr?view=aspnetcore-2.2&amp;tabs=visual-studio" target="_blank" rel="noopener">這篇</a>，那我們下次見～</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/azure/azure-signalr/signalr-quickstart-azure-functions-csharp" target="_blank" rel="noopener">快速入門：使用 C# 搭配 Azure Functions 與 SignalR 服務來建立聊天室</a></li><li><a href="https://docs.microsoft.com/zh-tw/azure/azure-signalr/signalr-quickstart-azure-functions-javascript" target="_blank" rel="noopener">快速入門：使用 JavaScript 搭配 Azure Functions 與 SignalR 服務來建立聊天室</a></li><li><a href="https://docs.microsoft.com/zh-tw/azure/azure-functions/functions-develop-vs-code" target="_blank" rel="noopener">使用 Visual Studio Code 開發 Azure Functions</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/signalr?view=aspnetcore-2.2&amp;tabs=visual-studio" target="_blank" rel="noopener">教學課程：開始使用 ASP.NET Core SignalR</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/signalr/hubs?view=aspnetcore-2.2#send-messages-to-clients" target="_blank" rel="noopener">將訊息傳送至用戶端</a></li><li><a href="https://youtu.be/MK8n8pg9bLE" target="_blank" rel="noopener">SignalR Tutorial 16 - Coding Our JavaScript (Client Side) - Part 1</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次接觸使用 Azure SignalR，順便玩玩看雲端託管的服務，那我們就來開始吧～&lt;/p&gt;
    
    </summary>
    
      <category term=".NET Core" scheme="http://annilla.github.io/categories/NET-Core/"/>
    
    
      <category term=".NET Core" scheme="http://annilla.github.io/tags/NET-Core/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term="SignalR" scheme="http://annilla.github.io/tags/SignalR/"/>
    
      <category term="Serverless" scheme="http://annilla.github.io/tags/Serverless/"/>
    
      <category term="Azure Functions" scheme="http://annilla.github.io/tags/Azure-Functions/"/>
    
      <category term="C#" scheme="http://annilla.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Grab Data to CSV by using NodeJS</title>
    <link href="http://annilla.github.io/2019/07/04/JS/Grab-Data-To-CSV-By-Using-NodeJS/"/>
    <id>http://annilla.github.io/2019/07/04/JS/Grab-Data-To-CSV-By-Using-NodeJS/</id>
    <published>2019-07-03T16:00:00.000Z</published>
    <updated>2019-07-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作中遇到一個情境是，打 API 可以要到當下的資訊，但 User 想要幾分鐘之內的紀錄，如果要做報表的話，就要非常手動的用 postman 打 API N 次，然後再將儲存下來的 json 轉成 csv，最後再將 n 個 csv 合成一份檔案。實際若是每分鐘打一次 API，假設只抓十分鐘，就是存十次 json 檔案，再將十個 json 檔案轉成十個 csv ，最後再手動合成一個 csv 檔案，光是手動的時間絕對超過三十分鐘。為此，我決定要寫一隻程式讓上面的所有動作自動化。</p><a id="more"></a><p>環境使用 NodeJS。</p><h1 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h1><p>共安裝 3 個套件</p><ul><li>axios: 戳 API 用</li><li>moment: 處理時間</li><li>json2csv: 將 data 轉成 csv 格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios moment json2csv</span><br></pre></td></tr></table></figure><h1 id="程式解說"><a href="#程式解說" class="headerlink" title="程式解說"></a>程式解說</h1><p>這裡只需要寫一隻 getData.js 就搞定 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Parser &#125; = <span class="built_in">require</span>(<span class="string">'json2csv'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> head = []; <span class="comment">// 存取 head 資料</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>; <span class="comment">// 定時抓取資料的計時器</span></span><br><span class="line"><span class="keyword">let</span> duration = <span class="number">60000</span>; <span class="comment">// 多久抓一次資料</span></span><br><span class="line"><span class="keyword">let</span> token = <span class="string">''</span>; <span class="comment">// 存取 API token</span></span><br><span class="line"><span class="keyword">let</span> apiURL = <span class="string">'put API URL'</span>;</span><br><span class="line"><span class="keyword">let</span> appID = <span class="string">'put API ID'</span>;</span><br><span class="line"><span class="keyword">let</span> appSecret = <span class="string">'put API Code'</span>;</span><br><span class="line"><span class="keyword">let</span> startTime = moment().format(); <span class="comment">// 紀錄開始時間</span></span><br><span class="line"><span class="keyword">let</span> grabMiniute = <span class="number">3</span>; <span class="comment">// 設定要抓取的分鐘數</span></span><br><span class="line"><span class="keyword">let</span> endTime = moment(startTime).add(grabMiniute, <span class="string">'minutes'</span>); <span class="comment">// 計算結束的時間</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得 API token </span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">    methos: <span class="string">'GET'</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;apiURL&#125;</span>/api/auth?appId=<span class="subst">$&#123;appID&#125;</span>&amp;appSecret=<span class="subst">$&#123;appSecret&#125;</span>`</span></span><br><span class="line">  &#125;);</span><br><span class="line">  token = res.data.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將戳 API 包裝成一個程式，若 token 過期會重戳 API</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestAPI</span>(<span class="params">apiMethod, apiURL, retryFunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> axios(&#123;</span><br><span class="line">      method: apiMethod,</span><br><span class="line">      url: apiURL,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        AccessToken: token,</span><br><span class="line">        System: appID</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.message.indexOf(<span class="string">'401'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// get token</span></span><br><span class="line">      <span class="keyword">await</span> getToken();</span><br><span class="line">      retryFunc();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 戳 head API 取資料</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getHead</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> requestAPI(<span class="string">'GET'</span>, <span class="string">`<span class="subst">$&#123;apiURL&#125;</span>/api/Head`</span>, getHead);</span><br><span class="line">  <span class="keyword">if</span> (res) &#123; head = head.concat(res.data); &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'head'</span>, head.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次取得多種資料</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// get token</span></span><br><span class="line">  <span class="keyword">await</span> getToken();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`----- <span class="subst">$&#123;grabMiniute&#125;</span> minutes left -----`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// grab data</span></span><br><span class="line">  getHead();</span><br><span class="line">  getFeeder();</span><br><span class="line">  getNozzle();</span><br><span class="line"></span><br><span class="line">  grabMiniute = grabMiniute - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寫檔案</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params">data, fileName</span>) </span>&#123;</span><br><span class="line">  fs.writeFile(fileName, data, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`An error occured while writing <span class="subst">$&#123;fileName&#125;</span>.`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fileName&#125;</span> has been saved.`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轉格式並儲存檔案</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 將 json 轉 csv</span></span><br><span class="line">    <span class="keyword">const</span> fieldsHead = [columnA, ...];</span><br><span class="line">    <span class="keyword">const</span> fieldsFeeder = [columnA, ...];</span><br><span class="line">    <span class="keyword">const</span> fieldsNozzle = [columnA, ...];</span><br><span class="line">    <span class="keyword">const</span> parserHead = <span class="keyword">new</span> Parser(&#123; fieldsHead &#125;);</span><br><span class="line">    <span class="keyword">const</span> parserFeeder = <span class="keyword">new</span> Parser(&#123; fieldsFeeder &#125;);</span><br><span class="line">    <span class="keyword">const</span> parserNozzle = <span class="keyword">new</span> Parser(&#123; fieldsNozzle &#125;);</span><br><span class="line">    <span class="keyword">const</span> csvFeeder = parserFeeder.parse(feeder);</span><br><span class="line">    <span class="keyword">const</span> csvHead = parserHead.parse(head);</span><br><span class="line">    <span class="keyword">const</span> csvNozzle = parserNozzle.parse(nozzle);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`----- SAVE FILES -----`</span>);</span><br><span class="line">    writeFile(csvHead, <span class="string">'Head.csv'</span>);</span><br><span class="line">    writeFile(csvFeeder, <span class="string">'Feeder.csv'</span>);</span><br><span class="line">    writeFile(csvNozzle, <span class="string">'Nozzle.csv'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'saveFile ERROR: '</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------------</span></span><br><span class="line"><span class="comment">  Start from here</span></span><br><span class="line"><span class="comment">  ---------------*/</span></span><br><span class="line"><span class="comment">// 一開始先執行</span></span><br><span class="line">getAllData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動計時器</span></span><br><span class="line">timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> now = moment().format();</span><br><span class="line">  <span class="keyword">if</span>(moment(now).isBefore(endTime)) &#123;</span><br><span class="line">    <span class="comment">// 如果還沒到結束時間，就繼續取資料</span></span><br><span class="line">    getAllData();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果時間到就停止計時器</span></span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    <span class="comment">// 將資料儲存成檔案</span></span><br><span class="line">    saveFile();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, duration);</span><br></pre></td></tr></table></figure><h1 id="跑起來吧～"><a href="#跑起來吧～" class="headerlink" title="跑起來吧～"></a>跑起來吧～</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node getData.js</span><br></pre></td></tr></table></figure><p><img src="https://lh3.googleusercontent.com/j9w9EiGilWwL1E7atc2_7zYqgVhaihr6BfYRaV5yI_7Zqsm35HHQq-PJB16FVphVx-NG13pmNYy6lSX9OCHF_awYWCscNoCuHxWl8S9dVYtbK6cIFPZVlOk2nlHuPWYZ75c4TrgpM3lOYW3SAwF0QGa38s58WuDPHyxBdZDK-JLJgR7IY-ovFu6YZ2I37ciPf93Mvc24Bg9tJJSj7zdYtfwirxPeFXIVL0guofpoTEBAR29_4BsLnEAtsY6pK5KEXNYcjhwjZ7GuUjNfueF2Qe0abLvsorMFWE1JY5ems-ZOVm0Bw-BmXVqkGNknDNd5aIoILBJ5fAyRLmbV7hVCQpzS79jPBdWDicXsTu8c7qQbGqyU1hyB56MJajIEVViQCoEKMDHnuCWuD67a09wBI8zOQoRIYJmkFf1EPZ93bgVt-KPrgOeQIgaEEIerHPmp56OslVqyOsVi_N4iZ5xROgSit4I4wzfQgZYYbdkLkX4H0fV1VX2zpufoKrx0cz6ZMzTxczYtQErozIMQ5nYZDD1I3xAwN9Gxkr79V2gWHZgICAZ_o1N-MHcM-Sdk690fheubq0PwpekkxP_FIxrJCRaLRYYByMybeyt6z6Y1U713nSO05whp-jMXVNkf459UBi-n8I2Zu8LUktni-ZnJ8GacoOoZM6xV=w1173-h812-no" alt="跑起來吧" title="跑起來吧"></p><blockquote><p>後記：其實 User 一直不停的找我手動抓資料，一開始邊寫程式還要先手動抓資料很阿砸，但後來工具完成後，變成非常順手，覺得幸好有寫這隻小工具的感覺XD</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中遇到一個情境是，打 API 可以要到當下的資訊，但 User 想要幾分鐘之內的紀錄，如果要做報表的話，就要非常手動的用 postman 打 API N 次，然後再將儲存下來的 json 轉成 csv，最後再將 n 個 csv 合成一份檔案。實際若是每分鐘打一次 API，假設只抓十分鐘，就是存十次 json 檔案，再將十個 json 檔案轉成十個 csv ，最後再手動合成一個 csv 檔案，光是手動的時間絕對超過三十分鐘。為此，我決定要寫一隻程式讓上面的所有動作自動化。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://annilla.github.io/categories/JS/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React Redux Practice</title>
    <link href="http://annilla.github.io/2019/07/03/JS/React-Redux-Practice/"/>
    <id>http://annilla.github.io/2019/07/03/JS/React-Redux-Practice/</id>
    <published>2019-07-02T16:00:00.000Z</published>
    <updated>2019-07-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近朋友問我關於 Redux 的問題，但我已經有兩年沒碰 React 了。所以藉此機會找了 youtube 上的<a href="https://youtu.be/OSSpVLpuVWA" target="_blank" rel="noopener">教程</a>，好好複習一次。</p><a id="more"></a><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul><li>Redux 透過單向數據流模型來管理狀態，幫助應用程式擴展規模</li></ul><p><img src="https://lh3.googleusercontent.com/RCAqIMcoBNaVcnbKPXupA177bJvvluPn3GeaSEywgKbQ9tqDWh-cjeds7KbOJiCWStxVGOQLR23kbd0nRhY31T_f7BlJY3CfCXXhGGqYqTaQvZiZKwIpOkY2QBnDdNxY1rEkqvHJAuIrvfRYS5HU5PAiW-JK5baYknZXW-dn14aeptIf1OXblwufjzgNDRSP1gZqUzvG1yyKF88XxV8isg76MQ2yONKLHhrzDNu5Yx_OrcP1u95MtLR9F-mZf_ah65I-JmVYpbtfECihE7VNEn58n7vMp2CIym4JLvRTFspEzCAerEklTkI4aF7oWqcnO-2fK_IImagVK_JU5D2dqBvGA9ZB6XChXPMmbYDs-dinini_zUPgFvYFQK0ZvhW7-KIBsMIVFNNgFhhVZb3wc3mcwrwIvLlmWkqpGHevqclMLAuWlaj-1LeYndUMfE5MzcZ8CSzu7Vo3YO_MjEh8mxSzICgvz-gnIUs6ezMhTCxxSp8SXuta7SZbTcgqDDFzx1BovCKvVgxlvOOD0hNneBq3C0yPBhVAB5mcNInZhjfhWYshXmEJUPZDUiHFXRmMzeCLmoRzUU0DzE2oasezhmYktkb4aRq9XzSkE2d8b9DILg4wWP3skCXG6syozRvTQwnu6z9tZMi96CvFm6RmyKiRebM-Vro_=w922-h548-no" alt="單向數據流模型" title="單向數據流模型"></p><ul><li><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">Redux Devtools</a> 幫助開發者進行狀態的監控與偵錯</li></ul><p><img src="https://user-images.githubusercontent.com/7957859/48663602-3aac4900-ea9b-11e8-921f-97059cbb599c.png" alt="Redux Devtools" title="Redux Devtools"></p><h2 id="Redux-Flow"><a href="#Redux-Flow" class="headerlink" title="Redux Flow"></a>Redux Flow</h2><p>Redux Flow 有個儲存所有狀態 (State) 的倉庫 (Store)，頁面會依據這些狀態 (State) 產生對應的介面 (UI)。當使用者對介面 (UI) 觸發動作 (Actions) 時，動作 (Actions) 會把使用者所做的事情 (payload) 傳輸給處理器 (Reducer) 做運算， 處理器 (Reducer) 處理完後變會把倉庫 (Store) 裡的狀態 (State) 更新，所以頁面就會再依據狀態 (State) 的改變產生對應的新介面 (UI)。</p><p><img src="https://lh3.googleusercontent.com/4fNoEoelX9xGuY9ujaqlV5bkoRzFWVJ12urnnBAs17FYumoFnC31TKe4hTzfpNBzG0Rde55vjURuPCCh7JiRYcl66xMZdgiijutv6ld2sRCwNBevGcfHj5sSUmCBmU3YrVGsagAVIpmmqGiZlI4wIGniBspsMA1CtGFA7f2punGbnfQLE_NhcPU8u_3VAxc3wmJJ1hxhaf_wO_FViTMzHx43-Lk3dmT3H219W4AAUPoPFMwWiiPyzNBtRZVzIyhLb6bGGLZPojsdaf5COQNN4NqfXnwgU0dNFX44tdM-10gYftyOBzsXwiCXu0aoPCei0nRvCp_cRlCClGYC6n9rp-4aNZ8GcaelZqN5nIf0jUYqegcGDoXeruwiy8g0x8_tlX5gAayXencALfp6LjfRTrM9Yry4z_VfgQuws0Y1-zvNdERmcZcFi3xfIPAfWuSxgdn5LeTxsm3fJ9eSCWobTf8n8KLW9rEXiwkBMiIqy4k7gYF6AnLzb9jssIp_huq0gStGif0pQdC-zjk144oSFkqmh9WtQGMGwSXTMfSL0g0NWKk9MehbxzFhRVKA-UrsN961N6dJXvs91IDJk3kT2Pb4ba_rx9yRnTu1mbPEvKp0hB73vro_RC94REWLrlzgkG6i_N9ezftI2z7TciZqnyMlGvCbwLIA=w1340-h932-no" alt="Redux Flow" title="Redux Flow"></p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>打下列指令安裝 React App。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app redux-tutorial</span><br></pre></td></tr></table></figure><p>誒？為什麼是 npx 呢？那是什麼？<br>所以我去搜尋了<a href="https://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener">npx 使用教程</a>如下。</p><blockquote><p>除了調用項目內部模塊，npx 還能避免全局安裝的模塊。比如，create-react-app 這個模塊是全局安裝，npx 可以運行它，而且不進行全局安裝。上面代碼運行時，npx 將create-react-app下載到一個臨時目錄，使用以後再刪除。所以，以後再次執行上面的命令，會重新下載create-react-app。</p></blockquote><p>意思就是他不會在你電腦安裝 create-react-app 這個項目呦～幫你產生好專案後，就會自動移除不佔空間。</p><p>接下來進入專案，安裝 Redux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd redux-tutorial</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux react-redux</span><br></pre></td></tr></table></figure><p>將專案啟動檢查有沒有安裝成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>起成功的話會看到瀏覽器自動開啟頁面如下圖。頁面上會提示去修改 src/App.js 就會自動 reload 畫面。</p><p><img src="https://lh3.googleusercontent.com/0eGc8PAV_LPbfRoLNBV1BkkTQD37TUEjNij_RlVgxSEuYZNY4DKF8uGzrLBHVf2AE4TBM8x9rWyyKuJVMinEABsb-JvpT9bkwb0NNTSKNjYcBbNBmdnZ6W_kg54n3dGO5Nn4z3ODEQeiLYYKsdOj5jwyrsb1o8hgfX6PiirzQaKCa-Nn7uyHM22VNhwKD8ycZsBYICwXla6-z_C-y7a8ycYR1zN7oa0TaMHidHVS74tcBOumyuO5ZZISjlDhYjajvV5ERdTi6ypNQbBq79zXlwjRmjq9UyATG39FOn5Dk3byoatX_sEfevfBxTxDTEgukeEz2anjaoIIzDzEwJJS0MLXZxkAGhtSAwBkU9LCGRh9IPc4IgShJuqA2B8-9qqSBznAukDaKrdbkjotC6gbbv2wsm_ogOhB68qf9fWHap_Jh_32gF-znppLcU-kP9cyGAF1hEBSDdeOngarYU6uSaIuuVlqJFjakf3CgBFdZVspwHQbdYGOmSyxPN_NU_nrZg7dgjYJeI_FkPzR8lY4qETFKPYyfWTCArWuzry2GwQ36VIrcc4lmp5SlhLnyW2WNZmaf-MMkVpjYMmzkNbRymIFamQzA2GO49BmecALKJXy4z_tSkYqsa8pDyRECxa1RGspkoog9YUvthBasLtLTForiwJN0iez=w2560-h1446-no" alt="專案啟動頁面" title="專案啟動頁面"></p><h2 id="創建-Store"><a href="#創建-Store" class="headerlink" title="創建 Store"></a>創建 Store</h2><h3 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h3><p>教程在 index.js 先創建了簡易的 store。<a href="https://github.com/Annilla/react-redux-practice/tree/V1" target="_blank" rel="noopener">Git#1</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 當 action type 為 _changeState 時，將 state 更改為 action 帶過來的 payload 值</span></span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">'_changeState'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> action.payload.newState;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 預設沒有動作時的值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'state'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 sotre</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 印出初始的 state 值</span></span><br><span class="line"><span class="built_in">console</span>.log(store.getState());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定動作屬性所帶的 payload 值</span></span><br><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">  type: <span class="string">'_changeState'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    newState: <span class="string">'New State'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將動作帶入 reducer 中，進而更新 store 中的 state</span></span><br><span class="line">store.dispatch(action);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 印出經過動作後的 state 值</span></span><br><span class="line"><span class="built_in">console</span>.log(store.getState());</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h3><p>當有兩個以上的 Reducers 時，在 index.js 做合併。 <a href="https://github.com/Annilla/react-redux-practice/tree/V2" target="_blank" rel="noopener">Git#2</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 Reducer 分成專門處理產品和使用者資訊兩種</span></span><br><span class="line"><span class="comment">// 專門處理產品的 Reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">productsReducer</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 專門處理使用者的 Reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userReducer</span>(<span class="params">state = <span class="string">''</span>, &#123;type, payload&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'updateUser'</span>:</span><br><span class="line">      <span class="keyword">return</span> payload.user;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 將兩種 Reducer 合起來放在 store 用</span></span><br><span class="line"><span class="keyword">const</span> allReducers = combineReducers(&#123;</span><br><span class="line">  products: productsReducer,</span><br><span class="line">  user: userReducer</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  allReducers,</span><br><span class="line">  <span class="comment">// 放入起始值</span></span><br><span class="line">  &#123;</span><br><span class="line">    products: [&#123; <span class="attr">name</span>: <span class="string">'iPhone'</span> &#125;],</span><br><span class="line">    user: <span class="string">'Anny Chang'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 開啟 devTool</span></span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義動作</span></span><br><span class="line"><span class="keyword">const</span> updateUserAction = &#123;</span><br><span class="line">  type: <span class="string">'updateUser'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    user: <span class="string">'John'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將動作帶入 reducer 中，進而更新 store 中的 state</span></span><br><span class="line">store.dispatch(updateUserAction);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">App</span> /&gt;</span><span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Reducers-and-Actions"><a href="#Reducers-and-Actions" class="headerlink" title="Reducers and Actions"></a>Reducers and Actions</h2><p>將 Reducers 和 Actions 從 index.js 中抽離。<a href="https://github.com/Annilla/react-redux-practice/tree/V3" target="_blank" rel="noopener">Git#3</a></p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>在 <code>src/acitons/</code> 新增 <code>user-actions.js</code> 和 <code>products-actions.js</code>。</p><p>user-actions.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 將 type 名稱輸出供 Reducer 共用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UPDATE_USER = <span class="string">'users:updateUser'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateUser</span> (<span class="params">newUser</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: UPDATE_USER,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      user: newUser</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h3><p>在 <code>src/reducers/</code> 新增 <code>user-reducer.js</code> 和 <code>products-reducer.js</code>。</p><p>user-reducer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 從 Action 那裡取得動作名稱</span></span><br><span class="line"><span class="keyword">import</span> &#123; UPDATE_USER &#125; <span class="keyword">from</span> <span class="string">'../actions/user-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">userReducer</span>(<span class="params">state = <span class="string">''</span>, &#123;type, payload&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> UPDATE_USER:</span><br><span class="line">      <span class="keyword">return</span> payload.user;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; updateUser &#125; <span class="keyword">from</span> <span class="string">'./actions/user-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="comment">// Using super in classes</span></span><br><span class="line">    <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#Using_super_in_classes</span></span><br><span class="line">    <span class="comment">// super() 將父類的構建項目傳到子項目</span></span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 將 onUpdateUser(event) 綁定 component 本身 = this</span></span><br><span class="line">    <span class="keyword">this</span>.onUpdateUser = <span class="keyword">this</span>.onUpdateUser.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onUpdateUser(event) &#123;</span><br><span class="line">    <span class="comment">// this = component 本身</span></span><br><span class="line">    <span class="comment">// 將輸入框的文字丟給 Redux Action</span></span><br><span class="line">    <span class="keyword">this</span>.props.onUpdateUser(event.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">          &lt;/</span>p&gt;</span><br><span class="line">          &lt;p&gt;Practice by Anny Chang&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;a</span></span><br><span class="line"><span class="regexp">            className="App-link"</span></span><br><span class="line"><span class="regexp">            href="https:/</span><span class="regexp">/reactjs.org"</span></span><br><span class="line"><span class="regexp">            target="_blank"</span></span><br><span class="line"><span class="regexp">            rel="noopener noreferrer"</span></span><br><span class="line"><span class="regexp">          &gt;</span></span><br><span class="line"><span class="regexp">            Learn React</span></span><br><span class="line"><span class="regexp">          &lt;/</span>a&gt;</span><br><span class="line">          &lt;h1&gt;</span><br><span class="line">            &lt;input onChange=&#123;<span class="keyword">this</span>.onUpdateUser&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">            &lt;br/&gt;</span><br><span class="line">            &#123;<span class="keyword">this</span>.props.user&#125;</span><br><span class="line">          &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>header&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 將 Redux State 丟到此 component 的 prop</span></span><br><span class="line"><span class="regexp">const mapStateToProps = state =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">  products: state.products,</span></span><br><span class="line"><span class="regexp">  user: state.user</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 將 Redux Action 丟到此 component 的 prop</span></span><br><span class="line"><span class="regexp">const mapActionsToProps = &#123;</span></span><br><span class="line"><span class="regexp">  onUpdateUser: updateUser</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps, mapActionsToProps)(App);</span></span><br></pre></td></tr></table></figure><h2 id="Redux-thunk"><a href="#Redux-thunk" class="headerlink" title="Redux-thunk"></a>Redux-thunk</h2><p>當我們在接取 API 非同步的請求時，就需要 Redux-thunk 這個 middleware，幫助 Promise 回傳過後可以在 dispatch 其他的 Action。<a href="https://github.com/Annilla/react-redux-practice/tree/V4" target="_blank" rel="noopener">Git#4</a></p><p>安裝 redux-thunk。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux-thunk</span><br></pre></td></tr></table></figure><p>在 index.js 引用 thunk。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, compose, createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 applyMiddleware 將 thunk 帶進去改變原生 dispatch 行為</span></span><br><span class="line"><span class="comment">// Thunk 是一個以 action 為本的包裹器</span></span><br><span class="line"><span class="comment">// 在 Redux 中藉由 Redux-Thunk 這個 Redux Middleware 讓我們可以在使用時不去區分 pure action creator 還是 thunk action creator</span></span><br><span class="line"><span class="keyword">const</span> allStoreEnhancers = compose (</span><br><span class="line">  applyMiddleware(thunk),</span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  allReducers,</span><br><span class="line">  &#123;</span><br><span class="line">    products: [&#123; <span class="attr">name</span>: <span class="string">'iPhone'</span> &#125;],</span><br><span class="line">    user: <span class="string">'Anny Chang'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  allStoreEnhancers</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Actions-1"><a href="#Actions-1" class="headerlink" title="Actions"></a>Actions</h3><p>user-actions.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHOW_ERROR = <span class="string">'users:showError'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showError</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: SHOW_ERROR,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      user: <span class="string">'ERROR!!'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">apiRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 axios 接取 API Promise</span></span><br><span class="line">    <span class="comment">// 這邊網址因為有 CORS，所以必定 ERROR</span></span><br><span class="line">    axios(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: <span class="string">'http://google.com'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 成功的話會 dispatch updateUser Action</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'SUCCESS'</span>);</span><br><span class="line">      dispatch(updateUser(response.newUser));</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失敗的話會 dispatch showError Action</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'ERROR'</span>);</span><br><span class="line">      dispatch(showError());</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reducers-1"><a href="#Reducers-1" class="headerlink" title="Reducers"></a>Reducers</h3><p>user-reducer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UPDATE_USER, SHOW_ERROR &#125; <span class="keyword">from</span> <span class="string">'../actions/user-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">userReducer</span>(<span class="params">state = <span class="string">''</span>, &#123;type, payload&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> UPDATE_USER:</span><br><span class="line">      <span class="keyword">return</span> payload.user;</span><br><span class="line">    <span class="keyword">case</span> SHOW_ERROR:</span><br><span class="line">      <span class="keyword">return</span> payload.user;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View-1"><a href="#View-1" class="headerlink" title="View"></a>View</h3><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; updateUser, apiRequest &#125; <span class="keyword">from</span> <span class="string">'./actions/user-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 component 出現的時候進行 API request</span></span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onApiRequest();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 apiRequest 放到此 component 的 props</span></span><br><span class="line"><span class="keyword">const</span> mapActionsToProps = &#123;</span><br><span class="line">  onUpdateUser: updateUser,</span><br><span class="line">  onApiRequest: apiRequest</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapActionsToProps)(App);</span><br></pre></td></tr></table></figure><h2 id="Reselect"><a href="#Reselect" class="headerlink" title="Reselect"></a>Reselect</h2><p>使用者每次都會透過 action 去做 dispatch 進而改變 state 的值。那麼，問題來了，如果需要的計算量比較大，每次更新的重新計算就會造成性能的問題。為了避免不必要的計算，Reselect 就是來解決此問題。<a href="https://github.com/Annilla/react-redux-practice/tree/V5" target="_blank" rel="noopener">Git#5</a></p><blockquote><p>如果有用過 Vue 的話，就類似 computed 的功能。</p></blockquote><p>Selectors 的特點為：</p><ul><li><p>Selectors 可以用來計算延伸的資料，允許 Redux 去儲存最低限度的 state。也就是說，state 只儲存原始的基本資料，中間延伸的計算透過 Selector 呈現即可。</p></li><li><p>Selectors 很有效率。一個 selector 只會在與他相關的變數有改變的時候才會重新計算。</p></li><li><p>Selectors 可以多個組合。可被其他的 selectors 當作變數來運用。</p></li></ul><p>這邊解釋就不用影片中的範例，因為我覺得官方提供的 example 解釋更為貼切。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 shop 裡面的 items 抓出來</span></span><br><span class="line"><span class="keyword">const</span> shopItemsSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.items</span><br><span class="line"><span class="comment">// 把 shop 裡面的 taxPercent 抓出來</span></span><br><span class="line"><span class="keyword">const</span> taxPercentSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.taxPercent</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 items 的 value 做總和</span></span><br><span class="line"><span class="keyword">const</span> subtotalSelector = createSelector(</span><br><span class="line">  shopItemsSelector,</span><br><span class="line">  items =&gt; items.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc + item.value, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 subtotal 和 taxPercent 計算總稅額</span></span><br><span class="line"><span class="keyword">const</span> taxSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxPercentSelector,</span><br><span class="line">  (subtotal, taxPercent) =&gt; subtotal * (taxPercent / <span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 subtotal 和 tax 計算加稅後的總金額</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> totalSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxSelector,</span><br><span class="line">  (subtotal, tax) =&gt; (&#123; <span class="attr">total</span>: subtotal + tax &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> exampleState = &#123;</span><br><span class="line">  shop: &#123;</span><br><span class="line">    taxPercent: <span class="number">8</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">value</span>: <span class="number">1.20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">value</span>: <span class="number">0.95</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(subtotalSelector(exampleState)) <span class="comment">// 2.15</span></span><br><span class="line"><span class="built_in">console</span>.log(taxSelector(exampleState))      <span class="comment">// 0.172</span></span><br><span class="line"><span class="built_in">console</span>.log(totalSelector(exampleState))    <span class="comment">// &#123; total: 2.322 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Smart-VS-Dumb-Component"><a href="#Smart-VS-Dumb-Component" class="headerlink" title="Smart VS Dumb Component"></a>Smart VS Dumb Component</h2><p>你不可能把每個子 component 都跟 Store 做聯繫，這樣很累且是過度使用。所以我們就會有一個專門和 Store 做聯繫的 Component，也就是 Smart Component。他接到資料後會往下傳給只吃 prop 的 Dumb Component。如此一來我們就能保持只有少數 Smart Component 控制 Store，而底下的 Dumb Component 因為只吃 prop 傳進來的值，所以也可安心的重複使用。</p><blockquote><p>Smart VS Dumb Component 的概念是通用的理論，並不是 React 獨有。所以同樣的概念也適用在 Vue 和 Angular 等框架上。</p></blockquote><p><img src="https://huzidaha.github.io/static/assets/img/posts/25608378-BE07-4050-88B1-72025085875A.png" alt="Smart VS Dumb Component" title="Smart VS Dumb Component"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://medium.com/@WendellLiu/redux-middleware%E5%A4%A7%E7%95%A5%E6%9E%B6%E6%A7%8B-ace7e646c929" target="_blank" rel="noopener">Redux Middleware大略架構</a></li><li><a href="https://medium.com/frochu/%E9%80%81%E8%AE%93%E4%BD%A0%E7%9A%84action%E8%83%BD%E4%BD%9C%E6%9B%B4%E5%A4%9A-redux-thunk-c07bc5488e48" target="_blank" rel="noopener">讓你的Action能作更多 — Redux-Thunk</a></li><li><a href="https://www.jianshu.com/p/1fcef4c892ba" target="_blank" rel="noopener">react-redux性能优化之reselect</a></li><li><a href="http://huziketang.mangojuice.top/books/react/lesson43" target="_blank" rel="noopener">Smart 组件 vs Dumb 组件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近朋友問我關於 Redux 的問題，但我已經有兩年沒碰 React 了。所以藉此機會找了 youtube 上的&lt;a href=&quot;https://youtu.be/OSSpVLpuVWA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;教程&lt;/a&gt;，好好複習一次。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://annilla.github.io/categories/JS/"/>
    
      <category term="React" scheme="http://annilla.github.io/categories/JS/React/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
      <category term="React" scheme="http://annilla.github.io/tags/React/"/>
    
      <category term="Redux" scheme="http://annilla.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Google Material Studies - Shrine</title>
    <link href="http://annilla.github.io/2019/06/07/UXUI/Google-Material-Studies-Shrine/"/>
    <id>http://annilla.github.io/2019/06/07/UXUI/Google-Material-Studies-Shrine/</id>
    <published>2019-06-06T16:00:00.000Z</published>
    <updated>2019-06-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>這次 Material Design 案例介紹零售業的 APP 設計，相信大家都不陌生，如何呈現大量商品給使用者也是一門學問。</p><a id="more"></a><h1 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h1><p>Shrine APP 是一個線上市場，透過推播標籤 (promoted labels) 來表達生活方式和時尚產品的特色。Shrine 的品牌美學為現代、优雅、精致。Shrine 在展示各品牌和產品背后，有著一致的美學概念。</p><h3 id="極簡美學"><a href="#極簡美學" class="headerlink" title="極簡美學"></a>極簡美學</h3><p>Shrine 的極簡主義將使用者體驗著重在產品内容和 APP 互動。作為展示各種產品和品牌核心的统一架構，Shrine 的品牌扮演着重要的角色。</p><h3 id="視覺主題"><a href="#視覺主題" class="headerlink" title="視覺主題"></a>視覺主題</h3><p>Shrine 的視覺主題採用去角的剪裁設計，應用在各種組件和元素上。這些元素代表 Shrine logo 的形狀，且為 Shrine 品牌的延伸設計。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1KZq-VRhEx9j2HydlT4ZW9H7tR-WoOZAe%2Fcasestudies-shrine-logo-alt.png" alt="Shrine 去角的剪裁設計" title="Shrine 去角的剪裁設計"></p><p>Shrine 的互動模型是由三個重疊的圖層組成。</p><ol><li>最下層為導航和品牌元素</li><li>中間層為主要內容</li><li>最上層為購物車</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1a-_JDAJTous0ko4miSjAgVwJPHQB2hHe%2Fcasestudies-shrine-elevationchart.png" alt="Shrine 三個重疊的圖層" title="Shrine 三個重疊的圖層"></p><blockquote><p>心得：以前做過大量分類的內容網站，如何讓使用者快速找到他要的類別是一門學問。極簡風格的好處是將操作簡化，並專注於呈現產品給使用者。</p></blockquote><h1 id="產品架構"><a href="#產品架構" class="headerlink" title="產品架構"></a>產品架構</h1><p>Shrine 應用程序的資訊架構是由目錄(catalog)結構組成。一個目錄包含各分類資訊，母類別可能包含子類別。Shrine 的母類別將大群組的物品分類，例如：鞋子、配飾、連衣裙，如此一來，使用者可以看到相關的內容。採用目錄結構讓使用者瀏覽有興趣的項目、互相比對不同的產品和查看特定的產品資訊。</p><h3 id="導覽列"><a href="#導覽列" class="headerlink" title="導覽列"></a>導覽列</h3><p>Shrine 在桌機、平板和手機上使用不同形式的導覽列。<br>手機將導覽列放在最後一個圖層，需要藉由回上頁的元件做返回的動作。<br>平板使用頁籤(tabs)的方式導覽。<br>桌機使用標準的導覽收納欄位。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1-qYMfjqAbsMb9O-lJNIsaHcKhO_p4O_s%2Fcasestudies-shrine-family.png" alt="Shrine 導覽列" title="Shrine 導覽列"></p><h3 id="項目指標"><a href="#項目指標" class="headerlink" title="項目指標"></a>項目指標</h3><p>所有導覽列共用同一個選取狀態模式：當一個項目被選取，項目背後會有一個三角圖樣代表被選取的狀態。項目指標確保使用者知道他們目前所在的類別。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1l0DbKUHyQKvedhajBXcnaVN8UZbn7eSF%2Fcasestudies-shrine-nav.png" alt="Shrine 項目指標" title="Shrine 項目指標"></p><h3 id="購物車"><a href="#購物車" class="headerlink" title="購物車"></a>購物車</h3><p>購物車可以在螢幕右下角找到。當物品加入或從購物車移除，購物清單會動態更新並反映變化。<br>購物清單可以透過點擊 icon ，展開內容細目，或是帶使用者到購物畫面。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1dgcMYf6_2L_xYYriPRcoACs_woD5LIFm%2Fcasestudies-shrine-shoppingcart-1b.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：項目指標用圖示的方式標示在分類文字背後，我覺得這個用法蠻大膽的，若是想要增加潮流感的話很適合。但若是在公司企業內部用的軟體可能需要考慮使用者的接受度。</p></blockquote><h1 id="排版和顏色"><a href="#排版和顏色" class="headerlink" title="排版和顏色"></a>排版和顏色</h1><p>Shrine 使用 12 grid system。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1JSMNlunwZaOV3F0t0eSsBqn3EhwN4Idk%2Fcasestudies-shrine-grid-1a.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="水平格線"><a href="#水平格線" class="headerlink" title="水平格線"></a>水平格線</h3><p>Shrine 的手機和平板排版採用水平滑動的格線。欄位、間距和邊距都是從左到右，並不是我們一般常用的上到下。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1bzYYXTPp9EKoZ_D98LDkdpmmekDIUAK1%2Fcasestudies-shrine-horizontalimagegrid.png" alt="Shrine 水平格線" title="Shrine 水平格線"></p><h3 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h3><p>Shrine 的顏色主題是單色系的，將主色調 Shrine Pink 使用不同亮暗做變化。底層使用 Shrine 的主色調 (Shrine Pink 100)，下方購物車使用次色調(Shrine Pink 50)。主要內容在白色背景並使用深色 Shrine Pink 900 作為文字和圖示的顏色。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1PqdLRDr8EpuHTdhT9f9HtIzxzGOjecJP%2Fcasestudies-shrine-color-1.png" alt="Shrine 色調" title="Shrine 色調"></p><ol><li>Shrine Pink 100 用在 “add to cart” 來凸顯按鈕。</li><li>標籤(chips)外框使用 Shrine Pink 100，用深色的 900 來代表被選取的標籤。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1ocq8e1RNTZOmpP2MXjRF1rAB4hk9nw4a%2Fcasestudies-shrine-colorcomponents.png" alt="Shrine Pink" title="Shrine Pink"></p><p>Shrine 使用圖像處理來表示狀態的變化(例如被選取的狀態)，或是背後的半透明遮罩。客制的圖像是一種加強 Shrine 品牌的方式。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1Vzs31NWpv0YlZ2ejSZl6PEYqofYiNSFM%2Fcasestudies-shrine-color-imagerytreatment-duotone.png" alt="Shrine 被選取的狀態" title="Shrine 被選取的狀態"></p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F176hAMN80PxLeqkcw4zypAG5RZJFEIlq3%2Fcasestudies-shrine-color-imagerytreatment-patternscrim.png" alt="Shrine 半透明遮罩" title="Shrine 半透明遮罩"></p><blockquote><p>心得：使用水平格線設計我覺得是很大的挑戰，因為目前大宗的使用方向還是垂直為主。不推薦水平格線的設計，除非是遊戲、活動或各分類展示等特殊需求，否則可慮使用者需長期瀏覽的狀態下，水平左右滑動並不方便。</p></blockquote><h1 id="文字與圖示"><a href="#文字與圖示" class="headerlink" title="文字與圖示"></a>文字與圖示</h1><p>Shrine 的文字比例提供各種內容所需。所有比例皆使用 Rubik 作為字體，包含 Rubik Light、Regular和Medium。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1VcsKVTP1QNKoPl52cNCHauFM0_526cdN%2Fshrinetypescale.png" alt="Shrine 字體 Rubik" title="Shrine 字體 Rubik"></p><p>Rubik 是非襯線字體，有著略為的圓角和多種的粗細可選擇。Rubik 是非常適合 Shrine 的字體，因為他是一種清晰、時尚、現代的字體，且他的圓角帶給人溫暖、友善和有趣的感覺。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1rec2nbnEXesSPYTicV_qbE6D9jmCuO5h%2Fcasestudies-shrine-type-1.png" alt="Shrine Rubik" title="Shrine Rubik"></p><p>Shrine 使用 Material Design 預設的 icon 系統。這些 icon 在小尺寸的時候也能保持清晰和俐落。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F15IUNXILSXZmMGcH2q8W_vbS8YlO91vzt%2Fcasestudies-shrine-icons-alt.png" alt="Shrine icon" title="Shrine icon"></p><blockquote><p>心得：文字選用不同於 Roboto 的圓角字體，營造柔和感是不錯的選擇。</p></blockquote><h1 id="形狀和元件"><a href="#形狀和元件" class="headerlink" title="形狀和元件"></a>形狀和元件</h1><p>元件的形狀根據他們的大小來分類。形狀分類讓你可一次性設定多個元件尺寸。形狀分類包含：</p><ol><li>小元件 (Small components):浮動動作按鈕。角落各切 4dp 斜角。</li><li>中元件 (Medium components):選單。角落各切 8dp 斜角。</li><li>大元件 (Large components):內容區塊。左上角切 24dp 斜角。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1f_u-uvDtYKjS0LEIevjDCbb1ALeH2Lks%2Fshrine-shape-b.png" alt="Shrine 元件" title="Shrine 元件"></p><h3 id="按鈕"><a href="#按鈕" class="headerlink" title="按鈕"></a>按鈕</h3><ol><li>文字按鈕：按鈕沒有邊框和陰影。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1ZfoWLGKLkJhKTvX0Bfjc19jk_4teiBRF%2Fcasestudies-shrine-textbutton.png" alt="Shrine 文字按鈕" title="Shrine 文字按鈕"></p><ol><li>主要按鈕：使用主色調 Shrine Pink 100，無陰影，圓角和細長形狀。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1dkaLfu-vECfRflUXOQDvYwFVHPmvIo_4%2Fcasestudies-shrine-buttonemphasis.png" alt="Shrine 主要按鈕" title="Shrine 主要按鈕"></p><h3 id="標籤-Chips"><a href="#標籤-Chips" class="headerlink" title="標籤 Chips"></a>標籤 Chips</h3><p>Shrine 在產品細節頁面使用可選擇的標籤。這些客制標籤有著圓角的邊線和按鈕做區別。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1D0EwzNkf19srLxcQ8jLzRgYddPbDYaRB%2Fcasestudies-shrine-chips.png" alt="Shrine 標籤" title="Shrine 標籤"></p><h3 id="頁籤"><a href="#頁籤" class="headerlink" title="頁籤"></a>頁籤</h3><p>Shrine 在桌機和平板使用頁籤當作導覽列。他們使用客制顏色、文字和狀態。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1BkLfpj3qECEoZ41gclPvw1w6NaQNM6jm%2Fcasestudies-shrine-tabs.png" alt="Shrine 頁籤" title="Shrine 頁籤"></p><h3 id="導覽列和背景區塊"><a href="#導覽列和背景區塊" class="headerlink" title="導覽列和背景區塊"></a>導覽列和背景區塊</h3><p>Shrine 使用客制的導覽抽屜在手機上。他可以透過點擊左上角的返回元件來展開導覽。<br>Shrine 的導覽抽屜使用客製化的文字、顏色和狀態。置中的文字是另一個客制的特點。<br>Shrine 的返回元件使用客制的顏色和形狀。背後圖層使用 app 的主色調，前圖層的左上角有一個客制的斜切角。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1o4ts_Rfz0X97TaapdQ-9YON6O3WzE3WZ%2Fcasestudies-shrine-backdrop-1b.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="圖像列表"><a href="#圖像列表" class="headerlink" title="圖像列表"></a>圖像列表</h3><p>Shrine 使用編排過的圖像列表來展示內容。編排過的圖像列表穿插使用不同大小（相同比例）的區塊創造有韻律的排版，且非常適合水平瀏覽內容。</p><p>編排過的圖像列表對於內容來說非常理想，因為他提升了每個商品的重點和新穎性，讓使用者不會過快的掃描內容。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1bzYYXTPp9EKoZ_D98LDkdpmmekDIUAK1%2Fcasestudies-shrine-horizontalimagegrid.png" alt="Shrine 圖像列表" title="Shrine 圖像列表"></p><h3 id="購物清單"><a href="#購物清單" class="headerlink" title="購物清單"></a>購物清單</h3><p>Shrine 使用可展開的底部清單讓使用者可以簡單的到達購物車。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F10tATQMRwpM8VtaVZKbVnBv3uzaXVDEMT%2Fcasestudies-shrine-shoppingcart-1b.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：對於圖像列表的水平滾動方式我不是很贊同，因為大多數使用者只會對前幾樣商品用比較慢的速度查看，到後面都會變成掃描式的，故意編排成眼睛不易掃瞄商品的方式，只會讓使用者變得不想用，因為他沒辦法快速的查看大量商品做比較。</p></blockquote><h1 id="互動"><a href="#互動" class="headerlink" title="互動"></a>互動</h1><p>Shrine 的互動設計使用增強的淡入、較長的延遲時間來漸進式營造優雅和愉悅的環境。</p><h3 id="起始畫面"><a href="#起始畫面" class="headerlink" title="起始畫面"></a>起始畫面</h3><p>Shrine 的產品 icon 動畫透過幾何的形狀變化來表達 logo。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1z58j-BuFmvDzpsnkpzPnpBENPAmy-RWb%2F01-launch.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="icon-動畫"><a href="#icon-動畫" class="headerlink" title="icon 動畫"></a>icon 動畫</h3><p>動畫 icon 增加樂趣且引領使用者操作。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1fghiYco9yt2kaHxdvpvvG5H1Rfys8xyi%2F02-icons.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="漸變得導覽列"><a href="#漸變得導覽列" class="headerlink" title="漸變得導覽列"></a>漸變得導覽列</h3><p>Shrine 的導覽漸變動畫強調淡出和長時間下達到放鬆和優雅的氣氛。時間延遲用於引起對重要元件的注意，例如購物車和結帳按鈕。在背後圖層使用交錯的淡入淡出來產生關連的效果。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1a5xbi_QBcDBvNwKFyY10vXqAE4oJlSAb%2F03-navigationtransitions.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="示範"><a href="#示範" class="headerlink" title="示範"></a>示範</h3><p>當第一次增加商品到購物車時，一個示範的動畫將展示商品已放置在購物車中。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SlTir4qcIH6gcKn2ZwVzAF5dA20rFtHF%2F04-tutorial.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：對於會動的 icon 和示範商品放入購物車這兩個設計很有興趣，若有機會的話會想要嘗試放在專案中嘗試。</p></blockquote><p>總結：Shrine 這個案例除了上述提到的水平滾動設計我不是很贊同外，其他的部分都很值得學習借鏡。是個很不錯的案例，那我們下次見囉～</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://material.io/design/material-studies/shrine.html" target="_blank" rel="noopener">Material Studies - Shrine</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這次 Material Design 案例介紹零售業的 APP 設計，相信大家都不陌生，如何呈現大量商品給使用者也是一門學問。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/categories/UXUI/Material-Design/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>JS Retry Function</title>
    <link href="http://annilla.github.io/2019/05/01/JS/JS-Retry-Function/"/>
    <id>http://annilla.github.io/2019/05/01/JS/JS-Retry-Function/</id>
    <published>2019-04-30T16:00:00.000Z</published>
    <updated>2019-04-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作上，參考一位前輩寫的 Retry function 的原理記錄，實做經過 N 秒後重複做一件事情的小程式。</p><a id="more"></a><p>這裡從取得 AD 帳號來舉例。費話不多說，先上 code。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">async getADRetry()&#123;</span><br><span class="line">    /*--------------------------</span><br><span class="line">        AD account Retry 機制</span><br><span class="line">        1. 成功取得 AD 回傳值</span><br><span class="line">        2. 無法取得 AD 開始 Retry</span><br><span class="line">        3. Retry 延遲秒數從 nextDelay 開始，每多一次就加 1 秒</span><br><span class="line">        4. Retry 次數最多 retryNumber 次</span><br><span class="line">        5. Retry 成功則回傳值，全部失敗則回傳 &apos;&apos;(空字串)</span><br><span class="line">    --------------------------*/</span><br><span class="line">    let NtAccount = &apos;&apos;;</span><br><span class="line">    let nextDelay = 0;</span><br><span class="line">    let retryNumber = 5;</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; retryNumber; i++) &#123;</span><br><span class="line"></span><br><span class="line">        // 延遲 nextDelay 秒後</span><br><span class="line">        await delayTime(nextDelay);</span><br><span class="line">        // 取得 user</span><br><span class="line">        NtAccount = getUserName();</span><br><span class="line"></span><br><span class="line">        if (NtAccount === &apos;&apos;) &#123;</span><br><span class="line">            // 無法取得 AD</span><br><span class="line">            // nextDelay 下一次加 1 秒</span><br><span class="line">            nextDelay = nextDelay + 1000;</span><br><span class="line">            // Continue Retry</span><br><span class="line">            console.log(`No AD. Retry [$&#123;i + 1&#125;]: for $&#123;nextDelay&#125;ms...`);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 成功取得 AD 跳出迴圈</span><br><span class="line">            console.log(`Get AD.`);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return NtAccount;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其中 delayTime 函數用 promise 即可實做，只要傳入毫秒 ms 就能得到延遲的動作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Delay 延遲秒數</span><br><span class="line">export function delayTime (interval) &#123;</span><br><span class="line">    return new Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(resolve, interval);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作上，參考一位前輩寫的 Retry function 的原理記錄，實做經過 N 秒後重複做一件事情的小程式。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://annilla.github.io/categories/JS/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Google Material Studies - Reply</title>
    <link href="http://annilla.github.io/2019/05/01/UXUI/Google-Material-Studies-Reply/"/>
    <id>http://annilla.github.io/2019/05/01/UXUI/Google-Material-Studies-Reply/</id>
    <published>2019-04-30T16:00:00.000Z</published>
    <updated>2019-04-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次介紹的 Rally 是關於統計分析型的系統，這次要來看的是偏向應用型的系統 Reply。</p><a id="more"></a><h1 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h1><p>Reply 是一款幫助個人和群組溝通的 APP，其設計理念為提供清晰、易讀、直觀和易用的應用程式。</p><h3 id="功能性導向之美-Functional-aesthetic"><a href="#功能性導向之美-Functional-aesthetic" class="headerlink" title="功能性導向之美 (Functional aesthetic)"></a>功能性導向之美 (Functional aesthetic)</h3><p>Reply 的品牌精神強調溝通的重要性。因此，設計著重於功能品質，放置許多易用性元素。</p><p>Reply 的品牌時常伴隨著用戶的操作動作，例如從品牌的 logo 點擊展開導覽列。</p><blockquote><p>心得：這種會讓使用者頻繁編輯操作的 APP 也常常出現在公司內部，例如報價單、簽核表單等等的應用程式，所以在許多使用者操作行為下，如何清楚的呈現資訊和導引使用者動作變得非常重要。</p></blockquote><h1 id="產品架構"><a href="#產品架構" class="headerlink" title="產品架構"></a>產品架構</h1><p>Reply 使用類似於其他電子郵件應用程序的產品結構：包含新郵件和存檔郵件的收件箱，以及圍繞在組織和執行與這些郵件相關操作的 UI 。郵件可以加上星星標示、發送、刪除、標記為垃圾郵件，或以使用者自定義方式來整理郵件。</p><h3 id="專注在使用者任務"><a href="#專注在使用者任務" class="headerlink" title="專注在使用者任務"></a>專注在使用者任務</h3><p>由於使用者任務主要涉及內容生產和處理，因此螢幕空間專注於內容呈現而非其他 UI 元素。為確保內容和導航列都有足夠的空間，Reply 會針對桌機、平板、手機裝置使用不同的導航模式。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1XRLqbRWX43Sm4h1u8y04J4O7SKLY1ASs%2Fcasestudies-reply-family.png" alt="Reply 導覽模式" title="Reply 導覽模式"></p><h3 id="抽屜式導覽列"><a href="#抽屜式導覽列" class="headerlink" title="抽屜式導覽列"></a>抽屜式導覽列</h3><p>在桌機，Reply 使用標準的抽屜式導覽列。導覽列同時使用 icon 和文字。最上方包含設置、切換帳號和有搭配箭頭的 logo 拿來縮合導覽列。點擊搭配箭頭的 logo，將會縮合成軌道式導覽列。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1odXyicfqCiZ-NfE4Oi8iNP4wO-rmEZZ9%2Fcasestudies-reply-productarch.png" alt="Reply 桌機導覽列" title="Reply 桌機導覽列"></p><h3 id="底部-bar-導覽列"><a href="#底部-bar-導覽列" class="headerlink" title="底部 bar 導覽列"></a>底部 bar 導覽列</h3><p>在手機，Reply 使用底部 bar 導覽列。點擊左下角的 Reply icon ，他會從底部展開顯示抽屜式導航列，其中包含設定、切換帳戶頭像等動作。再次點擊 Reply icon 時，導航會關閉，導航列會關閉並返回底部預設的 bar 狀態。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1OVQU4zWktolBn0pEaT9fu_5xCxGsXzm9%2Fcasestudies-reply-bottomsheet.png" alt="Reply 手機導覽列" title="Reply 手機導覽列"></p><h3 id="軌道式導覽列"><a href="#軌道式導覽列" class="headerlink" title="軌道式導覽列"></a>軌道式導覽列</h3><p>透過點擊 Reply logo，軌道式導覽列可以展開變成抽屜式導覽列。Logo 旁邊的箭頭表明 Reply logo 是可交互的。</p><p>軌道式導覽列非常適合在平板電腦上使用，因為它可以顯示大量的目的地，且佔用很小的空間。當軌道式導覽列被展開時會顯示使用者創建的資料夾，讓用戶讀取資料夾的標題文字。</p><p>當收合時，軌道式導覽列不顯示使用者創建的資料夾。因為這些自創的資料夾都使用同個 icon，他們無法用單一 icon 做區別。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1tr41eJcVoKTnE7rq9vDBpaWUlVLdTlPa%2Fcasestudies-reply-railnav.png" alt="Reply 平板導覽列" title="Reply 平板導覽列"></p><blockquote><p>心得：手機底部的導覽列是我沒嘗試過的設計，因為工作上比較常做 Web 的應用，所以通常會使用上方 bar。但這樣使用下方 bar ，可以讓內容集中在上方，對於大量內容的呈現是很好的選擇。</p></blockquote><h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><p>Reply 使用 12 grid system。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1HuRM4KXNObz38eqqiQsqUusTWe_iua8E%2Fcasestudies-reply-grid-1a.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="視覺層級"><a href="#視覺層級" class="headerlink" title="視覺層級"></a>視覺層級</h3><p>Reply 使用顏色來區分不同的元件。例如，卡片容器是可見的，因為卡片具有白色表面顏色，而應用程式的背景是灰色的。</p><p>由於 Reply 有時候會顯示密集的內容，因此將陰影移除會降低視覺的複雜性。並將項目的間距拉小，從而為內容流出更多的空間。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1EmDZJ6SLz0CwwbxPiaYXqkTDbt2n_FKI%2Fcasestudies-reply-elevation.png" alt="視覺層級" title="視覺層級"></p><blockquote><p>心得：利用小間距和去除陰影來顯示密集的內容，這點我在工作上也常常用到，最近剛做產線人員掃條碼顯示 64 條資料要同時呈現在一個畫面上，光是設計就佔了很重要的角色，畢竟在寫程式之前可以先有個底，才不用花費大量時間在調整版面上。</p></blockquote><h1 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h1><p>Reply 的顏色主題使用一個主色調(深藍灰色)和一個輔助色(橘色)。</p><p>由於輔助色很少用到，因此 Reply 的 UI 通常是單色的，主要使用主色調的深淺變化。這種微妙的顏色主題可以輕鬆閱讀內容而不會分心，並且可以輕鬆看到頭像。</p><p>每當使用輔助色的時候，視覺上都會產生明顯的影響。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1XUGSUZeLYqhH--JBBHWLkRnJzVmX13oR%2Fcasestudies-reply-color.png" alt="顏色主題" title="顏色主題"></p><blockquote><p>心得：這種配色是我平常常用的方式，因為顏色少的話在配色方面比較不容易混亂，相較於上一篇介紹 <a href="../../../../../2019/04/05/UXUI/Google-Material-Studies-Rally/">Rally</a> 的 6 色，Reply 就是保守派。</p></blockquote><h1 id="文字與圖示"><a href="#文字與圖示" class="headerlink" title="文字與圖示"></a>文字與圖示</h1><p>Reply 使用 Work Sans 作為字體。不同比例的 Work Sans 提供了 Reply 內容所需的種類。透過使用六種不同的權重來呈現內容：Light，Regular，Medium，SemiBold和Bold。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1WzYaZo4FsrHq8dgXw-hQ0OViJ56dRDNM%2Freplytypescale.png" alt="字體" title="字體"></p><p>Reply 的 icon 具有細微的風格，表達品牌也同時專注於 icon 識別與功能。</p><ol><li>所有圖示使用一樣的格線架構確保一致性。</li><li>所有 Reply 圖示</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1J1sfDmQOyuvwfqAID1GY5d9bO66G5wVm%2Fcasestudies-reply-icons-alt.png" alt="圖示" title="圖示"></p><h1 id="形狀"><a href="#形狀" class="headerlink" title="形狀"></a>形狀</h1><p>元件根據大小使用不同的形狀類型，將形狀做分類可以讓螢幕一次放多個元件，分類包含：</p><ol><li>小元件 (S)：延伸的 FAB (floating action button)。圓角 50%。</li><li>中元件 (M)：卡片 (Cards)。圓角 0。</li><li>大元件 (L)：底部清單 (Bottom sheets)。圓角 12dp 12dp 0 0。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1Zv545CazM0c_SvUuZqnUg6hE7Dv-S3m0%2Freply-shape.png" alt="形狀分類" title="形狀分類"></p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1J8hIuMxjeCb-xIkot0krL8abdBIIIqfw%2Freply-shape-b.png" alt="形狀元件" title="形狀元件"></p><h1 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h1><h3 id="浮動動作按鈕-Floating-action-button"><a href="#浮動動作按鈕-Floating-action-button" class="headerlink" title="浮動動作按鈕 (Floating action button)"></a>浮動動作按鈕 (Floating action button)</h3><p>在手機上， Reply 在底部嵌入自定義的 FAB (Floating action button)。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1GhRm29BQNQHyLVPO0q_JdgYN4G82YjUS%2Fcasestudies-reply-nestedfab.png" alt="手機自定義的 FAB" title="手機自定義的 FAB"></p><p>在桌機上， Reply 使用自定義的 FAB 延伸，和抽屜式導覽做搭配。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1wNWnttN_BLCzr5bi2w-8VDEbCTV8sh66%2Fcasestudies-reply-extendedfab.png" alt="桌機自定義的 FAB" title="桌機自定義的 FAB"></p><h3 id="底部-bar-底部清單"><a href="#底部-bar-底部清單" class="headerlink" title="底部 bar, 底部清單"></a>底部 bar, 底部清單</h3><p>在手機，Reply 使用客制的底部 bar 和動作按鈕。</p><ol><li>預設的底部 bar</li><li>Reply 的底部 bar 使用客制的 icon, 顏色和形狀。Reply logo 做為選單功能 icon 被包含在元件中。客制形狀的底部 bar 包含浮動動作按鈕。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1jTk6oF1ib0k1wIhXnjTLn0kgEZxNznl5%2Fcasestudies-reply-bottombar-compare.png" alt="底部 bar" title="底部 bar"></p><p>在手機，底部 bar 是切換導覽和進行動作的主要方式。<br>當使用者選取多個進行動作時，底部 bar 會變成內文動作 bar。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1a-17T_B8F7nlrJc9pJ6opEdFG-cuccmZ%2Fcasestudies-reply-contextualactionbar.png" alt="內文動作 bar" title="內文動作 bar"></p><p>當使用者滑動頁面的時候，底部 bar 會從螢幕消失，只剩下 FAB 按鈕。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1I1RcG9mNZYJgCPZu9u_wsYBaiHxNIJ8Q%2Fcasestudies-reply-floatingfab.png" alt="滑動頁面剩下 FAB" title="滑動頁面剩下 FAB"></p><h3 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h3><p>Reply 將郵件呈現在客制的方角卡片上。每張卡片的間距非常小，因為顏色代表每張卡片的邊界(沒有使用任何陰影)。小間距讓更多內容可以呈現在螢幕上。</p><p>當卡片往右邊滑時，會出現對郵件標示星號的動作按鈕。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1FJEijR5c1uTkUcHsUUU0GHLuupehX39-%2Fcasestudies-reply-cards-1.png" alt="卡片往右滑" title="卡片往右滑"></p><p>當卡片往左邊滑時，會出現對郵件刪除的動作按鈕。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1WZlOkz0ZWCN4BhIWrvM7H4NsvlNxt5OI%2Fcasestudies-reply-cards-2.png" alt="卡片往左滑" title="卡片往左滑"></p><h3 id="小標籤-Chips"><a href="#小標籤-Chips" class="headerlink" title="小標籤 (Chips)"></a>小標籤 (Chips)</h3><p>Reply 的小標籤 (Chips) 使用客制的文字、顏色和圖像大小。在視覺上和品牌相吻合。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1bQe04HeiZ4CLLKEVXGs_B-yYd4mc_Ztx%2Fcasestudies-reply-chips-alt.png" alt="小標籤" title="小標籤"></p><blockquote><p>心得：此專案對許多 material components 做客製化的樣式修改，礙於工作要同時做設計和開發的時間限制下，我比較沒有對這方面下過功夫，或許下次我可以從微調一些元件樣式來增加對品牌的塑造。</p></blockquote><h1 id="交互動作"><a href="#交互動作" class="headerlink" title="交互動作"></a>交互動作</h1><p>Reply logo 的動畫其描繪靈感來自捲曲紙張路徑。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1CmJcj6oa4Qwo_i8KkNaruAtMOCNnnpfw%2F01-launch.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>Reply 使用較短的動畫時間來加強動作效率。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1MfIr9GSQ4iAfUNoAtKIUKX0lP6Kxt8kC%2F02-reply-navtransitions.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>插圖動畫在用戶使用的關鍵點出現，例如完成收件夾中每個項目的存檔後，觸發了一個慶祝動畫。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SapnI_EXJwjkvMb87hWWakpTMLIKoxiQ%2F03-reply-inboxzero.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>當使用者將頁面往下拉重新整理時， Reply 的 logo 動畫會出現在上方。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F120IhHIDr-BHTPrTmFnXpEHfsOJEdVsg8%2F04-reply-pulltorefresh.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：logo 動畫二次使用在 Refresh 頁面上，我覺得這點非常不錯，除了讓畫面生動起來也可以節省設計時間。</p></blockquote><p>總結：Reply 讓我學到更多對 material component 做更細微設計的靈感，希望之後有機會多做一點有趣的元件設計提升品牌形象。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://material.io/design/material-studies/reply.html" target="_blank" rel="noopener">Material Studies - Reply</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次介紹的 Rally 是關於統計分析型的系統，這次要來看的是偏向應用型的系統 Reply。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/categories/UXUI/Material-Design/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Google Material Studies - Rally</title>
    <link href="http://annilla.github.io/2019/04/05/UXUI/Google-Material-Studies-Rally/"/>
    <id>http://annilla.github.io/2019/04/05/UXUI/Google-Material-Studies-Rally/</id>
    <published>2019-04-04T16:00:00.000Z</published>
    <updated>2019-04-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Material Guildline 應該很多設計師都閱讀過 N 遍了，但要設計時如何在框架下做到客制這件事應該還是很疑惑。官網上提出了幾個業界的實例分享，這點讓我很有興趣，所以接下來我會一一對這些案例做介紹。因為我上班做的案子比較多是系統類的設計，所以我第一個想介紹比較類似的是 Rally 這個案例。下面內容會一邊介紹，一邊穿插自己在職場上的一些心得或想法。</p><a id="more"></a><h1 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h1><p>Rally 是一個管理財務的 APP，它會追蹤使用者的花費習慣並產生預測和適當的警示通知。Rally 是設計來呈現大量且密集的資訊，讓使用者可管理和研究資料模式。</p><h3 id="數據性導向之美-Data-driven-aesthetic"><a href="#數據性導向之美-Data-driven-aesthetic" class="headerlink" title="數據性導向之美 (Data-driven aesthetic)"></a>數據性導向之美 (Data-driven aesthetic)</h3><p>UI 採用暗灰色提高質感，並用亮色系凸顯資料。在資料與背景顏色高對比之下，讓使用者更容易閱讀 APP 內的圖表。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F16CNi69TWdOluvYdoeNwd5QK4P5nkE48-%2Fcasestudies-rally-brandattributes.png" alt="Rally UI" title="Rally UI"></p><p>UI 設計專注在查看、研究和了解資料。圖表呈現在儀表板上，讓使用者查看花費摘要和單一交易的細節。此 UI 設計透過排版、顏色和形狀的凸顯，讓畫面是密集且直覺的。</p><blockquote><p>心得：蠻喜歡這樣的暗色背景搭亮色的配色，但因目前公司的一般使用者還是比較習慣白色背景的配色模式，所以暗色背景的搭配在考慮時間和緊急度下，我自己是只敢用在自己小組內部用的專案上，比較沒有時間上的壓力。</p></blockquote><h1 id="產品架構"><a href="#產品架構" class="headerlink" title="產品架構"></a>產品架構</h1><p>Rally 架構是層級式的，讓使用者透過不同分類查看他們的財務。</p><p>內容根據個人財務區分不同的 sections，像是帳戶、預算、帳單。首頁著重在讓使用者前往這些 sections 的導向。</p><h3 id="導覽列"><a href="#導覽列" class="headerlink" title="導覽列"></a>導覽列</h3><p>因為 Rally 專注在呈現和描述不同面向的財務資訊，所以如何讓使用者能輕易的在這些sections 移動是很重要的。Rally 有一個固定位置的導覽列讓使用者能方便的切換 sections。在桌機和平板，Rally 使用的是直列式的導覽列。在手機，則是用橫向標籤的方式。這項的導航模式很理想，雖然它們總是在屏幕上，但佔用的空間非常小。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1PIJeS6GJLIExYX9mWOmb7UzWB0-Nl5VB%2Fcasestudies-family-rally.png" alt="Rally 導覽列" title="Rally 導覽列"></p><p>在直列式的導覽列中，每個目的地會用一個獨特的 icon 呈現。當 section 被點選的時候，icon 就會變亮且標題會出現在 icon 下方。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1-qsgxAELdMrSDPRKV-l-N_2dW5fYeljj%2Fcasestudies-rally-rail.png" alt="直列式的導覽列" title="直列式的導覽列"></p><p>在橫向標籤導覽中，當 section 被點選的時候，icon 就會變亮且標題會出現在 icon 右方，其他 icon 將會適當的移動位置。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1dHfpA4R1RVHn5zRSxInMllujv_C7pxv7%2Fcasestudies-rally-tabs.png" alt="橫向標籤導覽" title="橫向標籤導覽"></p><blockquote><p>心得：這邊如果導覽項目數目很少，這樣設計ok。但要注意往後的擴充性，若是 section 的數目增加是否要增加 sub section，手機上方 tab 的空間是否會不夠呈現，這些都是可能會碰到的問題。</p></blockquote><h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><p>Rally 使用 12 grid system。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1lAQUZTvSoen3matP1gpDJqVpKnZpARy6%2Fcasestudies-rally-grid-1a.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="視覺層級"><a href="#視覺層級" class="headerlink" title="視覺層級"></a>視覺層級</h3><p>Rally 使用色彩或紗幕來區分視覺上的層級。</p><p>舉例：當使用者滑動下方資料的時候，為確保統計圖固定在上方，使用不同的色彩來區分視覺層級。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1dq6I1nDovqvUydVHH5jTeI9VA6ftfz7H%2Frally-flow1-170808-casestudies-rally-elevation-1a.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>舉例：當有 popup 出現時，背景使用紗幕霧化背景。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1eBiwYfz1_8oSLrlWN_9uNjA_TGVqRBS2%2Fcasestudies-rally-elevation-scrim.png" alt="霧化背景" title="霧化背景"></p><blockquote><p>心得：用色彩和霧化效果來做層級區分我覺得還蠻實用且能提升質感。但在霧化背景的方式，需要考量到開發者是否能配合。若還有捨棄不了 IE 瀏覽器的公司，則會因為裝置的限制而必須要有第二方案來替代霧化的方式，比如說改用暗色且透明度低的樣式。</p></blockquote><h1 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h1><p>有時候需要顯示多個圖表在一個螢幕上，且每個圖表包含多個 sections。為了能足夠表達狀態， Rally 的配色採用 1 個主色調加上 5 個配色。這個設計讓系統呈現可讀性高且獨特的信息圖表。</p><p>當三個圖表出現在同一個螢幕上，每個圖表使用其中的兩個顏色。</p><ol><li>Primary Green and Dark Green.</li><li>Orange and Yellow.</li><li>Purple and Blue.</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1TnwFyAe31SQDfL21qM9hZ1dcGQVRyB23%2Fcasestudies-rally-color-75percentzoom.png" alt="配色" title="配色"></p><h3 id="顏色主題"><a href="#顏色主題" class="headerlink" title="顏色主題"></a>顏色主題</h3><p>除了 6 色以外， Rally 還有一個針對這 6 個顏色延伸 10 色版的調色盤。如下圖。</p><ul><li>圓圈形狀代表在此 APP 中有用到的色版</li><li>“P” 代表主色調</li><li>其他沒有文字的圓圈則是配色</li></ul><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F17gZmwIGdzlDr-Hl2jTu2SSgc_ATBGaPt%2Fcasestudies-rally-color-palettes.png" alt="顏色主題" title="顏色主題"></p><blockquote><p>心得：我還沒用過那麼多的配色設計過，因為顏色越多，需要考量的點會更複雜，可能需要找時間嘗試看看。</p></blockquote><h1 id="文字與圖示"><a href="#文字與圖示" class="headerlink" title="文字與圖示"></a>文字與圖示</h1><p>Rally 用兩種字體：Eczar 和 Roboto Condensed。</p><ol><li>Roboto Condensed：介面預設字體，適合密集的佈局。</li><li>Eczar：只用在首要標題和純數字清單，適合呈現數據。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1t7i8LPPdmRkpdLV4u-p0oHvlhRTRbEb3%2Fcasestudies-rally-type.png" alt="字體" title="字體"></p><p>Rally 使用客製化的 icon 來呈現不同的 sections。</p><ol><li>所有圖示使用一樣的格線架構確保一致性。</li><li>所有 Rally 圖示</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1zqz0w6AEK_D9Kxb8ntWTb8lXJHkGjakk%2Fcasestudies-rally-icons.png" alt="圖示" title="圖示"></p><blockquote><p>心得：在數據表達的部分使用另一種字體這是一個不錯的點子，可以凸顯出數據的呈現，會想要嘗試看看。圖示的部分，在統一格線架構下設計很合理，但在一般專案時間不足的狀況下，通常我會直接使用 Material Icons ，省去設計圖示這塊。</p></blockquote><h1 id="形狀"><a href="#形狀" class="headerlink" title="形狀"></a>形狀</h1><p>元件根據大小使用不同的形狀類型，將形狀做分類可以讓螢幕一次放多個元件，分類包含：</p><ol><li>小元件 (S)：文字輸入區塊(Filled text fields)。</li><li>中元件 (M)：卡片(Cards)。</li><li>大元件 (L)：數據表格(Data Tables)。</li></ol><p>元件都是 0 圓角。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1RpTrPB3UprQBcFfZh6ZnI4xNtUEyThIQ%2Frally-shape.png" alt="形狀分類" title="形狀分類"></p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1HuOHmVEu0rKr8Bfes708nHM9osOWiHIm%2Frally-shape-b.png" alt="形狀元件" title="形狀元件"></p><h1 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h1><h3 id="卡片和清單"><a href="#卡片和清單" class="headerlink" title="卡片和清單"></a>卡片和清單</h3><p>在 overview 頁面使用卡片去呈現多個財務摘要，像是 Accounts 和 Bills。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1gDGHc1gTW-FsOvmmXjZ6i5UF_U9CS0Ga%2Fcasestudies-rally-cards-1.png" alt="卡片" title="卡片"></p><p>當點選 Accounts，摘要資訊卡片會展開顯示更多細節在清單中。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F128elUbInT1Me7Ra3gJGsndRDRq6JbAcn%2Fcasestudies-rally-list.png" alt="清單" title="清單"></p><h3 id="橫幅、提示bar和對話框"><a href="#橫幅、提示bar和對話框" class="headerlink" title="橫幅、提示bar和對話框"></a>橫幅、提示bar和對話框</h3><ul><li>橫幅(Banners)：比較不那麼重要的訊息選擇用橫幅的方式呈現，通常會搭配圖示。</li><li>提示 bar 和對話框(Snackbars and dialogs)：重要的訊息則是用提示 bar 和對話框呈現，並不會包含圖示。</li></ul><p>在平板上的橫幅呈現在導覽列旁。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1X3ShTSv1KbUgazHtrp7wzXApy36TH1na%2Fcasestudies-rally-alerts-tablet.png" alt="橫幅 - 平板" title="橫幅 - 平板"></p><p>在手機上的橫幅呈現在最上方。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1qcuHjBEJaoYI-_Vel0SlCTr4MXrlO3Ta%2Fcasestudies-rally-alerts-mobile.png" alt="橫幅 - 手機" title="橫幅 - 手機"></p><p>在桌機上的橫幅則是自己一個直欄位專門呈現。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1aEZcxrXD6L__739kup3Zzi5x73UFoIiz%2Fcasestudies-rally-alerts-desktop.png" alt="橫幅 - 桌機" title="橫幅 - 桌機"></p><p>重要訊息出現提示 bar 或對話框。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1UGbGapFacfgXBv5ijUiAjwNBKmw2v9yh%2Fcasestudies-rally-dialogs-mobile.png" alt="對話框" title="對話框"></p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1ccB2eglPzvAai1YC4QgkxgYlFErDtJFs%2Fcasestudies-rally-snackbar.png" alt="提示 bar" title="提示 bar"></p><blockquote><p>心得：沒有將這三個元件一起混用的經驗，頂多用其中的兩個而已，所以他這樣從訊息的重要性來區分用哪種元件的方式很值得參考。</p></blockquote><h1 id="交互動作"><a href="#交互動作" class="headerlink" title="交互動作"></a>交互動作</h1><p>Rally 在登入頁面顯示動畫 logo 增加 APP 的印象。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SdTGjLEmVjxVQfQHUxjrbWEO9GEnbHab%2F01-rally-launch.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>當用戶點開一個帳戶時，畫面會使用從內到外漸變展開的子頁面。點選返回後，則會從外到內漸變縮合回上一頁。加強使用者對深度的感知。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SjV2Eky-4d80UhOL4dm9k-EhG-r8IDm2%2F02-rally-parentchild.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>點選頁籤則是使用左右滑動的漸變動畫。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SkeVD6imJA_MwjipNR-DbNh1xw4au9yy%2F02-rally-tabs.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>當引入新頁面元素時會使用上方的進度條作為導引。使用時間差的轉圈動畫來凸顯圓餅圖。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SmqucW2ugbXboWf8SSjVngVtm63_VLxf%2F03-rally-sequencing.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>對話框使用彈跳的方式，以傳達訊息的急迫感。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SrDQ1yFyIyFYWewhvEIIBZ9Mm0S-6G2z%2F04-rally-overshoot.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：對於父子頁面漸變展開的動畫提升深度感知這點很認同，但在實作上還沒有真正的實行過，可以思考或和其他程式開發者討論實際在 web 或 app 撰寫時的執行難度。</p></blockquote><p>總結：讀完這篇研究後，對於 Material Design 在系統設計上的應用來說，我覺得是很實用的，畢竟要做系統通常都是要大量顯示資訊，如何有條理讓使用者理解顯示資訊變得很重要。這篇在配色和交互動作的部分是很值得參考的案例。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://material.io/design/material-studies/rally.html" target="_blank" rel="noopener">Material Studies - Rally</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Material Guildline 應該很多設計師都閱讀過 N 遍了，但要設計時如何在框架下做到客制這件事應該還是很疑惑。官網上提出了幾個業界的實例分享，這點讓我很有興趣，所以接下來我會一一對這些案例做介紹。因為我上班做的案子比較多是系統類的設計，所以我第一個想介紹比較類似的是 Rally 這個案例。下面內容會一邊介紹，一邊穿插自己在職場上的一些心得或想法。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/categories/UXUI/Material-Design/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/tags/Material-Design/"/>
    
  </entry>
  
</feed>
