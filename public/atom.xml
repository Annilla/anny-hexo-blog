<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anny Chang - F2E &amp; UI Designer</title>
  
  <subtitle>Design thinking is EVERYWHERE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://annilla.github.io/"/>
  <updated>2019-10-09T16:00:00.000Z</updated>
  <id>http://annilla.github.io/</id>
  
  <author>
    <name>Anny Chang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anny Chang&#39;s Resume - 履歷</title>
    <link href="http://annilla.github.io/3017/12/03/Resume/"/>
    <id>http://annilla.github.io/3017/12/03/Resume/</id>
    <published>3017-12-02T16:00:00.000Z</published>
    <updated>2019-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>My resume.</p><a id="more"></a><h1 id="Professional-Info"><a href="#Professional-Info" class="headerlink" title="Professional Info"></a>Professional Info</h1><h2 id="專長"><a href="#專長" class="headerlink" title="專長"></a>專長</h2><ul><li><p>設計 <code>UI</code> 介面、 <code>RWD</code> 網頁製作、 <code>SPA</code> 程式撰寫</p></li><li><p>擅用設計 <code>UI</code> 軟體（<code>Sketch</code>, <code>Adobe XD</code>, <code>Illustrator</code>, <code>Photoshop</code>）</p></li></ul><h2 id="研討會-工作坊"><a href="#研討會-工作坊" class="headerlink" title="研討會 / 工作坊"></a>研討會 / 工作坊</h2><table><thead><tr><th>時間</th><th>研討會 / 工作坊</th><th>分享主題</th></tr></thead><tbody><tr><td>2019.09</td><td>Kingston 2019 內訓</td><td><a href="https://www.canva.com/design/DADkDdvRR9A/JzfYMOKl6_2DLqeFH-BOww/view?utm_content=DADkDdvRR9A&amp;utm_campaign=designshare&amp;utm_medium=link&amp;utm_source=sharebutton" target="_blank" rel="noopener">Why Vue.js</a></td></tr><tr><td>2017.08</td><td>Kingston 2017 Mobile Team Workshop</td><td><a href="https://speakerdeck.com/annilla/use-webpack-plus-vue-loader-in-vs2017" target="_blank" rel="noopener">Use Webpack + Vue-Loader in VS2017</a></td></tr><tr><td>2016.11</td><td>前端魔法師十一月份小聚</td><td><a href="https://speakerdeck.com/annilla/facebook-instant-articles-ce-shi-dao-fa-bu" target="_blank" rel="noopener">Facebook Instant Articles - 測試到發布</a></td></tr></tbody></table><h2 id="證照"><a href="#證照" class="headerlink" title="證照"></a>證照</h2><table><thead><tr><th>時間</th><th>證書</th></tr></thead><tbody><tr><td>2017.03</td><td>國際 TOEIC 藍色證書 765分</td></tr><tr><td>2015.11</td><td>國家技術士網頁設計丙級證照</td></tr><tr><td>2014.12</td><td>國際 ACA Illustrator CS6 證照</td></tr><tr><td>2013.12</td><td>Adobe Master Of Rich Media Web Design Courses 證書</td></tr><tr><td>2013.06</td><td>中華民國斐陶斐榮譽學會榮譽會員 （碩士應屆第一名）</td></tr><tr><td>2013.03</td><td>國際 ACA Flash CS6 證照</td></tr><tr><td>2013.03</td><td>國際 ACA Dreamweaver CS6 證照</td></tr><tr><td>2012.11</td><td>國際 ACA Photoshop CS6 證照</td></tr><tr><td>2011.12</td><td>Adobe Digital Graphic Design Courses 證書</td></tr><tr><td>高中</td><td>全民英檢中級 證書</td></tr></tbody></table><h3 id="Adobe-Badges-國際ACA認證獎章"><a href="#Adobe-Badges-國際ACA認證獎章" class="headerlink" title="Adobe Badges (國際ACA認證獎章)"></a><a href="https://www.youracclaim.com/users/chiao-ni-chang" target="_blank" rel="noopener">Adobe Badges (國際ACA認證獎章)</a></h3><h2 id="受訓"><a href="#受訓" class="headerlink" title="受訓"></a>受訓</h2><table><thead><tr><th>時間</th><th>課程</th></tr></thead><tbody><tr><td>2019.09</td><td>台灣微軟技術中心 Microsoft DevOps Workshop</td></tr><tr><td>2018.10</td><td>29761 使用微軟 T-SQL 查詢資料</td></tr><tr><td>2017.09</td><td>Skilltree JavaScript 實務測試新手班 第三梯</td></tr><tr><td>2017.06</td><td>網站測試開發 with WebdriverIO 實戰講堂</td></tr><tr><td>2014.11</td><td>色彩溝通立即上手</td></tr><tr><td>2014.10</td><td>網路活動創意規劃與會員行銷管理</td></tr><tr><td>2014.09</td><td>如何提升網路關鍵字行銷的成效</td></tr><tr><td>2014.09</td><td>JR-基層管理幹部工作關係與團隊力提昇</td></tr><tr><td>2014.08</td><td>eDM電子郵件行銷及電子報經營</td></tr><tr><td>2014.08</td><td>JM-基層幹部工作改善與執行力提昇培訓</td></tr></tbody></table><h1 id="Work​-Experience​​​"><a href="#Work​-Experience​​​" class="headerlink" title="Work​ Experience​​​"></a>Work​ Experience​​​</h1><table><thead><tr><th>時間</th><th>公司</th><th>職稱</th></tr></thead><tbody><tr><td>2017.06.12 - NOW</td><td>Kingston Technology</td><td>UI Designer &amp; Front-end Developer</td></tr><tr><td>2015.04.06 - 2017.06.11</td><td>JUKSY 街星</td><td>網頁UI設計 / 網頁前端工程師</td></tr><tr><td>2013.07.01 - 2015.04.03</td><td>微璽科技股份有限公司</td><td>商業設計 / 網頁UI設計</td></tr></tbody></table><h1 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h1><table><thead><tr><th>時間</th><th>學校</th></tr></thead><tbody><tr><td>2011 - 2013</td><td>國立台灣師範大學, 數學系碩士班數學教育組</td></tr><tr><td>2007 - 2011</td><td>國立台灣師範大學, 數學系學士班</td></tr><tr><td>2004 - 2007</td><td>中山女高</td></tr></tbody></table><h1 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h1><ul><li><p>SKETCH</p></li><li><p>ADOBE XD</p></li><li><p>PHOTOSHOP</p></li><li><p>ILLUSTRATOR</p></li><li><p>VSCODE / VS2017</p></li><li><p>GITHUB</p></li><li><p>SOURCETREE</p></li><li><p>NPM</p></li><li><p>WEBPACK / GULP</p></li></ul><h1 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h1><ul><li><p>HTML / PUG</p></li><li><p>CSS / SASS(SCSS) / STYLUS / POSTCSS</p></li><li><p>JS / JQUERY / VUE / ES6</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My resume.&lt;/p&gt;
    
    </summary>
    
      <category term="Resume" scheme="http://annilla.github.io/categories/Resume/"/>
    
    
  </entry>
  
  <entry>
    <title>Anny Chang&#39;s Portfolio - 作品集</title>
    <link href="http://annilla.github.io/3017/12/01/Portfolio/"/>
    <id>http://annilla.github.io/3017/12/01/Portfolio/</id>
    <published>3017-11-30T16:00:00.000Z</published>
    <updated>2019-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>My portfolio.</p><a id="more"></a><h1 id="Design-Collection"><a href="#Design-Collection" class="headerlink" title="Design Collection"></a>Design Collection</h1><h2 id="Behance-https-www-behance-net-annilla"><a href="#Behance-https-www-behance-net-annilla" class="headerlink" title="Behance: https://www.behance.net/annilla"></a>Behance: <a href="https://www.behance.net/annilla" target="_blank" rel="noopener">https://www.behance.net/annilla</a></h2><h1 id="Web-Collection"><a href="#Web-Collection" class="headerlink" title="Web Collection"></a>Web Collection</h1><table><thead><tr><th>作品</th><th>分類</th><th>內容</th></tr></thead><tbody><tr><td>系統</td><td>公司</td><td>Depanel (Web)</td></tr><tr><td>系統</td><td>公司</td><td>IND4 (Web)</td></tr><tr><td>系統</td><td>公司</td><td>SSO (Web)</td></tr><tr><td>系統</td><td>公司</td><td>OPscan (Web)</td></tr><tr><td>網頁</td><td>公司</td><td>Online User Manual (Hexo)</td></tr><tr><td>網頁</td><td>公司</td><td>Reflow Supplement Page (Web)</td></tr><tr><td>系統</td><td>公司</td><td>System Profile Management (Web)</td></tr><tr><td>系統</td><td>公司</td><td>NXT (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Workflow Compliance (Web)</td></tr><tr><td>網頁</td><td>公司</td><td>Kingston Mobile Team Portal (Hexo)</td></tr><tr><td>系統</td><td>公司</td><td>B2B (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Material Requirement Planning (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Empolyee Authentication Service (Web)</td></tr><tr><td>系統</td><td>公司</td><td>Notes SignOff APP (Mobile Web App)</td></tr><tr><td>系統</td><td>公司</td><td>Quotation System (Web &amp; iOS App Design)</td></tr><tr><td>網站</td><td>綜合</td><td><a href="https://www.juksy.com/" target="_blank" rel="noopener">JUKSY 街星</a></td></tr><tr><td>網頁</td><td>展覽</td><td><a href="https://www.juksy.com/events/avengersstation" target="_blank" rel="noopener">《復仇者聯盟》世界巡迴展</a></td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/MMPR2017" target="_blank" rel="noopener">《金剛戰士》Power Rangers GO GO！</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/idareyoujune" target="_blank" rel="noopener">放肆越限 ● I Dare You</a> - 陳建州 &amp; 四葉草</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/dope2017may" target="_blank" rel="noopener">回家才DOPE ● Home Sweet Home</a> - 兄弟本色 &amp; 邵雨薇</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/northsouth2017April" target="_blank" rel="noopener">南北潮什麼 / From North to South</a> - 盧廣仲 &amp; 柯佳嬿</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/outofcontrol2017" target="_blank" rel="noopener">瘋面人物 / Out of control</a> - 許瑋甯 &amp; 吳慷仁</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1702valentine/" target="_blank" rel="noopener">我單故我在 Valentine, So what?</a> - 藍正龍</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1701F5reborn" target="_blank" rel="noopener">人生F5鍵 Reborn</a> - 瑤瑤</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1612waittoaction" target="_blank" rel="noopener">扳勢回潮　等不及的蓄勢待發！ Wait  to action</a> - 吳建豪</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/assassin2016creed" target="_blank" rel="noopener">刺客教條 12/28(三)跨年最強檔</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1611donjudge" target="_blank" rel="noopener">Don’t Judge me！玩跳．TONE</a> - 安心亞</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/fantastic2016beasts" target="_blank" rel="noopener">《怪獸與牠們的產地》JUKSY特別企劃</a></td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611angeliapets" target="_blank" rel="noopener">耍YOUNG無極限，玩酷做自己</a> - Angelia  &amp;  Pets</td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611samsung360" target="_blank" rel="noopener">精彩視界 一觸可及</a> - SAMSUNG</td></tr><tr><td>網頁</td><td>廠商</td><td><a href="https://www.juksy.com/events/brand201611fashioncity" target="_blank" rel="noopener">分享屬於你的[城市時尚]─你的城市‧由你演繹</a> - SAMSUNG 打卡分享照片</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1610bromance" target="_blank" rel="noopener">The Bromance！絕對合拍</a> - 蕭敬騰</td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1609intoblack" target="_blank" rel="noopener">大勢黑潮 INTO BLACK</a> - SPEXIAL</td></tr><tr><td>網頁</td><td>電影</td><td><a href="https://www.juksy.com/events/train2016zombie" target="_blank" rel="noopener">屍速列車 屍裡逃生</a></td></tr><tr><td>網頁</td><td>遊戲</td><td><a href="https://www.juksy.com/events/pokemon2016go" target="_blank" rel="noopener">成神之路有你有我！寶可夢全攻略</a></td></tr><tr><td>網頁</td><td>名人</td><td><a href="https://www.juksy.com/events/month1608hithot" target="_blank" rel="noopener">熱浪來襲HITHOT</a> - 劉以豪</td></tr><tr><td>網頁</td><td>穿搭</td><td><a href="https://www.juksy.com/events/summer2016girlstyle" target="_blank" rel="noopener">熱辣無極限！2016年夏日潮妞穿搭公式</a></td></tr><tr><td>網頁</td><td>穿搭</td><td><a href="https://www.juksy.com/events/summer2016menstyle" target="_blank" rel="noopener">型到出火！體感41度的TO DO LIST</a></td></tr><tr><td>網頁</td><td>投票活動</td><td>JUKSY超新星（連結失效）</td></tr><tr><td>網頁</td><td>名人</td><td>用歌聲唱出最真的自己（連結失效） - 汪小敏</td></tr><tr><td>網站</td><td>公司</td><td><a href="http://www.taxxtron-tayu.com/" target="_blank" rel="noopener">京達國際股份有限公司</a></td></tr><tr><td>網站</td><td>購物</td><td><a href="http://web.ntnu.edu.tw/~60040004S/" target="_blank" rel="noopener">LOVEBABY讓您在家也能呵護寶貝</a></td></tr><tr><td>網站</td><td>研討會</td><td><a href="http://tame.tw/pme36/" target="_blank" rel="noopener">PME36</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My portfolio.&lt;/p&gt;
    
    </summary>
    
      <category term="Portfolio" scheme="http://annilla.github.io/categories/Portfolio/"/>
    
    
      <category term="Portfolio" scheme="http://annilla.github.io/tags/Portfolio/"/>
    
      <category term="作品集" scheme="http://annilla.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Use Cypress with Cucumber for UI Testing</title>
    <link href="http://annilla.github.io/2020/01/04/Testing/Use-Cypress-ui-testing/"/>
    <id>http://annilla.github.io/2020/01/04/Testing/Use-Cypress-ui-testing/</id>
    <published>2020-01-03T16:00:00.000Z</published>
    <updated>2020-01-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>隨著時間越長，專案總會越寫越多功能，可是如果每次重構後都要人工測試，會花費很多不必要的時間。所以為了往後能安心的重構程式，我想要一個可以方便 debug 且使用簡易的 UI Testing Framework。參考了許多架構後，決定要使用 cypress + cucumber 來寫測試。</p><a id="more"></a><p><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> 的好處是對於開發者非常友善，開發時在 chrome 瀏覽器模擬，且有變更都會自動觸發 reload，大大減少每次重跑的繁瑣動作，且每個步驟的紀錄都會視覺化的呈現在左方，Debug 時還可隨時搭配 chrome dev tool，真的是開發者的救星呀～如果要搭配 CI 的話，他也有 headless 模式啟用 electron 來跑模擬，出來的 log 也是非常漂亮還會順便錄影！</p><p><a href="https://cucumber.io/" target="_blank" rel="noopener">Cucumber</a> 的好處是他可以寫可讀性高的測試情境，讀寫上很直覺，搭配不同 tag 的功能，可以把測試情境分類的很清楚。</p><p>接著我們就來介紹怎麼結合 cypress 和 cucumber 吧～</p><h1 id="安裝-cypress-cucumber"><a href="#安裝-cypress-cucumber" class="headerlink" title="安裝 cypress + cucumber"></a>安裝 cypress + cucumber</h1><p>專案內安裝 cypress</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cypress --save-dev</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 加上啟動 cpress 指令並執行 <code>npm run cypress:open</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"cypress:open"</span>: <span class="string">"cypress open"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若啟動成功會自動建立測試情境，確定安裝完成後，可刪掉範例。</p><p><img src="https://lh3.googleusercontent.com/OSU2uLttYHh0s8kaXnZocadud55Ocg3pyVv3_qE4xK7X6DoKsLxdu5_xbRUpiqGEAQlgFuqg2JoCYQBnUQ6GjDpyBz7th_1HzIeu9jR_GcWq5h1_jYaJuiqN7NESfbV8md-WAfZA1juon6IzsD173Y3-yoF2WLfnVrX_A8TPLrWajG67KGg4rBCDDzdE2hQmEb4ZH8JSKSgSOPwUbDsAyfqjzWDeV960edneVbOF4QubqRro6e4E19g5W3AxN1csRix71ltckQjgzu_gGE4lqxLN0khOgRCDwORgTmlhDipHi9Gk10l2hPuD-1w673agOUFqJdZf8zCdK3EIHxOsj2hJv7Za6iz3r7cjp3FqYTlKjBpoz3w_fWASXHCokwzq7h5hyzYS4aj58CWN4MSKd08zPpP-xKdK-f5fdkvh0vs0J6T2IrQYCaA9RSsaAMp6DHD9FwFe0wN1T2oj8rLuQ5fUMbyq0G8IzFUi8Hbyw06yD_lWMaFdGj-eoXug0tfAgAygE3L06DZalwhltkyIajN4h2iFu922dAEJQyEH2UvF_N8mjXShSrZdSmJ-WpJANLnzQqgjaO51x2Ub0zrd1nLuzuG8eSGyRHtEN17YGmhOEvcnX7O7pDEbrM4VeAKuvJ80-HUzF9Pe3lPtoI6tK1iN5wVQPzKTHvMyym576jk1sKUdv2zwo6nXUFVD_z_7WoVNP8E2OtZREC-aDlKy4LSbJP0P206fRR4VlBcmq8DZcdO1AA=w1720-h1196-no" alt="npm run cypress:open" title="npm run cypress:open"></p><p>關掉 cypress 視窗，接下來我們安裝 cucumber plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev cypress-cucumber-preprocessor</span><br></pre></td></tr></table></figure><p>在 <code>cypress/plugins/index.js</code> 設置 plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cucumber = <span class="built_in">require</span>(<span class="string">'cypress-cucumber-preprocessor'</span>).default</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">'file:preprocessor'</span>, cucumber())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>cypress.json</code> 設置測試檔案位置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"testFiles"</span>: <span class="string">"**/*.feature"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 設置 cucumber 的情境預設非 global，這樣可以區分是否要用 global 的情境。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"cypress-cucumber-preprocessor": &#123;</span><br><span class="line">  "nonGlobalStepDefinitions": true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>把原本 cypress/integration, cypress/fixtures 資料夾的檔案都刪除，就可以開始寫一個測試囉～</p><h1 id="寫一個測試"><a href="#寫一個測試" class="headerlink" title="寫一個測試"></a>寫一個測試</h1><p>新增 <code>cypress/integration/Google.feature</code></p><figure class="highlight feature"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># language: zh-TW</span></span><br><span class="line">功能: Google</span><br><span class="line">    <span class="symbol">*</span> 前往 Google 首頁</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Google</span></span><br><span class="line">    場景: 前往 Google 首頁</span><br><span class="line">        假設 前往 Google 網址</span><br><span class="line">        那麼 看到標題包含 <span class="string">"Google"</span></span><br></pre></td></tr></table></figure><p>@Google 這個 tag 是讓你能將測試做分類，這樣之後要跑測試的時候，可以指定執行特定類別。</p><p>新增 <code>cypress/integration/Google/google.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Given &#125; <span class="keyword">from</span> <span class="string">"cypress-cucumber-preprocessor/steps"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'https://google.com'</span></span><br><span class="line"></span><br><span class="line">Given(<span class="string">'前往 Google 網址'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(url)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>若是放在自訂的資料夾內，則情境不會被共用，下面示範將看到標題這個結果放在 global 的情況。</p><p>新增 <code>cypress/integration/common/i_see_string_in_the_title.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Then &#125; <span class="keyword">from</span> <span class="string">"cypress-cucumber-preprocessor/steps"</span>;</span><br><span class="line"></span><br><span class="line">Then(<span class="string">`看到標題包含 &#123;string&#125;`</span>, (title) =&gt; &#123;</span><br><span class="line">  cy.title().should(<span class="string">'include'</span>, title)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>這樣我們就放好 global 的情境囉～其他情境若是要共用的話就可以不用再寫一次。</p><h1 id="測試～跑起來吧！"><a href="#測試～跑起來吧！" class="headerlink" title="測試～跑起來吧！"></a>測試～跑起來吧！</h1><p>因為剛剛有使用 tag 的功能，所以我們可以把 npm script 改成指定執行特定標籤，<code>package.json</code> 修改如下。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "cypress:open": "cypress open -e TAGS=@Google"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>再次執行 <code>npm run cypress:open</code>。跳出 cypress 視窗後，點選 Google.feature 開始測試，成功就會出現下面的畫面囉～</p><p><img src="https://lh3.googleusercontent.com/3NKaZFg0tnUSbAdvXVq8YQ2y2nVZeUmNQ1oiCujS9rltLp-920w2uP4-bY38Wqg3aDooYB4BBR9wB_ndxabv-8y0r0Q_PTeKF38zHSa4BM5rNksa9X65HNTG_DtguFuB6W-wzSlno2A8l0c1aZFl-bgpmXoUCgKQmS1mAH-Ep5CpOZ7VMeebFambMqaoSBsYpWlhEzneck1Luk4oo-n1ilw1U4T8sAbZ61D00-gcPdNPD4pJNIoJjwsoQys38NbQGlGKFjoCOP4qZEn84VDuY_sRBQaUbV1LUKBzoJWs0QzgO2cn4WAVfQ9b6SiM50VivyHre9awThFdy8FPCteyIUW185Ssf0k8HtKPghH9blF4fL5iigVO97F_VYby50hlX21vAQUNCk8jtIAPp9NHqVKuWditNgKKlsUpVwRS-UVsBBvE9ChpIh3UrDlyb0otGggx2CgBzu3CASL5vxSElUtGuKdUddjD5HUojNUD2Ua_pZBHr1uEOumD6L5ypSlkx5GbhWjxTB9ROqTtsr6w7fOLH0KcjG0cfSnap9igjoJ-eVI0oKFgkJv1gqXz8hyQEgKW0_xWwBay0p1hVjG2zEVHrHByzgdIzWZ0fdWe1NVdcavOvHhfO7bnYv-EXrVFcfH_EZRqRV02oK3Q3Zl-wFh6v2oJ7HIwdiwh8nOBep4g3QI0jKrd30f3hmFOgQZlUieKrTjZQ9xh8ZM47RZbFs1elT9VLPAp0unTXixIl1w7VyYunA=w2206-h1378-no" alt="npm run cypress:open" title="npm run cypress:open"></p><p>今天的練習放在 <a href="https://github.com/Annilla/cycpress-cucumber-practice/tree/v1.0" target="_blank" rel="noopener">Github</a>，下回見～</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a></li><li><a href="https://cucumber.io/" target="_blank" rel="noopener">Cucumber</a></li><li><a href="https://github.com/TheBrainFamily/cypress-cucumber-preprocessor" target="_blank" rel="noopener">cypress-cucumber-preprocessor</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隨著時間越長，專案總會越寫越多功能，可是如果每次重構後都要人工測試，會花費很多不必要的時間。所以為了往後能安心的重構程式，我想要一個可以方便 debug 且使用簡易的 UI Testing Framework。參考了許多架構後，決定要使用 cypress + cucumber 來寫測試。&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="http://annilla.github.io/categories/Testing/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
      <category term="Cypress" scheme="http://annilla.github.io/tags/Cypress/"/>
    
      <category term="Testing" scheme="http://annilla.github.io/tags/Testing/"/>
    
      <category term="Cucumber" scheme="http://annilla.github.io/tags/Cucumber/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core 3.0 SPA with Vue-Cli 3 - Make Nuget Template</title>
    <link href="http://annilla.github.io/2019/12/07/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3-make-nuget-template/"/>
    <id>http://annilla.github.io/2019/12/07/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3-make-nuget-template/</id>
    <published>2019-12-06T16:00:00.000Z</published>
    <updated>2019-12-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇寫過 <a href="../../../../../2019/12/07/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3-make-nuget-template/">.NET core 3 + Vue-cli 3 的起手式</a>，這次我們要把做好的專案寫成 dotnet new 的範本，這樣以後就不用做這麼多繁瑣的步驟啦！</p><a id="more"></a><h1 id="製作範本"><a href="#製作範本" class="headerlink" title="製作範本"></a>製作範本</h1><h2 id="Step1-將內容放到-Content-資料夾"><a href="#Step1-將內容放到-Content-資料夾" class="headerlink" title="Step1. 將內容放到 Content 資料夾"></a>Step1. 將內容放到 Content 資料夾</h2><p>新增 <code>Content</code> 資料夾，把原本專案的檔案放到 Content 底下。</p><p><img src="https://lh3.googleusercontent.com/DM0FGhjan-_q6Kldvpdse7NxiCwGNlimwMYeakJ-kS-P5jyKz01UeewDUCCNVj-P81V9dssVgwmszQlwwBi40pZuFMI-EFnoREY6RmVcToZZTAx6zi29PEbH7d2eKEQcFSIM7CharolWbPK_UC1HngzN6u1PVKfYu4qhIETIUPccN9zRjGUfBwCOexzAMB_JWzoCy1nhR09B8n3x8zVdcQ8KHQL8UkjlJT7EECU7JE4hvWjNKbalwzROwjGlJHR8Rm_8Arje9iN3v3d4hvewzRtCWx8zpzjxMyPgWYYX-jofabaeM6rcAOhCId0BqCTjQ_ObVpRUK_lE1Vf1O2jqFRjOvas1Ll9Z5dXjuis_KXDsMyvcogE-Q6HzzzmcI5qyDK9FrB93N-JBCJD33fsfIeYbwIvevNOejtO-UNUvRces2Xxmj4RzjKVxBPiYBayAILx4PEqEY9VwKlBuDFVJZXAO1rF9RVPzVlmARhNG7_ezALQSlDXVIG1nAEA3uwXV4Ry3vxsb4N662yy2OufzZ-6W8z_C69WvDmPHCZb_J2eaQX6zQ_3KNlO1AwjrTlGNEGRw3eUudGQAwND2PkC0Lj-HeCZWNkPZwY8ToMQ2dKDrrow3px3qjqB6hbU8nCkkdO6j2C8qqFZnR0ETIH-7V7OyJE0jLu1c-exfR0bUmm1e__deylIbqI8yFG3uP3c-bXoXec0pMyU7TqUMshAaQAhslIAZ4m1hquCsOkls1hKIKnzQyQ=w636-h1324-no" alt="將內容放到 Content 資料夾" title="將內容放到 Content 資料夾"></p><h2 id="Step2-設定-template-json-nuspec"><a href="#Step2-設定-template-json-nuspec" class="headerlink" title="Step2. 設定 template.json, .nuspec"></a>Step2. 設定 template.json, .nuspec</h2><p>* 在 Content 資料夾內新增 <code>.template.config</code> 資料夾，新增 <code>template.json</code></p><p>Content/.template.config/template.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"http://json.schemastore.org/template"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Anny Chang"</span>,</span><br><span class="line">  <span class="attr">"classifications"</span>: [ <span class="string">"Web"</span>, <span class="string">"MVC"</span>, <span class="string">"SPA"</span> ],</span><br><span class="line">  <span class="attr">"identity"</span>: <span class="string">"Anny.DotnetCore.VueCli"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Anny Dotnet Core 3 With Vue Cli 3"</span>,</span><br><span class="line">  <span class="attr">"shortName"</span>: <span class="string">"annydotnetvuecli"</span>, </span><br><span class="line">  <span class="attr">"tags"</span>: &#123;</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"C#"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"item"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sourceName"</span>: <span class="string">"dotnet_core_with_vue_cli3"</span>,</span><br><span class="line">  <span class="attr">"preferNameDirectory"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>屬性</th><th>說明</th></tr></thead><tbody><tr><td>$schema</td><td>使用 template schema</td></tr><tr><td>author</td><td>作者名</td></tr><tr><td>classifications</td><td>dotnet new 列表顯示的分類</td></tr><tr><td>identity</td><td>辨識此 Template 的唯一 ID</td></tr><tr><td>name</td><td>Template 顯示名稱</td></tr><tr><td>shortName</td><td>dotnet new 使用此 Template 的簡寫</td></tr><tr><td>tags</td><td>dotnet new 列表顯示的語言</td></tr><tr><td>sourceName</td><td>這個是到時候使用 template 時，可以將專案名稱替代成要的</td></tr><tr><td>preferNameDirectory</td><td>dotnet new 沒有指定專案名稱時，他會自動命專案名為所在資料夾的名稱</td></tr></tbody></table><ul><li>在最外層新增 .nuspec 檔案。</li></ul><p>Anny.DotnetCore.Template.nuspec</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">package</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">metadata</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Anny.DotnetCore.Template<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Anny DotnetCore Template Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      Anny's DotnetCore Template for example.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authors</span>&gt;</span>Anny Chang<span class="tag">&lt;/<span class="name">authors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">      ASP.NET Core Teamplate for Vue Cli.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packageTypes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">packageType</span> <span class="attr">name</span>=<span class="string">"Template"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">packageTypes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">files</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">"Content/**/*"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">exclude</span>=<span class="string">"**/node_modules/**;**/package-lock.json;**/bin/**;**/obj/**;**/.vs/**;**/.vscode/**;**/wwwroot/**"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">target</span>=<span class="string">"Content"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">files</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>metadata 屬性</th><th>說明</th></tr></thead><tbody><tr><td>id</td><td>dotnet new 安裝 nuget template 識別唯一ID</td></tr><tr><td>version</td><td>nuget package version</td></tr><tr><td>title</td><td>nuget 官網上對於 package 的標題</td></tr><tr><td>description</td><td>nuget 官網上對於 package 的描述</td></tr><tr><td>authors</td><td>nuget 官網上對於 package 的作者名</td></tr><tr><td>summary</td><td>nuget 官網上對於 package 的摘要</td></tr><tr><td>packageType</td><td>告知 nuget package 類行為 Template</td></tr></tbody></table><table><thead><tr><th>files 屬性</th><th>說明</th></tr></thead><tbody><tr><td>src</td><td>指定來源資料夾位置</td></tr><tr><td>exclude</td><td>排除特定檔案</td></tr><tr><td>target</td><td>指定生成資料夾位置</td></tr></tbody></table><h2 id="Step3-上傳-nuget-package"><a href="#Step3-上傳-nuget-package" class="headerlink" title="Step3. 上傳 nuget package"></a>Step3. 上傳 nuget package</h2><p>執行 nuget cli 指令，若還沒有安裝請連<a href="https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools#nugetexe-cli" target="_blank" rel="noopener">這裡</a>。</p><p>執行下列 nuget 指令打包 package。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget pack</span><br></pre></td></tr></table></figure><p>將產生出來的 .nupkg 檔案上傳至官網。等待官網審核成功後就可以使用 Template 囉～</p><p><img src="https://lh3.googleusercontent.com/yLk0gObRHknv2ngdI8O11NeDcMkR29sCTV7ppUmQ-IEKBunro_4vpsh-TcIlpQYXj1ujWf_cZ6_lp-vl6oBui1KJYT59C4BT2GNvkv8qg0CMC93NWgio63OTuHf_344IVhUuX_CAgdMrE153QPu4soqcBaUlF0Ax3dYF0x6sHyyyGP8x8YjslbFdMVrMxTus7AfcC0h0b3Mzz19iUmzCu5OvB_5iVjNYnMNrMCHwURSvQP0J1w9PVBiJykWluB73IMh-EGcTIxH_6eyvArkdz_-pz-_Am3ZNdWiUXQml86aAJb7Tm6OJqcRlxNuO_nQpFW6JtUQVRWlkA85Xb32_uG9JymE_zrG47g6p982LlXTUv3kJC5RfjebKnbwlVDxoO7J501XO1abfjTKWzbSx6ERhyVjJE0CzJg2qiEKtOmXsJbAew0tJiSjH2H_ri-adgAudtsPS-Rair5WVtpB0AHaRjLcmZG4L1beOmWOcK1_0RejtWgE_Lwx19ngM1D8fuXsNd3uX_EGua57gR-0DlUpDwfknu14k9YuG9Wdz_TMmacAdfPFcR38vjLuGCzcHZ3RtSv-vmy-42x4KN5mKARKYKbmYptqVijJYN2yuI_W7LlVA9ruHKkLaBXKW8tHRyiWTx4nOvGvuLlNw6Qv9PaVp3ch7Ml8_lOnmChtNaCoknd4wE_txHXjegvpypmHrxE-RDGEw9LCGjn-Ny8R5p0yLSI8OoSho5ZcfdSkYyP-fNllqew=w2560-h1376-no" alt="nuget package 審核成功" title="nuget package 審核成功"></p><h1 id="使用範本"><a href="#使用範本" class="headerlink" title="使用範本"></a>使用範本</h1><p>執行下列指令安裝範本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new --install Anny.DotnetCore.Template::1.0.3</span><br></pre></td></tr></table></figure><p>成功會看到列表出現安裝的範本名稱。</p><p><img src="https://lh3.googleusercontent.com/bEIRs1iYDfjJPgiOMe5tbywr7VZZh_RY9rw8mRHrA4BiWNwSzDO98dQrZ4CNe6QONzhdr1DQOrLJRw_OjjGie1lbOkCwlyTMqYb-5bV-3kL0McGF2mzzsbCJBuKRBxG2J4_7D3StYlRJoNbwb9GkOxDiB_uV0E2jY10ZNc5Uh0W7aaAx56zcLz7J7aWZCpLJfSBPBHXtXEDn6N3vnYwj2W81s_UHv95Zy78tJrRPrpWfk-FvLQM4LLnfKmTL0Ta0bv3eTBGYyzBXZKRuWIpkXeIjgmHh6eWXECGrM1LQ47tCYFTQ5vxJ4_eG0J75qOOYuZNmEl2fWHXYjlDjrr2e03lIPC5SFcgcymDvRViA9ZKtWooNCpirpA4xmWwHuMCr2-krpuudLCnOD0JmgYG2vfJ5yYjUvOc7IPuvrpHHMGZHNmOlVt6KRgd-B4n1D3C1QrFQ_l-hi_GyBXQNiHOj8roiW4vAh0WWmh2TjevORVh43ZOQ6WNWU8kLta63wAkWRCpBRcOP3_4f69fy3Wpkjex9T025guk11itdMNRkdDLNR8DUuz7-fLJmy1fI_6_urs9-lodG7NtKAxAtaxh5RKf2ZuW0ZA7MITnXFX28BMazKheqQEnn5F3fuaWoJVipRkawc8xTwN9AHh5o7NYRqcp_Rto3KP9NPAwy_sPPY2-SaDexOvRsZHpM9ib7LebSDb7iA7YLcAjOYOhJOZnFWls8Q56Wtl7VxrZC_1gPSF9aRGcPEw=w2310-h1354-no" alt="安裝範本成功" title="安裝範本成功"></p><p>請去一個新資料夾來測試範本。<br>不指定名稱執行的話，專案名稱會自動取名為當前位置的資料夾名稱，如下指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new annydotnetvuecli</span><br></pre></td></tr></table></figure><p>若要在當下位置建立自己命名的專案名稱，可傳入參數如下指令。 (XXX 請替換成你要的專案名稱)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new annydotnetvuecli -n XXX</span><br></pre></td></tr></table></figure><p>若要安裝新版本的範本，記得解除舊的版本，解安裝請執行下列指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new -u Anny.DotnetCore.Template</span><br></pre></td></tr></table></figure><p>這樣就完成我們的模板測試囉～今天的 code 放在 <a href="https://github.com/Annilla/dotnet-core-with-vue-cli3/tree/v2.0" target="_blank" rel="noopener">github</a>。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://devblogs.microsoft.com/dotnet/how-to-create-your-own-templates-for-dotnet-new/" target="_blank" rel="noopener">How to create your own templates for dotnet new</a></li><li><a href="https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools#nugetexe-cli" target="_blank" rel="noopener">安裝 NuGet 用戶端工具</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇寫過 &lt;a href=&quot;../../../../../2019/12/07/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3-make-nuget-template/&quot;&gt;.NET core 3 + Vue-cli 3 的起手式&lt;/a&gt;，這次我們要把做好的專案寫成 dotnet new 的範本，這樣以後就不用做這麼多繁瑣的步驟啦！&lt;/p&gt;
    
    </summary>
    
      <category term=".NET Core" scheme="http://annilla.github.io/categories/NET-Core/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
      <category term=".NET Core" scheme="http://annilla.github.io/tags/NET-Core/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="Webpack" scheme="http://annilla.github.io/tags/Webpack/"/>
    
      <category term="SPA" scheme="http://annilla.github.io/tags/SPA/"/>
    
      <category term="MVC" scheme="http://annilla.github.io/tags/MVC/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term="Nuget" scheme="http://annilla.github.io/tags/Nuget/"/>
    
      <category term="Template" scheme="http://annilla.github.io/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>Use git extention in VScode, goodbye sourcetree</title>
    <link href="http://annilla.github.io/2019/11/23/VScode/Use-git-extention-in-VScode-goodbye-sourcetree/"/>
    <id>http://annilla.github.io/2019/11/23/VScode/Use-git-extention-in-VScode-goodbye-sourcetree/</id>
    <published>2019-11-22T16:00:00.000Z</published>
    <updated>2019-11-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>因為 sourcetree 在公司內網些時候會一直跳出輸入 AD 帳密的視窗，前陣子因為換了密碼，結果舊密碼被記住，結果每用一次 sourcetree 就會被鎖一次帳號，真是冤望啊！後來索性就決定刪掉 sourcetree ，想說如果全部都在 vscode 一次解決就完美了～所以就開始我的 vscode extention 探索之旅。</p><a id="more"></a><p>首先，得先理出哪些 sourcetree 的功能是我常用的，並找到相對應的 vscode extention 。想要的功能如下：</p><ol><li><p>資料夾整理專案功能：因為不可能記住 repo 名稱對應的專案，所以若能像 sourcetree 有分資料夾的功能，就能快速找到專案對應的 repo。</p></li><li><p>Git Stash 功能：能暫存程式碼片段在本機。隨時可調用。</p></li><li><p>Git Graph 功能: 能看清楚每個 branch 的 commit 圖形化介面。</p></li></ol><p>接著，我們就來看是哪些 vscode extention 吧~</p><h1 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h1><p><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager" target="_blank" rel="noopener">Project Manager</a> 能用它做資料夾整理專案的功能，而且他在 vscode 還可以做 open in new window 的動作，整合開啟程式片段的功能感覺超方便！</p><p><img src="https://github.com/alefragnani/vscode-project-manager/raw/master/images/vscode-project-manager-side-bar.gif" alt="Project Manager"></p><h1 id="Git-Stash"><a href="#Git-Stash" class="headerlink" title="Git Stash"></a>Git Stash</h1><p><a href="https://marketplace.visualstudio.com/items?itemName=arturock.gitstash" target="_blank" rel="noopener">Git Stash</a> 能用它做 git stash 的相關動作，而且他整合在 vscode 的 git 頁籤中，不會像 gitLens 跑到另一個頁籤，我覺得整合的很好，操作又簡潔。</p><p><img src="https://raw.githubusercontent.com/arturock/vscode-gitstash/master/resources/docs/screencast.gif" alt="Git Stash"></p><h1 id="Git-Graph"><a href="#Git-Graph" class="headerlink" title="Git Graph"></a>Git Graph</h1><p><a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph" target="_blank" rel="noopener">Git Graph</a> 能用它看到 git 圖形，也可以透過滑鼠右鍵做 branch 切換、加 tag、cherry pick 等動作，最重要的是他也整合在 git 頁籤中，所以就可以把 git 功能就統一在 vscode 原始 git 頁籤中，整個融合在 vscode 介面中，再也不用另外開 sourcetree 了！</p><p><img src="https://github.com/mhutchie/vscode-git-graph/raw/master/resources/demo.gif" alt="Git Graph"></p><p>透過以上三個 vscode extention ，就能永遠跟 sourcetree 說 goodbye 了～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為 sourcetree 在公司內網些時候會一直跳出輸入 AD 帳密的視窗，前陣子因為換了密碼，結果舊密碼被記住，結果每用一次 sourcetree 就會被鎖一次帳號，真是冤望啊！後來索性就決定刪掉 sourcetree ，想說如果全部都在 vscode 一次解決就完美了～所以就開始我的 vscode extention 探索之旅。&lt;/p&gt;
    
    </summary>
    
      <category term="VScode" scheme="http://annilla.github.io/categories/VScode/"/>
    
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term="Git" scheme="http://annilla.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core 3.0 SPA with Vue-Cli 3 - Start New Project</title>
    <link href="http://annilla.github.io/2019/10/10/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3/"/>
    <id>http://annilla.github.io/2019/10/10/DotnetCore/NET-Core-3-SPA-with-Vue-Cli-3/</id>
    <published>2019-10-09T16:00:00.000Z</published>
    <updated>2019-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前有寫過一篇 <a href="../../../../../2017/12/02/DotnetCore/NET-Core-2-0-SPA-with-Vue-Cli/">.NET core 2 + Vue-cli 2 的起手式</a>，到了2019，兩者也紛紛出版本3。這次，我們將說明如何用 .NET Core 3 + Vue-cli 3 起一個新專案，附贈最新 <a href="https://vuetifyjs.com/en/" target="_blank" rel="noopener">Vuetify 2</a> 的 Material Design 框架。</p><a id="more"></a><h2 id="安裝-vue-cli-模板"><a href="#安裝-vue-cli-模板" class="headerlink" title="安裝 vue-cli 模板"></a>安裝 <code>vue-cli</code> 模板</h2><blockquote><p>注意： vue-cli 需要 Node.js 版本 &gt; v8.9</p></blockquote><p><br></p><ul><li>安裝全域 <code>vue-cli</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ul><li>起始一個 vue 專案 <code>my-app</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-app</span><br></pre></td></tr></table></figure><p>按照 <code>vue-cli</code> 的指示選擇預設 (<code>default</code>) 即可。</p><p>安裝完後，可以把專案從 <code>my-app</code> 資料夾中移出來，如下圖。</p><p><img src="https://lh3.googleusercontent.com/mg4HgncLJ66AZ4wnPznFb1X55drWjTCgDy-22BLolsQRlBTYghwQg8kDxWkCaneH4eoyns8JS9Xi42b74lk4ATinxc19-ka7voTtH8ySKcfZZ4j9nRsj_X0FQvBCzIIsk9ZHBv159X0piGmlaJKvLm2q6V-Rpmzbpl6pvd9M1zNtO5Cu01hFRED2G0Zoh9y5ELB6u_vU1uqoCFfNM-eDDjFMQrqTZ0vd3PxmjciMwdQ8hjMxMGoo9pVci3V3z-K0NlFqfuX5O7Skg1Qhk0OgCa7DYqfmL-QrdZ-PcJOK0sMBCY2LfW3cOjFK9AkQTCTYnbn4xMLLAX8dR1jRgFXBGIsDJl_FiE-HCNrT71O1wrA1yd751rABO2w8ghElsJgteqvSBBoukRrgYwX4z8Efuu1BReVfX3hfdPAsfJKSHsZZuM-C5G3GzT58GHQpXpVHyAQME344dX0zqaZmDrWb0PKcD77G0lsYmZcpXAuczuhWADSAPMUGCuswMgan3q35GRrpN9SJwekmzHXs1J818eOptpn0jTO3x--I6bhsvB9OpmchFI8ZoFtE21LDPa1Jfrss_-HZ4ZpzdNslDdNeOL33kHLu00zXne8AwMCCmD1KKp4aLwniW3-n7tVuQFTKLYRb3sNfKOgbdYwNHK4urpo1IaBLazDwcjnhESmz-fJEzyZ2mH-121t3_VfSDcwsmSOKlZKs6pXbA_uK_YFIIBHF5IozC1vv6QUQ40WIe9aiUnLTqg=w618-h934-no" alt="專案目錄" title="專案目錄"></p><ul><li>執行套件安裝</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>安裝 Vuetify 框架</li></ul><blockquote><p>如果不想要安裝樣式框架可以直接跳過這個步驟</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add vuetify</span><br></pre></td></tr></table></figure><ul><li>測試 vue 專案是否安裝成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>用瀏覽器看 <code>http://localhost:8080</code> 如果有成功出現如下面畫面就是安裝成功 <code>vue</code> + <code>vuetify</code> 的專案囉～</p><p><img src="https://lh3.googleusercontent.com/WTI7SZCavIJAmLRqZNbCMMRHxPwSm6yD_EkBf-DHV8Rn_96Sa39daK1aYjxFd34c_XAjiC8yDZVwspgn2arZdo-_ptFvduN4CQ0cNnJC5_xohUq10ggkuzHrdn7m9KezmU-8E4FZMBD3PzRMeWPYlwJCj-JjSfkNpQZGLRn37RyoGNvpJECdgnBsEEQx5AZHx-E4ZJDOTujyDBGEkqvp8lI3oW--jDOoCIMaFUuLu-vHxKvWtFprE_mBzwI7KIkkeC9D0rWhUsX93hJT4x46Elmj1TOYSDRMiNogHG0P5cZ5JSUIUsdM_T9XKQ-U0oTDeD3iHipDBmBfJH5KgmpXGh3e8cBlyHqpkqu5DVXe468cWfNT9nRqCB3IQOPtPcJg5tB0bKe68fQTjaIwwiqEngW1aB-8gXZgt5OCDeAyOZJB0rvXvr9uoL69sUrHCamSGT0ppGLenX7yFeP-uNVPXgi899gQj9siNlqWbQWnjjdrhsTAvrx5-3rFS43GIssEkwwB_MiQT411oAdd_g9ds_BgCDSohxD2NOWZAWJ3NmvrSupIsvckps0p7jLJ-4Mqb82J5KvJ0GdIT8wIjqF8hZmhFeAWxFgmwE10axr7eClFsN4CjIqhnFdO_v86vyYDx2S60EVqUPW8t1PorW0jbXJG3TGjEeWlHYLEme8d7mQaIT1001f174oEY9twCvgAd5YxmLFCZyaGrqvleFOveUc221DTKkgYdC9k9oAjr2qAyV4J7A=w2206-h1378-no" alt="http://localhost:8080" title="首頁"></p><h2 id="起始-NET-Core-3-0-MVC-專案"><a href="#起始-NET-Core-3-0-MVC-專案" class="headerlink" title="起始 .NET Core 3.0 MVC 專案"></a>起始 <code>.NET Core 3.0 MVC</code> 專案</h2><ul><li><p>安裝 <a href="https://github.com/dotnet/cli" target="_blank" rel="noopener">.NET Command Line Interface</a></p></li><li><p>新增一個 Core MVC 專案</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new mvc</span><br></pre></td></tr></table></figure><p>把產生的檔案都移到最外層 (跟 Vue 同一層)，如下圖。</p><p><img src="https://lh3.googleusercontent.com/W203GfdGjLI_7ZhUUZjmE4LYVKs6AFGNMcVohuF2E5_eQqKQrXc_ZV58HCPvQPjwBuxBPZEplhsJ_-WrPJ_nH_5OgjijEFAcZsStz2-ckatWBngIvgpo4p1pWPt_o613hObxX2CS9jz7g9zuRqIyQH5CAwrF8pnQAvls9fHvsnL3Zzuy6mqCNjzy9H6C1KJTmA7mdNbSJhtUr6JqNjFuw1hWgEAyVGiDCJNcNnGFK0zi3f74byGEMh_K7ymwRv6iJUhXN74GwTRMpV7r_jZIOrs7AOv10UhezxHhKFvkCe_ZZ0YbhohieE4LmwiAzL-urryjpLE95apTMTf6xRIRB8Gv-0lX4UNjC4MN9CI7jwdGklQ2djXDnmfys7rbsk0p6a5gr3dPsD-98pwTC3I--LmngPdBjOR6QED59piLeKbeQ4N3QG0L19JW6hcF0liPvdEwToC3psjUiC-jYimsUK6jvxU2xlyMqAIAtjm9fLCmnFp5kfMH_qbihmO9dQGnpmsYx_rCQqTXrfmODYvTL1LwiMBRe-Hp_twIBHB1S6K5XtCCk19SLYHD7VEKKK6sfAcawo5V4Ohe_yJ8Phxkod0rhXv4KSvlYdD3iJbCLCFhMhWgyAIGhZTcST0lDzUhxz5L8TKZRa5hbHA8kjw7hNlnjhYm5b92HFetGcwPbTi-3t57nL9C0H2drgjwqOBh8m8Zwh5l0QDdBrdToOQg-PKII9XK0eMh5oriRCvgjjaP_H14vg=w614-h1208-no" alt="專案目錄" title="專案目錄"></p><ul><li>刪除不必要的檔案</li></ul><p>因為我們是 <code>SPA</code> 不需要用到 MVC 其他頁面的功能，所以將多餘的頁面和樣式去除。參考如下的資料夾結構。</p><p><img src="https://lh3.googleusercontent.com/_6YDysh2v7AoOk4y82teBx4qsEXdrEvO5y6LKda2Vt87eLX1RCRfXOIaFhHK5Iy7OsBCkzdRehhB7-VsvrRSUWZsPO9tONVNw-c1pwcsrsA6wOAMn-D22zI0gQa2DrEDmBYttUore2G0kNtZkGaLwt2LQMuK3Zs-8cOEyHUPy1nnWD66GVUNozqty6tNTGmyIK20sN8kZpCLEikfEYunKI3gVlT0G5UfEmVAJ25VlKUbkziTEPwTDtwxvBmz6qlPbcEKXNSOLAe-zAeYR6b4-yTPFifwmiNrwdHEebD3kkZrYdfCPO9KFw4FOFQpNHkrGP-LxbeXCnatvDzMA0k9A81iHtVD0t8_9vkfb0lBvm40S0sFTvXXI_kUW-ncr639iMkXZ66v55ZXWOMAUL3trWESyUZ6FPMtiCzUVZRNlR0kfKV_CmgLivBugJxl696Vh6MPbUWcAwr3dxBnU9Iwvd5wHad4lpGbDEF2GTSzL8ZV1Hh8HnwLiGbqqGfJzFs9O8sgsa4dDJAnQpwCuCTrJJbk5KmMNPLR5tbiSyY9MGz1nbkCYtrtSNNPro_OsqiG3uMNXm-tCbtUkTjGG953ULeTY45NQqPwVqugKu3T0t4DMKjEJvoky0IBUOd7hdoTMgyRb9bMMJMedWyAuoFLZwM5Ar4qOZ3Um-nmQ2HA-lp4GDG1wO9rbxk4Sh2Ng8WR_rzH9Hnwy1DR8qFrXWv4E58WrzfK79A01VcCgBkAyR74bl9vUg=w620-h1248-no" alt="刪除多餘頁面和樣式後的檔案" title="資料夾結構"></p><ul><li><code>HomeController.cs</code> 刪除多餘的 Controller，只保留 <code>Index</code> 和 <code>Error</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using Microsoft.AspNetCore.Mvc;</span><br><span class="line">using Microsoft.Extensions.Logging;</span><br><span class="line">using dotnet_core_with_vue_cli3.Models;</span><br><span class="line"></span><br><span class="line">namespace dotnet_core_with_vue_cli3.Controllers</span><br><span class="line">&#123;</span><br><span class="line">    public class HomeController : Controller</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly ILogger&lt;HomeController&gt; _logger;</span><br><span class="line"></span><br><span class="line">        public HomeController(ILogger&lt;HomeController&gt; logger)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public IActionResult Index()</span><br><span class="line">        &#123;</span><br><span class="line">            return View();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]</span><br><span class="line">        public IActionResult Error()</span><br><span class="line">        &#123;</span><br><span class="line">            return View(new ErrorViewModel &#123; RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Index.cshtml</code> 多餘的 HTML 刪除</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>_Layout.cshtml</code> 修改內容如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"~/favicon.ico"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dotnet_core_with_vue_cli3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/@@mdi/font@latest/css/materialdesignicons.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We're sorry but my-app doesn't work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    @RenderBody()</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"~/js/app.js"</span> <span class="attr">asp-append-version</span>=<span class="string">"true"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    @RenderSection("Scripts", required: false)</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>誒～你有沒有覺得明明我們把 <code>wwwroot</code> 裡面的靜態資源都殺光光，卻在 <code>_Layout.cshtml</code> 上面放 <code>app.js</code>？因為這邊是留給 Vue-cli 去產生靜態資源，所以我們接下來就要說明如何設定讓 <code>.NET Core</code> 和 <code>Vue</code> 做連動。</p></blockquote><h2 id="設定-HMR-和-vue-router-的-fallback"><a href="#設定-HMR-和-vue-router-的-fallback" class="headerlink" title="設定 HMR 和 vue router 的 fallback"></a>設定 <code>HMR</code> 和 <code>vue router</code> 的 fallback</h2><p>接著才是重頭戲～如魔法般的 <code>HMR</code> 功能登場!!!</p><p>如果還不太知道什麼是 <code>HMR</code> 的，就 google 一下囉～</p><ul><li>安裝 <code>aspnet-webpack</code>, <code>webpack-hot-middleware</code>, <code>webpack-dev-middleware</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D aspnet-webpack webpack-hot-middleware webpack-dev-middleware</span><br></pre></td></tr></table></figure><ul><li>新增 <code>Microsoft.AspNetCore.SpaServices.Extensions</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Microsoft.AspNetCore.SpaServices.Extensions --version 3.0.0</span><br></pre></td></tr></table></figure><ul><li>修改 <code>Startup.cs</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">using Microsoft.AspNetCore.SpaServices.Webpack;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class="line">        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)</span><br><span class="line">        &#123;</span><br><span class="line">            if (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">                app.UseWebpackDevMiddleware(new WebpackDevMiddlewareOptions</span><br><span class="line">                &#123;</span><br><span class="line">                    HotModuleReplacement = true,</span><br><span class="line">                    ConfigFile = @&quot;./node_modules/@vue/cli-service/webpack.config.js&quot;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            app.UseEndpoints(endpoints =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                endpoints.MapControllerRoute(</span><br><span class="line">                    name: &quot;default&quot;,</span><br><span class="line">                    pattern: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);</span><br><span class="line">                endpoints.MapFallbackToController(&quot;Index&quot;, &quot;Home&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><ul><li>新增 <code>vue.config.js</code> 在最外層</li></ul><blockquote><p>這邊就是設定 <code>Vue-cli</code> 將產生的靜態檔案放在 <code>wwwroot</code> 讓 <code>.Net Core</code> 去吃。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  outputDir: <span class="string">'wwwroot'</span>,</span><br><span class="line">  publicPath: <span class="string">"/"</span>,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://github.com/vuejs/vue-cli/issues/3603#issuecomment-483913563</span></span><br><span class="line">    <span class="comment">// remove vue-cli-service's progress output</span></span><br><span class="line">    config.plugins.delete(<span class="string">'progress'</span>)</span><br><span class="line">    <span class="comment">// https://intellitect.com/quickly-configure-asp-net-core-api-to-work-with-vue-cli-3/</span></span><br><span class="line">    <span class="comment">// aspnet uses the other hmr so remove this one</span></span><br><span class="line">    config.plugins.delete(<span class="string">'hmr'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若要使用 vscode 跑專案：修改 <code>Properties/launchSettings.json</code></li></ul><p>修改 <code>Properties/launchSettings.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"iisSettings"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  "profiles": &#123;</span><br><span class="line">    "IIS Express": &#123;</span><br><span class="line">      "commandName": "IISExpress",</span><br><span class="line">      "launchBrowser": true,</span><br><span class="line">      "environmentVariables": &#123;</span><br><span class="line">        "ASPNETCORE_ENVIRONMENT": "Development",</span><br><span class="line">        "NODE_ENV": "development"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "dotnet_core_with_vue_cli3": &#123;</span><br><span class="line">      "commandName": "Project",</span><br><span class="line">      "launchBrowser": true,</span><br><span class="line">      "applicationUrl": "http://localhost:5000",</span><br><span class="line">      "environmentVariables": &#123;</span><br><span class="line">        "ASPNETCORE_ENVIRONMENT": "Development",</span><br><span class="line">        "NODE_ENV": "development"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若要使用 npm 跑專案：<code>package.json</code> 指令加上 HMR</li></ul><p>安裝 cross-env</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cross-env</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "hmr": "cross-env ASPNETCORE_ENVIRONMENT=Development NODE_ENV=development dotnet run",</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行如下 npm 指令或使用之前寫的另一篇文章方式 <a href="../../../../../2017/12/25/DotnetCore/NET-Core-2-0-Debug-with-VScode/">vscode task</a> 來啟動專案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run hmr</span><br></pre></td></tr></table></figure><p>成功的話就會從 <code>Chrome</code> 開發者工具看到 <code>HMR</code> 連結成功囉～</p><p><img src="https://lh3.googleusercontent.com/iwyqGKY3x0PNLHZvmRMQxAG53ta1MNkplE5rDHIwfr884IxIPhOlHaZwUzMdPS4B5MvWrK-BzP1afJMnZkHfuwAGJ8szM1VJmqo3BkZZs9GN92uP-zTk3oS7spcGo8DinPhbi9M7TZJkku95nzIxh1UIebtussfopG1byaWLQOna9wt9_CK8tiSyugr1A6x0bPG20SsAO6--hwmNa4SiODAyeTeADmMs1dtrI8d-6gDvtULip1yljjzKfnDm2iECcreinLfD3mUyUkAaW25-jzyXpa3dQ5EokLdx9JNVVLWM1kKmeadHGdcPNXEKJIaWK8TMFuxjRL6YiiwPeRpEMXSHGZI7Czbaqxh1GJmdBCejLIbWaOy-NKuqKJ37_Xf5FVFTnXlEyBZs3yAfr2pNtBgbk9SsZJvB1ljszKOE-CwhXmJJinfBpJ-kGd2Lh2gsQwo2JC6_frvi3uv3gl9LVhBQC6iZdawwvwTveTr_E4X7Z5-P-EenyBMKUV6IRoFUE_b_dfPZlPYMBCD8UBSau-F3Y1HZNAIihor6R1o4c2RSKF01GWXq62HBdnlQgX-94mNkj4noSm9dHaErDzTOm0WUwJVw_SxfdFB3_2aP6ddi5ce2mxHiiau5ajes_rvFBuMlLAmwIOhiXR1KwdBdS5hqjTB4rdGTGEA3IYqlyLXtLdFNzM8iuMhZvlFra90dpXFlLvYBGCitsQ8VTQFc4ukw1Di0HvdY4cZFsLulfcTv9FhEAA=w1780-h1112-no" alt="http://localhost:5000" title="首頁"></p><p>今天的範例在 <a href="https://github.com/Annilla/dotnet-core-with-vue-cli3/tree/v1.0" target="_blank" rel="noopener">github</a>，下回見～</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices.Extensions/3.0.0" target="_blank" rel="noopener">Microsoft.AspNetCore.SpaServices.Extensions</a></li><li><a href="https://intellitect.com/quickly-configure-asp-net-core-api-to-work-with-vue-cli-3/" target="_blank" rel="noopener">Quickly Configure ASP.NET Core API to work with Vue CLI 3!</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/migration/22-to-30?view=aspnetcore-3.0&amp;tabs=visual-studio-code" target="_blank" rel="noopener">從 ASP.NET Core 2.2 遷移至3</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有寫過一篇 &lt;a href=&quot;../../../../../2017/12/02/DotnetCore/NET-Core-2-0-SPA-with-Vue-Cli/&quot;&gt;.NET core 2 + Vue-cli 2 的起手式&lt;/a&gt;，到了2019，兩者也紛紛出版本3。這次，我們將說明如何用 .NET Core 3 + Vue-cli 3 起一個新專案，附贈最新 &lt;a href=&quot;https://vuetifyjs.com/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vuetify 2&lt;/a&gt; 的 Material Design 框架。&lt;/p&gt;
    
    </summary>
    
      <category term=".NET Core" scheme="http://annilla.github.io/categories/NET-Core/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
      <category term=".NET Core" scheme="http://annilla.github.io/tags/NET-Core/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="Webpack" scheme="http://annilla.github.io/tags/Webpack/"/>
    
      <category term="SPA" scheme="http://annilla.github.io/tags/SPA/"/>
    
      <category term="MVC" scheme="http://annilla.github.io/tags/MVC/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>Serverless Azure SignalR with C# and Azure Functions</title>
    <link href="http://annilla.github.io/2019/09/10/DotnetCore/Serverless-Azure-SignalR-with-C-and-Azure-Functions/"/>
    <id>http://annilla.github.io/2019/09/10/DotnetCore/Serverless-Azure-SignalR-with-C-and-Azure-Functions/</id>
    <published>2019-09-09T16:00:00.000Z</published>
    <updated>2019-09-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次接觸使用 Azure SignalR，順便玩玩看雲端託管的服務，那我們就來開始吧～</p><a id="more"></a><p>因為我習慣用 <code>Vscode</code> 開發，所以下面說明都是以 <code>Vscode</code> 為主。</p><h2 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a>安裝環境</h2><ul><li><p>安裝 <a href="https://github.com/Azure/azure-functions-core-tools#installing" target="_blank" rel="noopener">Azure Functions Core Tools (v2)</a></p></li><li><p>安裝 <a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener">.NET Core SDK</a></p></li></ul><p>查看 Azure Functions Core Tools 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func --Version</span><br></pre></td></tr></table></figure><p>查看 dotnet core 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --Version</span><br></pre></td></tr></table></figure><h2 id="登入-Azure-建立-Azuer-SignalR"><a href="#登入-Azure-建立-Azuer-SignalR" class="headerlink" title="登入 Azure 建立 Azuer SignalR"></a>登入 Azure 建立 Azuer SignalR</h2><ul><li><a href="https://portal.azure.com/" target="_blank" rel="noopener">Azure 入口網站</a></li></ul><p>新增 SignalR service 如下圖設定。</p><p><img src="https://docs.microsoft.com/zh-tw/azure/azure-signalr/media/signalr-quickstart-azure-functions-javascript/signalr-quickstart-create.png" alt="SignalR 設定" title="SignalR 設定"></p><blockquote><p>注意：這篇介紹的是無伺服器的方式，所以 Service Mode 要選擇 Serverless。一個 Azure SignalR 只能選擇一個 Service Mode，所以傳統的 Classic 方式和 Serverless 只能擇一，兩者不能共用同一個 Service。</p></blockquote><h2 id="設定-Azure-Function"><a href="#設定-Azure-Function" class="headerlink" title="設定 Azure Function"></a>設定 Azure Function</h2><p>1) 開啟建立好的服務，複製主要連接字串。</p><p><img src="https://lh3.googleusercontent.com/ebUg5MNe8j6YLI5O56lihd2NTFy9SHkFwW0WZdZnz25HzlKWkEpveUnMpfw9Og1Mkm2wPnqATYzpizjHtt6onCppsz7kRYnrXE-DRBapeoxUwNJLvjKR7O8nkZzNVu37tdUtRXIqFCluv42EXrrKaCQbWRKEfsSFsotts0AnmxXqpyEjB7gKkDUngv-Si0OX8UAy4nH2t5oc1uJumiSBkucK4djsxN_QQVLuBjXlFlzN1-lNt6x3j-KlraBvkCf7J9wLB7cp1_lOMldLoK6bG5ixiKebGTJly_gfZ9J4HN2JF0OCPP87eI4QsGlVPprfTGwgw6swCJaO4TiodAj0zzgPq8SX6qmCE7fS7-1gSDLK1hzTNedZ5EzcCTblltvhdsOuxgSJFc464UYaYcTfcwzZ3377cg9jzGa4ijNRdFRGHYQbvdssgoMuxA8_gRV3qmtsssBOQzKhRwFriUOcR2Mk2RnJEzCknPvIhDDq_aDuO0DJvUr18p4zLV3IK3gdawQtusInwbLdySAFB6VGiKoPK2xP6IJA1RYGUIWx3a7uEqX3KPpI0OjVY5lORd_rtCzv2m69xRSB_ygGXHYVt1_Mr_MsI-vVbpOzZtPob9L3BljtzaWXYBaDaFMeFGVKKhTHR_Gv9i12qfSZCi1j9pffRE8uAVRTmJVYozGlhqffUtNkUHxaDsO2=w1035-h483-no" alt="複製主要連接字串" title="複製主要連接字串"></p><p>2) 複製官網 <a href="https://github.com/Azure-Samples/signalr-service-quickstart-serverless-chat" target="_blank" rel="noopener">sample</a></p><p>3) 進入 <code>src/chat/csharp</code>。 將 <code>local.settings.sample.json</code> 重新命名為 <code>local.settings.json</code>。 將連接字串貼到 <code>AzureSignalRConnectionString</code> 並設定如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"IsEncrypted"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"Values"</span>: &#123;</span><br><span class="line">    <span class="attr">"FUNCTIONS_WORKER_RUNTIME"</span>: <span class="string">"dotnet"</span>,</span><br><span class="line">    <span class="attr">"AzureSignalRConnectionString"</span>: <span class="string">"Your connection string here"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"Host"</span>: &#123;</span><br><span class="line">    <span class="attr">"LocalHttpPort"</span>: <span class="number">7071</span>,</span><br><span class="line">    <span class="attr">"CORS"</span>: <span class="string">"http://127.0.0.1:8080,http://localhost:8080,https://azure-samples.github.io"</span>,</span><br><span class="line">    <span class="attr">"CORSCredentials"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：Host 的部分是在 local 測試時，為了避免 CORS 的限制所設定。請務必將 local 要測試的網域加到 CORS 的值裡面。</p></blockquote><p>4) 開啟 Functions.cs。 官方解釋如下：此函數應用程式中有兩個 HTTP 觸發的函式</p><ul><li><p>GetSignalRInfo - 使用 SignalRConnectionInfo 輸入繫結來產生並傳回有效的連線資訊。</p></li><li><p>SendMessage - 在要求主體中接收聊天訊息，並使用 SignalR 輸出繫結來將訊息廣播給所有已連線的用戶端應用程式。</p></li></ul><p>5) 啟動 local function 測試。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func start</span><br></pre></td></tr></table></figure><p><img src="https://lh3.googleusercontent.com/3504Bocz7haQ3JPmdJwqa2XwHdc_EhIQpmtPqtOftqxaQUK5qLHeVAaSz9JNWpEhD7ezP81kEeq6LB6Loa2aL5OIYYWVjjA4GwibWVIl_pbw_BAN9IyZfTBBvmE9Vz-NRljNw1h-6deKZJZLgWT57tKi5I1ml_PwuOFGL0fh1PHbrPq6VC8YyVchEb4l0OdFYdpFz2h14pJMmelh0jV8M7lqQrIY4aK-lN0ttAn01wQZWh7nnXO-aVhFxYVdI6_-SKoDsu2LnFscOqb5QohvLZkFF3FzgPzRqraWwE4F-KRgXrfk1JPrh0r1qB0yAtu0VZfdbwk1PSXlhnabxHVn6_F0Z6pfrcaASFIkQHzrIonsxwPQm40_W5_BJvRxWCxVHQJed5--C4226IoeDXHRu3jevGzWButrAGJq0s9bCDzrmDg_u9MNKP4klPgZDmmLVfOrqZXAIOhrXmiEOvUSPdUXnIyOOzo0mtU7sFyqmf3UnCk7afZQ3uR8gxGhTSEBsVSl743Csc2-Xp84PJ4xWsmwxfi5vxrPRv3NVO5LQ6v5GB_vx49YCqaxJjYv5tZ9Fd_Hq_2S4MhASR5fSGzD_TzReNfs7p0KM333949JNKUb-e2-nLCkwxdHS0Yk-AZKQ70M-bZTUVu3HElg9UrkfqpdMyu4LtzbiimLqIOGyekCOD3FqShQ8r9q=w2206-h1378-no" alt="local function 啟動" title="local function 啟動"></p><h2 id="Local-Web-測試"><a href="#Local-Web-測試" class="headerlink" title="Local Web 測試"></a>Local Web 測試</h2><p>1) 因為瀏覽器若打開 html 頁面會預設使用 https 處理。所以為了避免 CORS 限制。請安裝啟動本機的 http 伺服器。 <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank" rel="noopener">Live Server</a></p><p><img src="https://lh3.googleusercontent.com/91mzygWcGmu3ljW09OLhtTAfv2Ugb589jczgciy3mOSuWbCUBjOAeN2BUA-MgYWzRbaoXFWwIqoUHqzcykEA4Aw4odpSHDSboaTWxYYpnTT8CmclxtK9t2HYZWUF4HlUKk806h8Jhq3iup2I414hAKpWCtcKgPidv64aPwucq3GYS_ZKsTXudLB7MIfK0wZ_yR47MscN_9ne6KDJvzv3EU4T-1XNMJZdu6ISqzgrUUCgIh-hnUHeSUH6Vy0M1Kc4rNDjBnp14xLA899OhmeZJiB5xQ5UKbv9Icf-dT3yW7qQRSgxWnMvMWgyle_DdmFSYwLJTqMjLaCnBF_LZiS1bJMfDcuctigjp3lqhy75LDcVssUs55sG_8qmd6zgY1A1PVeEbc3faMfQwM9ANDRZA4GAPLFTVYfsp5wVR6cCkYc6tehN7Q1D2DhTrgoJCZ55r0-9nsG-uA11nh5Lmy9Fe7TmPMceVqZXWYYqdP8Q35UHa8Kgq54dfYLjJ2PLOisuHzurd-qQes4NQfhCvsnsXW78VL-UsaW29tFMS_7k7_NH4X9DFNP7oUBsv87ISO_kpm0VWAylbsilxbLT8n5xa57q3USTJuBR5e6DYixRM0L0K_ElogvfiC2TMmYg_F4M5j_Fmg-VoPrxzIt4u6CQ9sNJ6ExcujX0ZEth-aiguKyQNlK2xBs2x9L8=w1908-h938-no" alt="Live Server" title="Live Server"></p><p>2) 用 <code>Live Server</code> 開啟 sample html 範本 <code>/docs/demo/chat-v2/index.html</code>。</p><p><img src="https://lh3.googleusercontent.com/AgiqJicbCJPOqOd7krSCj4eoQulKtewUr71Gs67h-Z3PWiWpQT3hUguVvqQ_Wbsg82SPMZ6Cq5BC9BLN-YkgZQTf1l7JRwd3k5l0yfztgG3Mb_rRUps_ozF1ebzft2z4rst0i4xcEdY453CtVWWHIfkpl6iGgAdDptdUUDfeWvytYg8LEZX-Z9mpkyXI79oI3sYcXVgloKf0FH3ArfwUquBNNwQEUano4e7PPOcYkvXP3d0v9eO2JvayxYfc-c3WSSHEj4rPbx6SvlbZa8O4-0Q_x-rDQuLEoa7u7kCrBnIdaw0xbRxRBhPiGGxbYUJ_s3dBstI4DKzDt-wyJyKBwwV8K5zhfy5wwx4E4grg9NVZf9dp0l2-DDoh7zjHBLCpgLU1-YdmLKp47cmwxLPA7-FnloIsldbLrBS7hv3OQAfDMEb9o8_MQb_44ELsklUVY6wSo6rY894Ew5Wmu24CBd5UbjnO_vjOvvtKNPZKrnDmvnqmofS0x1Kk-Qzy5qKgZ4M3xXt8NAwGm6qa2Xi2vTZhKwy-ApKzBz-VqaOE1VWNW4cCgUZCh00MBeYxWSCdeJOrQlHgkW_tP0zuBBZFxu88siuX6ZTxq3mpVNa7bENEjPJjCSpxMXQemG-CqhQCnGZJTBkSUArTNUSNRDaQ4jixziHJURlhdZlS04s0MGEjPgsLJGM_RKkR=w2206-h1378-no" alt="開啟 sample html 範本" title="開啟 sample html 範本"></p><p>3) 自動開啟後，務必輸入 <code>apiBaseUrl</code> local 測試為 <code>http://localhost:7071</code>， Name 也是必填，請輸入聊天室的使用者名稱即可。</p><p>4) 成功之後就可以輸入訊息測試。並能多開數個分頁，測試訊息的接收是否正常。</p><p><img src="https://lh3.googleusercontent.com/PYziZWr5t2kOAe9sp4dAJ7f9RmUy-MVlPhZqyus33kJyLQIj61CocH4Rdj955TFA1SVQXZlsSqDhZtafBG5Z25vcLlq28mHCp8OnbxOqh65P81rNFxOH56SfUkJ91ha4KPI8ZHzzSk9zArbDgBNE9iM9NjTZ97lsDsbyO9kuqLDpuj2emQ1r9ak9iRLQXAotahmAelkr2dUiLCsbCphjQHX_fZA9k9KAsAmt2Rq7s5eBTqoHr_V3ZPHemP8QHJg41cHBMfLMwxaKKxqh7PtubOq33yRamyEsrFBfEi8mWAPfLTYmJbGD0izpZEuG1fhBamxoRt175Tgjv6qEIrwakqNQyBn_LnRoQCXYsntJ0XaWDka9yM1Vk9g4zeXp9Jdus09p3Gyj_ACYL98ESUffg8ifDiOPy7cAeFje9dM_FG3bQMtNBLn6Rq8BXXOcERuYUunQsOyalskX_8rnrfvDFGNm9I7Lm5y-wUMw59DmiuvvZsftTtM8lzhLKJDPziD1a_r13RhjLlBo1vfXM0Iq8dsGGe0G4KbinGq4kLIIx0rjg_BDDRQwQUThCUzpOVkYzkKPr7zyFTilAaZAsOeF_k54MrnLVq0sBPCUNN2EYUxI-mzWuhEtNIOzY4K-tmP1AtljaQeVRYnuDp-mMbmLfPW-2PiSf7iSlu6B03DhIpS3EfbFHW0xKEUH=w2532-h1246-no" alt="測試訊息接收" title="測試訊息接收"></p><h2 id="發布-Azure-Function"><a href="#發布-Azure-Function" class="headerlink" title="發布 Azure Function"></a>發布 Azure Function</h2><ul><li>安裝 <a href="vscode:extension/ms-azuretools.vscode-azurefunctions" target="_blank" rel="noopener">Azure Functions</a> 擴充功能。</li></ul><p><img src="https://docs.microsoft.com/zh-tw/azure/includes/media/functions-install-vs-code-extension/vscode-install-extension.png" alt="Azure Functions" title="Azure Functions"></p><p>安裝完後請務必重開 VScode。接下來我們開始發布 Azure Function。</p><p>1) 請務必確定 VScode 只開啟 src/chat/csharp 中的 csharp 資料夾。</p><p><img src="https://lh3.googleusercontent.com/F2CzlCEtvEpCrmw7V_8x9zWfv-OYRpzWj18QN-HL_WfF6s3XCH8u8FW8QStEVeNvXCI6PDmPNKPdLolL8Vlh5EvtSYJvuYRpCADBrALiZIy510xQPTNSl4vZAiwWfFu7IXTGn9sIINa8YVH_ya_KRfkSX3-_5EvsFNJOwyQna6Itv0IaqDKpR2-TEOADt1-FN73D1WyTINzPcd3xS2IYk5EKJrloZPO1Jbj3ZlXxpvahgExMM5uxUZOR4X49neuWpuyIjxVzjdAKvY4ADg2W5cdBvQG-b02xAer7yQ6k4gB15eI3_d98HWArt-FDrMwt5EP9foIFU-dBT5V4B-C2-woI0MejtaK07QNZ082ahzsqV7odBCUVH2u3laLEVGzFRhAddf1DhpDobOQhk4-IB3XG7kYiRiWXr4lco1JTCYTDhy-TxgyHSpUsyMxtb8f--kjdQ5y1IF_uGQDRhF7dFhEUKImOFRj1Kc7sypo4uMS07dQAvFm0Nt7G5xX-IE8QOKjmgNrvOypegpsFswjQ_RDyd0YuT21ioMs4oogu8qEdanhGBc_9-lmbxa3Pfe_P2RauuKrczEJ2zIZlahNBP_e3CsPQqy1B5FwtWWk7Aej0GkqHLwJ7HmTi4oC6cH0fXQzz2ATYuSKg0VsPPeh5PGAbLsQZDZIipl1ScojTL07PltVv9ZDBYVwn=w916-h898-no" alt="csharp 資料夾" title="csharp 資料夾"></p><p>2) 從擴充功能登入 Azure 帳號。</p><p><img src="https://lh3.googleusercontent.com/3ycoKSgCD3L5bhujgJ_qsAaR7iEmu-cDzoi3GceJ4nRtwqz9Sh9ZCNXXQ8nvcuWIUgm4mezj76JL3t3dy1lSdIi-74oqXPTDQYxol0-kaSbF5YTSgsdGI2wgSe_TN4g3UToGBBZdBHrGl9Xw784YIbzI2oFFgQ5FGaH2v3-1JkYpHJB1tde5NdND30pRpnwrbFzotRiyxOyt6lBDlWxuBbSpfIDISQa8Ya-sO79Z8r8cl2RMywRmX3WLVBI3OKVl9Gvi5OJuWmoRyb6jIfeBAWM8i89h5rwdEpCVkXvZO1BlxXRnIrp3Bo4u_EMLkC3VZb9G2KNlVkXgVel-6dL9IqoJ8oVPvorFZMV_sgZwW2_C_D6TH_1SsOs3OVlVT8lwoRjY4RGDJbaQzi7QtfZXfGk5--aTvDw7AV25IP0grR_qAt9X2_SmU4tjEWcjTYN6wG6a6FrQsRhbLhhGC1QOdD1NhyMC-tXZhz9XXuwKyC58CHc_ebYMGogv1PUuqhEy0wMrtKKtC0ZxhGZmH52BcjBrp0fIkp5JJIOeaiZelgAQLJ5-PpAvyY4OpDmSUnJle6hKAHFh6UmCFAu3v1bK4nS0zILSiPobyLEnwrkMbHAJzr44wOMTSVQlsa0ogK5GqER5NNRCACJ-61ztnUEEvdLGN3AhkWmQiCk2ya0YEECjl0LeXGuHk72f=w463-h431-no" alt="登入 Azure 帳號" title="登入 Azure 帳號"></p><p>3) 選擇要發布的地方上傳。</p><p><img src="https://lh3.googleusercontent.com/g-Un1PRQE8Npznb4Hhi9gK6Doc7h4nunpZA3zKMEypcb5j5Ks54x20lEc2UeRykR532VeixY7u11THtW9HeALTz47SUBzzvE6vYzKZxg56VCa8GugLdxRDxvkDu0x6rZvvilshkKnPhsaNCsWEM2IkWSR3Nj1ctjhoGhn0gjjCTPz63muznRew9qqt87p-4ozb8EVNuHwIkJpCvG99uRGQ5L7cdaL6rS-CMmnJUB4EjyM15NeVCKJRpeiYJHkRnvuO_OhqLRhAVYRNtiFywIfnSviMhR1TU9XHYkq-IzS2V8cJ0FRw5u1FE9sF1BE3tjFNiuGiogDdVZ5X4JaGenHgYQU6TrACnF0I6xkHdC9oKXzXvaDgrQGos5UjNytVJeikB6DhCo0afU5vz1Qjtdn8sNRWqEAJvFAfYzVjDNtLgESZQ-ADAE099ID81UPDTnzbVYjZA8zCBkBZUNwQQOplIK-Xft_6cCFQtcsZx-ReUUJnma0MuhTd866gyM4_07eadyJ3ahZAQCZG73AvpUzxRIUsRpgjJ_-lGeEumg_CMxbF0QdEbvZfxriX7azPOitHPKC8YuXhcMAAmmD_3IEpp_VAVyadbRHWBzPtRvS8pkuMN2mFDlY1Kkabuwo5gvHF1FE9PyNodyni6pMPIJ4d2OOT8UO_5e_26Pjxsp5FOnO1nKbV5UPRqy=w916-h402-no" alt="上傳 Azure Functions" title="上傳 Azure Functions"></p><h2 id="測試連線上-Azure-Functions"><a href="#測試連線上-Azure-Functions" class="headerlink" title="測試連線上 Azure Functions"></a>測試連線上 Azure Functions</h2><p>1) 拷貝 Azure Function url，將 html 中 <code>apiBaseUrl</code> 改為線上的 url。</p><p><img src="https://lh3.googleusercontent.com/H_G9dyo8H_V-04HnuKLeYz_RIzpELVQEeIU2Oss1BgV4kb0ih2rs2ihnSG5V4cBpF27Bhuax9uA3jrh5jzi4NXG3xJR8g16s8Nksmlp7Q5zbI6JBkepAhstRwqkBhFiTtt2jAwGlTnWy1TXkPOqzjD8ejAxMDZYuR1Tsrrw9lHCxdicNe233wUwB_9T9Rj7CGP3SM3VvpYsBQ2EBQhrFYyCrEd7bHkMNT7lkuT1CIGT0eniiMKF5r8lmI3JWDKejkDnDj-Xhk5FJ8GhKIpbUTqfbGoYpmRCvhXkXGlPv_225nceq7FJjLbP47e7d0Xyiw4DSfpY4-eLzFQ9Pk1A36sw6u-3kko-FOEWx9hgm2wFkgUn8W-VG60dkn-edy6xzzVBG60BpNBtFU566ckPtVMv0BVtr6rcyTSghwv2BY3iJ5NNQNYl2n9wzDxGAhvp8USAVfkkooBvzISbwUHFE5mdAujs-xyUaQ7JGGwZEP2gpj5UrhW1mj2FKEtuywYk_HW02qkLII8igNcPqbHSy2xKB-hjsaERItaiDeBZvhujagZOWVhYDqdA6MvgfHm9IC8Dx2T2TtZSb6HsTNABrbi3tcRLbiG93_egs5jCaeLvkgA0yxATUZNXirp1z83sRtolFWzJOKeurzUtbT8qSlTkelW7UmZGEblCO6egJM9Oz7e-L4QE8mosh=w988-h371-no" alt="Copy Azure Function url" title="Copy Azure Function url"></p><p><img src="https://lh3.googleusercontent.com/6knLBtYnBsO_4Q_JDPw8eeF1ndcFzBRIKrQPXxJY1XU-e_Dtcsf950sXVO5EDI6CsFwAcMyQ_C_noV8rIb-tWuQZaSVgYTV9-PAn8BHzHShn_8oP_nF3-ix7-6bTR_Zd8ABaSYk1mo3LN6bED7uxK0U9mTY36PF53UpWKF018lOsSezcpuouyeM_qF8TPOsuZ4T4t2V7QBc6NM8z5qXVC3uDLPUrQFQwfegIKE_8k5kPgHMxNTPOoVChCf1k4_YEIxQDJUvGdWa36rI789G10b0VHjzCQxS4vRROdTKJ3p2nNfhDd1LxTvsuUGUnIRvcK7wozQ5G0j8hsxCv-xQJ29dgQkG8nhM8RrBX4oz4Na5_169tKWRUIbIwsJQ55UugbqxpM3OC36-BmvxZ9s3cz9ROJ4cYCkKVnREJyXo4gGMFck_h0XYxJe94-I0LXQQ3A3uGATHqRgl_CcE-1xISolLp0mYvgKpOC6XuDiZH1tRGt0xSInHwnZYuMc59fBawXeiivDGkIjacRbbUsHKr0RLPQtb6eAW1MUyVpOVMhjTQlcNWUJ_Vbsy6VtprtIeolwbUQQSNgqRSemMaS_zPCH1djV1gG-94h_8wOcm_phJ8AkfKmN1elF_gB8WTMPFvs9etI30qy60U4zba4HU2tlFYE0OnoyGHOlvaHzjBSj4Pm7zHJ8Ben9tG=w2192-h880-no" alt="修改 apiBaseUrl" title="修改 apiBaseUrl"></p><p>2) 因為不同網域去打 API 會有 CORS 的限制，所以需要將測試的網址加到 Azure Function CORS 清單。</p><p><img src="https://lh3.googleusercontent.com/QrDuwqSA60bt68i0DoP72Ci94RwvCX6hbD_cjb-yYHhAzBboVJxMZzYIZ6lMgkZAlcv3wyBfBx9sqxwsnUpKwsB9HU8cmQiHCDEnHHLaf5ZsIe5rXI6x8yPAifMnei4xjnRoR5qBkTWoE4jw7gwIE7aDoQeu3VnWTLAndv0-N5nmdY5FoBp1h2ESAM6rvoYYdwxvyWJSJq_xaq43p-koGaoOlEyxfeiUuVGNfPadwjWg9mBAEXFNp2pBa84A4OOd6dfLX1Wzdm1cWgwRtzob9-bF1GZT8f7cj2hl2WMRdhQaP-itxxoFcSVut6uscXFkN1G93Yr7ckHLeiM04jqcMWUdf5IkAtfEInI9lDinK9gljEDCRe8xHCRewByz2Fbp6eSt_RA3RV6FqBi8-VaIuBn0aqlBvPrP7HC4lfFLqy3tdeh7T_afav5Cn2rPn6YuTn4eFGduKK6vvslTShwT208Nl7VE2I9-p9IF0Hndfty1uINjTWP66RRhvpBo40qFSNR95vDw2pGXY-QCEvZinXOk5-YK5RZ6-mmXxc-B5D7mjwbR6u0fiX58NaIL2Wce1hVkraoycTOg2Q1wN25L-OwN2zLmTe9KbwQJ3lqoTsAGuq_tGz-nfHWLpf9cXaqYX3YvEqwN2BwNAs6YKyYCnsR65zG5FlzgSM5UERmDd05BXpI7mnDlhLKF=w996-h574-no" alt="功能設定" title="功能設定"></p><p><img src="https://lh3.googleusercontent.com/Rp_UC6QBZeSOB_6j3kFgK-w9aZNOhE_oybskL2rkFZSdEFYrrfnylveIY0fX-wv3wODLHZyD8AOu2IUwYZebGn5Z7r_rx1jNg61SVDRhuXDYKoLpz7WTfCkcrlZqUx2iEyYJifDtSjDE8GtWehIa8QhwbX1Bvd5qV2vg3Ib5opXrbirNkPy_u-LACXcIrb2ppbRJgs18C9KQs-PY1EPOq3L0s82tpCNkDgGm7vXPVzxcof5zYRpF9VEWumxKadf5a080ALj2oqP6zmZsKJNQdLNzVr2xX8GU-n37TijB4G2masD6i1M6LcSxupOoO038I4nlYutuCUfAy4zp4VKB5xX6oFpX1cXePexfH0Lcdak1yjxSO9r53B_ZrbDC3GhG98V9YehQ7ONMzcy0-vEGyijB-D5mzP6FMgDt6qQHOBwgjOt2p7DOOfHv3em8Z08YVcjb0PJD1hLCI6L28CynDIhZKmtVFAYFJnJytd8938x7xdRJ1p4Y0QMZSBDlXj6nj7uEbRcC082NGv9Q4HCjARts7YVkriMl6mmpGcXg9SsBJhfZOLaPl9_eUP2hAu2dntZpSxg9gOVpoEK3yohgeaXLKAOgqH55KDiAikDyw5e_Waqbvz3LqbfT3wR-z5SkYjhaK9nz0pZ4p59cnOkWqu_81nqpMHdGn0quQokoh-nO7WNgfZyL-7RZ=w561-h592-no" alt="CORS 清單" title="CORS 清單"></p><p>3) 一樣使用 <code>Live Server</code> 開啟範本，就會成功連上囉~</p><h2 id="把-web-放到線上-server-測試"><a href="#把-web-放到線上-server-測試" class="headerlink" title="把 web 放到線上 server 測試"></a>把 web 放到線上 server 測試</h2><blockquote><p>注意：剛剛上面都是使用 local web 測試。若要把 web 放在線上測試的話，需要在 Azure Function 設定連線變數。官網沒寫這段，害我鬼打牆了好一陣子呀～怎麼設定變數如下圖。</p></blockquote><p><img src="https://lh3.googleusercontent.com/_aALFr19DSl7A3vekHZWLNC-DKSZhWp44BLPoujaLFiCL6MDn8sxVNKZvw3IKB9-OmwOoxCHSa-ltJurLIG83osiLAaZeTjJxj8AlFnJBt3uGR2tyegFXkdoyxKpa1gDW3dZdPICSsCPiN4KMTlYAzSBdNEQoI3RnOvtkoNqruCcVph5qICYnAfBkGywtdR-dJjTyKKfuW8RZaFEPcHqqGhg35nibhg1jei8wJflLVHtN48vFNcsrAuyfGnziyEGjj-VxPocDb9ofJEHR8uRnIjL9qUOB-zGb9TA1j7Pyo1tV9UkuczX1KWXCO_jsd3rp-FDCAQ2dcHoLc6y9OagLkJSqGC7EJkaccgCuu1HRmb7_woIrvnIO8k5iYbvsf4bO7af8IBLgA-OFR_YlQpIGsXwoc1PSu-rMCGAEzSkhHsDNmTaCpyO-L-YLB7Z3vCOkavIMRpDV1ZcnLYd8jQ5USusENO0bzOXZNo4-D6sPyGhpl9g92pOoQmJ8DRgaxAqTGRxItUpkNLBDudfi-4-jGM_IDbnRTyLlWW9hLx3FLjDfA2QL0-z2Plp0NRfh9qdegDb3Ym-fmKS71Wp2g0WsVxhNhfdf9pDYcAkBDKqNF9HpIlRuATIi_HAGFGJ0W9imvB0-q2gQ1AfS2_YOIvUTK0v1Kl3-OFJuLwZqbm2kL4d-Sei-CSUkhV_=w451-h285-no" alt="Configuration" title="Configuration"></p><p><img src="https://lh3.googleusercontent.com/jeAfFyL52YQfyyvIpqgAMgrqCLGm3yBtZDYfH_VXbFExgRV2kTjgkj5TOad0fZ4EkwPYyKOfKrgajprSXSsqmn4Tdcp_73h5YRS0VBZz55ZoHE6_ojFZ7TmeAOnd7ONKRQFxzr5jRZEZd34eWwVahN9o9bZYgcBWpebxN0fIihVQdrf3a6meMzzLPRH1HVX8hXwXr_W0j3FKVAz2Lf2-cNa1Bni_eycfszIrU7XIf8fiVuldSBReqZgd5NtbSuiRJSPFIuCjg08_X9e2aCeeKYBfjuy9tS7c2V4f0gUk3CoC9W-Beyh3ueJ17TkIm0BhzbUqWt8y374DL7FQKr55GaHzz734aRkvVOQnUNeR6efL1KVcriTVDwNCbjuqovljM7_b7VvQtY9O766_F8R1TNMRz26z6sqN9QfFbEFGEBbmECjJbecN8VKb-gTZ_4qSqnHTyiI-UCzcWPddZkoZ1mRridVcnZexsEQ6TD-k7upFmprShkVX-MuP-QIjR6MPqS0QCiwTbzSLB6rwgXbdylDIh6oUlc-5PrpYBhetsdjEIKqIDQNKOkEngxCuZn50bixXooAT78orR4EatTwcd67ERYGRqJRB4KQOxSfHaJCuq9ut53NvM9lPxsPsO0f_kuFsYL46-sSodOnd2-CE2dtRUK-nrqejDhWL_9EdLwBTrlAM9Dqph-Yt=w989-h560-no" alt="Add Variable" title="Add Variable"></p><blockquote><p>記得如果是線上 web 都要把網域再加到 CORS 清單喔～</p></blockquote><p>以上是無伺服器的雲端 Azure SignalR 基本安裝與設定，如果要玩地端的話可以參考官方<a href="https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/signalr?view=aspnetcore-2.2&amp;tabs=visual-studio" target="_blank" rel="noopener">這篇</a>，那我們下次見～</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/azure/azure-signalr/signalr-quickstart-azure-functions-csharp" target="_blank" rel="noopener">快速入門：使用 C# 搭配 Azure Functions 與 SignalR 服務來建立聊天室</a></li><li><a href="https://docs.microsoft.com/zh-tw/azure/azure-signalr/signalr-quickstart-azure-functions-javascript" target="_blank" rel="noopener">快速入門：使用 JavaScript 搭配 Azure Functions 與 SignalR 服務來建立聊天室</a></li><li><a href="https://docs.microsoft.com/zh-tw/azure/azure-functions/functions-develop-vs-code" target="_blank" rel="noopener">使用 Visual Studio Code 開發 Azure Functions</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/signalr?view=aspnetcore-2.2&amp;tabs=visual-studio" target="_blank" rel="noopener">教學課程：開始使用 ASP.NET Core SignalR</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/signalr/hubs?view=aspnetcore-2.2#send-messages-to-clients" target="_blank" rel="noopener">將訊息傳送至用戶端</a></li><li><a href="https://youtu.be/MK8n8pg9bLE" target="_blank" rel="noopener">SignalR Tutorial 16 - Coding Our JavaScript (Client Side) - Part 1</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次接觸使用 Azure SignalR，順便玩玩看雲端託管的服務，那我們就來開始吧～&lt;/p&gt;
    
    </summary>
    
      <category term=".NET Core" scheme="http://annilla.github.io/categories/NET-Core/"/>
    
    
      <category term=".NET Core" scheme="http://annilla.github.io/tags/NET-Core/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
      <category term="SignalR" scheme="http://annilla.github.io/tags/SignalR/"/>
    
      <category term="Serverless" scheme="http://annilla.github.io/tags/Serverless/"/>
    
      <category term="Azure Functions" scheme="http://annilla.github.io/tags/Azure-Functions/"/>
    
      <category term="C#" scheme="http://annilla.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Grab Data to CSV by using NodeJS</title>
    <link href="http://annilla.github.io/2019/07/04/JS/Grab-Data-To-CSV-By-Using-NodeJS/"/>
    <id>http://annilla.github.io/2019/07/04/JS/Grab-Data-To-CSV-By-Using-NodeJS/</id>
    <published>2019-07-03T16:00:00.000Z</published>
    <updated>2019-07-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作中遇到一個情境是，打 API 可以要到當下的資訊，但 User 想要幾分鐘之內的紀錄，如果要做報表的話，就要非常手動的用 postman 打 API N 次，然後再將儲存下來的 json 轉成 csv，最後再將 n 個 csv 合成一份檔案。實際若是每分鐘打一次 API，假設只抓十分鐘，就是存十次 json 檔案，再將十個 json 檔案轉成十個 csv ，最後再手動合成一個 csv 檔案，光是手動的時間絕對超過三十分鐘。為此，我決定要寫一隻程式讓上面的所有動作自動化。</p><a id="more"></a><p>環境使用 NodeJS。</p><h1 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h1><p>共安裝 3 個套件</p><ul><li>axios: 戳 API 用</li><li>moment: 處理時間</li><li>json2csv: 將 data 轉成 csv 格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios moment json2csv</span><br></pre></td></tr></table></figure><h1 id="程式解說"><a href="#程式解說" class="headerlink" title="程式解說"></a>程式解說</h1><p>這裡只需要寫一隻 getData.js 就搞定 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Parser &#125; = <span class="built_in">require</span>(<span class="string">'json2csv'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> head = []; <span class="comment">// 存取 head 資料</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>; <span class="comment">// 定時抓取資料的計時器</span></span><br><span class="line"><span class="keyword">let</span> duration = <span class="number">60000</span>; <span class="comment">// 多久抓一次資料</span></span><br><span class="line"><span class="keyword">let</span> token = <span class="string">''</span>; <span class="comment">// 存取 API token</span></span><br><span class="line"><span class="keyword">let</span> apiURL = <span class="string">'put API URL'</span>;</span><br><span class="line"><span class="keyword">let</span> appID = <span class="string">'put API ID'</span>;</span><br><span class="line"><span class="keyword">let</span> appSecret = <span class="string">'put API Code'</span>;</span><br><span class="line"><span class="keyword">let</span> startTime = moment().format(); <span class="comment">// 紀錄開始時間</span></span><br><span class="line"><span class="keyword">let</span> grabMiniute = <span class="number">3</span>; <span class="comment">// 設定要抓取的分鐘數</span></span><br><span class="line"><span class="keyword">let</span> endTime = moment(startTime).add(grabMiniute, <span class="string">'minutes'</span>); <span class="comment">// 計算結束的時間</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得 API token </span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">    methos: <span class="string">'GET'</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;apiURL&#125;</span>/api/auth?appId=<span class="subst">$&#123;appID&#125;</span>&amp;appSecret=<span class="subst">$&#123;appSecret&#125;</span>`</span></span><br><span class="line">  &#125;);</span><br><span class="line">  token = res.data.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將戳 API 包裝成一個程式，若 token 過期會重戳 API</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestAPI</span>(<span class="params">apiMethod, apiURL, retryFunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> axios(&#123;</span><br><span class="line">      method: apiMethod,</span><br><span class="line">      url: apiURL,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        AccessToken: token,</span><br><span class="line">        System: appID</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.message.indexOf(<span class="string">'401'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// get token</span></span><br><span class="line">      <span class="keyword">await</span> getToken();</span><br><span class="line">      retryFunc();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 戳 head API 取資料</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getHead</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> requestAPI(<span class="string">'GET'</span>, <span class="string">`<span class="subst">$&#123;apiURL&#125;</span>/api/Head`</span>, getHead);</span><br><span class="line">  <span class="keyword">if</span> (res) &#123; head = head.concat(res.data); &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'head'</span>, head.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次取得多種資料</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// get token</span></span><br><span class="line">  <span class="keyword">await</span> getToken();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`----- <span class="subst">$&#123;grabMiniute&#125;</span> minutes left -----`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// grab data</span></span><br><span class="line">  getHead();</span><br><span class="line">  getFeeder();</span><br><span class="line">  getNozzle();</span><br><span class="line"></span><br><span class="line">  grabMiniute = grabMiniute - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寫檔案</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params">data, fileName</span>) </span>&#123;</span><br><span class="line">  fs.writeFile(fileName, data, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`An error occured while writing <span class="subst">$&#123;fileName&#125;</span>.`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fileName&#125;</span> has been saved.`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轉格式並儲存檔案</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 將 json 轉 csv</span></span><br><span class="line">    <span class="keyword">const</span> fieldsHead = [columnA, ...];</span><br><span class="line">    <span class="keyword">const</span> fieldsFeeder = [columnA, ...];</span><br><span class="line">    <span class="keyword">const</span> fieldsNozzle = [columnA, ...];</span><br><span class="line">    <span class="keyword">const</span> parserHead = <span class="keyword">new</span> Parser(&#123; fieldsHead &#125;);</span><br><span class="line">    <span class="keyword">const</span> parserFeeder = <span class="keyword">new</span> Parser(&#123; fieldsFeeder &#125;);</span><br><span class="line">    <span class="keyword">const</span> parserNozzle = <span class="keyword">new</span> Parser(&#123; fieldsNozzle &#125;);</span><br><span class="line">    <span class="keyword">const</span> csvFeeder = parserFeeder.parse(feeder);</span><br><span class="line">    <span class="keyword">const</span> csvHead = parserHead.parse(head);</span><br><span class="line">    <span class="keyword">const</span> csvNozzle = parserNozzle.parse(nozzle);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`----- SAVE FILES -----`</span>);</span><br><span class="line">    writeFile(csvHead, <span class="string">'Head.csv'</span>);</span><br><span class="line">    writeFile(csvFeeder, <span class="string">'Feeder.csv'</span>);</span><br><span class="line">    writeFile(csvNozzle, <span class="string">'Nozzle.csv'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'saveFile ERROR: '</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------------</span></span><br><span class="line"><span class="comment">  Start from here</span></span><br><span class="line"><span class="comment">  ---------------*/</span></span><br><span class="line"><span class="comment">// 一開始先執行</span></span><br><span class="line">getAllData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 啟動計時器</span></span><br><span class="line">timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> now = moment().format();</span><br><span class="line">  <span class="keyword">if</span>(moment(now).isBefore(endTime)) &#123;</span><br><span class="line">    <span class="comment">// 如果還沒到結束時間，就繼續取資料</span></span><br><span class="line">    getAllData();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果時間到就停止計時器</span></span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    <span class="comment">// 將資料儲存成檔案</span></span><br><span class="line">    saveFile();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, duration);</span><br></pre></td></tr></table></figure><h1 id="跑起來吧～"><a href="#跑起來吧～" class="headerlink" title="跑起來吧～"></a>跑起來吧～</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node getData.js</span><br></pre></td></tr></table></figure><p><img src="https://lh3.googleusercontent.com/j9w9EiGilWwL1E7atc2_7zYqgVhaihr6BfYRaV5yI_7Zqsm35HHQq-PJB16FVphVx-NG13pmNYy6lSX9OCHF_awYWCscNoCuHxWl8S9dVYtbK6cIFPZVlOk2nlHuPWYZ75c4TrgpM3lOYW3SAwF0QGa38s58WuDPHyxBdZDK-JLJgR7IY-ovFu6YZ2I37ciPf93Mvc24Bg9tJJSj7zdYtfwirxPeFXIVL0guofpoTEBAR29_4BsLnEAtsY6pK5KEXNYcjhwjZ7GuUjNfueF2Qe0abLvsorMFWE1JY5ems-ZOVm0Bw-BmXVqkGNknDNd5aIoILBJ5fAyRLmbV7hVCQpzS79jPBdWDicXsTu8c7qQbGqyU1hyB56MJajIEVViQCoEKMDHnuCWuD67a09wBI8zOQoRIYJmkFf1EPZ93bgVt-KPrgOeQIgaEEIerHPmp56OslVqyOsVi_N4iZ5xROgSit4I4wzfQgZYYbdkLkX4H0fV1VX2zpufoKrx0cz6ZMzTxczYtQErozIMQ5nYZDD1I3xAwN9Gxkr79V2gWHZgICAZ_o1N-MHcM-Sdk690fheubq0PwpekkxP_FIxrJCRaLRYYByMybeyt6z6Y1U713nSO05whp-jMXVNkf459UBi-n8I2Zu8LUktni-ZnJ8GacoOoZM6xV=w1173-h812-no" alt="跑起來吧" title="跑起來吧"></p><blockquote><p>後記：其實 User 一直不停的找我手動抓資料，一開始邊寫程式還要先手動抓資料很阿砸，但後來工具完成後，變成非常順手，覺得幸好有寫這隻小工具的感覺XD</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中遇到一個情境是，打 API 可以要到當下的資訊，但 User 想要幾分鐘之內的紀錄，如果要做報表的話，就要非常手動的用 postman 打 API N 次，然後再將儲存下來的 json 轉成 csv，最後再將 n 個 csv 合成一份檔案。實際若是每分鐘打一次 API，假設只抓十分鐘，就是存十次 json 檔案，再將十個 json 檔案轉成十個 csv ，最後再手動合成一個 csv 檔案，光是手動的時間絕對超過三十分鐘。為此，我決定要寫一隻程式讓上面的所有動作自動化。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://annilla.github.io/categories/JS/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React Redux Practice</title>
    <link href="http://annilla.github.io/2019/07/03/JS/React-Redux-Practice/"/>
    <id>http://annilla.github.io/2019/07/03/JS/React-Redux-Practice/</id>
    <published>2019-07-02T16:00:00.000Z</published>
    <updated>2019-07-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近朋友問我關於 Redux 的問題，但我已經有兩年沒碰 React 了。所以藉此機會找了 youtube 上的<a href="https://youtu.be/OSSpVLpuVWA" target="_blank" rel="noopener">教程</a>，好好複習一次。</p><a id="more"></a><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul><li>Redux 透過單向數據流模型來管理狀態，幫助應用程式擴展規模</li></ul><p><img src="https://lh3.googleusercontent.com/RCAqIMcoBNaVcnbKPXupA177bJvvluPn3GeaSEywgKbQ9tqDWh-cjeds7KbOJiCWStxVGOQLR23kbd0nRhY31T_f7BlJY3CfCXXhGGqYqTaQvZiZKwIpOkY2QBnDdNxY1rEkqvHJAuIrvfRYS5HU5PAiW-JK5baYknZXW-dn14aeptIf1OXblwufjzgNDRSP1gZqUzvG1yyKF88XxV8isg76MQ2yONKLHhrzDNu5Yx_OrcP1u95MtLR9F-mZf_ah65I-JmVYpbtfECihE7VNEn58n7vMp2CIym4JLvRTFspEzCAerEklTkI4aF7oWqcnO-2fK_IImagVK_JU5D2dqBvGA9ZB6XChXPMmbYDs-dinini_zUPgFvYFQK0ZvhW7-KIBsMIVFNNgFhhVZb3wc3mcwrwIvLlmWkqpGHevqclMLAuWlaj-1LeYndUMfE5MzcZ8CSzu7Vo3YO_MjEh8mxSzICgvz-gnIUs6ezMhTCxxSp8SXuta7SZbTcgqDDFzx1BovCKvVgxlvOOD0hNneBq3C0yPBhVAB5mcNInZhjfhWYshXmEJUPZDUiHFXRmMzeCLmoRzUU0DzE2oasezhmYktkb4aRq9XzSkE2d8b9DILg4wWP3skCXG6syozRvTQwnu6z9tZMi96CvFm6RmyKiRebM-Vro_=w922-h548-no" alt="單向數據流模型" title="單向數據流模型"></p><ul><li><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">Redux Devtools</a> 幫助開發者進行狀態的監控與偵錯</li></ul><p><img src="https://user-images.githubusercontent.com/7957859/48663602-3aac4900-ea9b-11e8-921f-97059cbb599c.png" alt="Redux Devtools" title="Redux Devtools"></p><h2 id="Redux-Flow"><a href="#Redux-Flow" class="headerlink" title="Redux Flow"></a>Redux Flow</h2><p>Redux Flow 有個儲存所有狀態 (State) 的倉庫 (Store)，頁面會依據這些狀態 (State) 產生對應的介面 (UI)。當使用者對介面 (UI) 觸發動作 (Actions) 時，動作 (Actions) 會把使用者所做的事情 (payload) 傳輸給處理器 (Reducer) 做運算， 處理器 (Reducer) 處理完後變會把倉庫 (Store) 裡的狀態 (State) 更新，所以頁面就會再依據狀態 (State) 的改變產生對應的新介面 (UI)。</p><p><img src="https://lh3.googleusercontent.com/4fNoEoelX9xGuY9ujaqlV5bkoRzFWVJ12urnnBAs17FYumoFnC31TKe4hTzfpNBzG0Rde55vjURuPCCh7JiRYcl66xMZdgiijutv6ld2sRCwNBevGcfHj5sSUmCBmU3YrVGsagAVIpmmqGiZlI4wIGniBspsMA1CtGFA7f2punGbnfQLE_NhcPU8u_3VAxc3wmJJ1hxhaf_wO_FViTMzHx43-Lk3dmT3H219W4AAUPoPFMwWiiPyzNBtRZVzIyhLb6bGGLZPojsdaf5COQNN4NqfXnwgU0dNFX44tdM-10gYftyOBzsXwiCXu0aoPCei0nRvCp_cRlCClGYC6n9rp-4aNZ8GcaelZqN5nIf0jUYqegcGDoXeruwiy8g0x8_tlX5gAayXencALfp6LjfRTrM9Yry4z_VfgQuws0Y1-zvNdERmcZcFi3xfIPAfWuSxgdn5LeTxsm3fJ9eSCWobTf8n8KLW9rEXiwkBMiIqy4k7gYF6AnLzb9jssIp_huq0gStGif0pQdC-zjk144oSFkqmh9WtQGMGwSXTMfSL0g0NWKk9MehbxzFhRVKA-UrsN961N6dJXvs91IDJk3kT2Pb4ba_rx9yRnTu1mbPEvKp0hB73vro_RC94REWLrlzgkG6i_N9ezftI2z7TciZqnyMlGvCbwLIA=w1340-h932-no" alt="Redux Flow" title="Redux Flow"></p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>打下列指令安裝 React App。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app redux-tutorial</span><br></pre></td></tr></table></figure><p>誒？為什麼是 npx 呢？那是什麼？<br>所以我去搜尋了<a href="https://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener">npx 使用教程</a>如下。</p><blockquote><p>除了調用項目內部模塊，npx 還能避免全局安裝的模塊。比如，create-react-app 這個模塊是全局安裝，npx 可以運行它，而且不進行全局安裝。上面代碼運行時，npx 將create-react-app下載到一個臨時目錄，使用以後再刪除。所以，以後再次執行上面的命令，會重新下載create-react-app。</p></blockquote><p>意思就是他不會在你電腦安裝 create-react-app 這個項目呦～幫你產生好專案後，就會自動移除不佔空間。</p><p>接下來進入專案，安裝 Redux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd redux-tutorial</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux react-redux</span><br></pre></td></tr></table></figure><p>將專案啟動檢查有沒有安裝成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>起成功的話會看到瀏覽器自動開啟頁面如下圖。頁面上會提示去修改 src/App.js 就會自動 reload 畫面。</p><p><img src="https://lh3.googleusercontent.com/0eGc8PAV_LPbfRoLNBV1BkkTQD37TUEjNij_RlVgxSEuYZNY4DKF8uGzrLBHVf2AE4TBM8x9rWyyKuJVMinEABsb-JvpT9bkwb0NNTSKNjYcBbNBmdnZ6W_kg54n3dGO5Nn4z3ODEQeiLYYKsdOj5jwyrsb1o8hgfX6PiirzQaKCa-Nn7uyHM22VNhwKD8ycZsBYICwXla6-z_C-y7a8ycYR1zN7oa0TaMHidHVS74tcBOumyuO5ZZISjlDhYjajvV5ERdTi6ypNQbBq79zXlwjRmjq9UyATG39FOn5Dk3byoatX_sEfevfBxTxDTEgukeEz2anjaoIIzDzEwJJS0MLXZxkAGhtSAwBkU9LCGRh9IPc4IgShJuqA2B8-9qqSBznAukDaKrdbkjotC6gbbv2wsm_ogOhB68qf9fWHap_Jh_32gF-znppLcU-kP9cyGAF1hEBSDdeOngarYU6uSaIuuVlqJFjakf3CgBFdZVspwHQbdYGOmSyxPN_NU_nrZg7dgjYJeI_FkPzR8lY4qETFKPYyfWTCArWuzry2GwQ36VIrcc4lmp5SlhLnyW2WNZmaf-MMkVpjYMmzkNbRymIFamQzA2GO49BmecALKJXy4z_tSkYqsa8pDyRECxa1RGspkoog9YUvthBasLtLTForiwJN0iez=w2560-h1446-no" alt="專案啟動頁面" title="專案啟動頁面"></p><h2 id="創建-Store"><a href="#創建-Store" class="headerlink" title="創建 Store"></a>創建 Store</h2><h3 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h3><p>教程在 index.js 先創建了簡易的 store。<a href="https://github.com/Annilla/react-redux-practice/tree/V1" target="_blank" rel="noopener">Git#1</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 當 action type 為 _changeState 時，將 state 更改為 action 帶過來的 payload 值</span></span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">'_changeState'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> action.payload.newState;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 預設沒有動作時的值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'state'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 sotre</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 印出初始的 state 值</span></span><br><span class="line"><span class="built_in">console</span>.log(store.getState());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定動作屬性所帶的 payload 值</span></span><br><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">  type: <span class="string">'_changeState'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    newState: <span class="string">'New State'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將動作帶入 reducer 中，進而更新 store 中的 state</span></span><br><span class="line">store.dispatch(action);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 印出經過動作後的 state 值</span></span><br><span class="line"><span class="built_in">console</span>.log(store.getState());</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h3><p>當有兩個以上的 Reducers 時，在 index.js 做合併。 <a href="https://github.com/Annilla/react-redux-practice/tree/V2" target="_blank" rel="noopener">Git#2</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 Reducer 分成專門處理產品和使用者資訊兩種</span></span><br><span class="line"><span class="comment">// 專門處理產品的 Reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">productsReducer</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 專門處理使用者的 Reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userReducer</span>(<span class="params">state = <span class="string">''</span>, &#123;type, payload&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'updateUser'</span>:</span><br><span class="line">      <span class="keyword">return</span> payload.user;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 將兩種 Reducer 合起來放在 store 用</span></span><br><span class="line"><span class="keyword">const</span> allReducers = combineReducers(&#123;</span><br><span class="line">  products: productsReducer,</span><br><span class="line">  user: userReducer</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  allReducers,</span><br><span class="line">  <span class="comment">// 放入起始值</span></span><br><span class="line">  &#123;</span><br><span class="line">    products: [&#123; <span class="attr">name</span>: <span class="string">'iPhone'</span> &#125;],</span><br><span class="line">    user: <span class="string">'Anny Chang'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 開啟 devTool</span></span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義動作</span></span><br><span class="line"><span class="keyword">const</span> updateUserAction = &#123;</span><br><span class="line">  type: <span class="string">'updateUser'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    user: <span class="string">'John'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將動作帶入 reducer 中，進而更新 store 中的 state</span></span><br><span class="line">store.dispatch(updateUserAction);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">App</span> /&gt;</span><span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Reducers-and-Actions"><a href="#Reducers-and-Actions" class="headerlink" title="Reducers and Actions"></a>Reducers and Actions</h2><p>將 Reducers 和 Actions 從 index.js 中抽離。<a href="https://github.com/Annilla/react-redux-practice/tree/V3" target="_blank" rel="noopener">Git#3</a></p><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>在 <code>src/acitons/</code> 新增 <code>user-actions.js</code> 和 <code>products-actions.js</code>。</p><p>user-actions.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 將 type 名稱輸出供 Reducer 共用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UPDATE_USER = <span class="string">'users:updateUser'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateUser</span> (<span class="params">newUser</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: UPDATE_USER,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      user: newUser</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h3><p>在 <code>src/reducers/</code> 新增 <code>user-reducer.js</code> 和 <code>products-reducer.js</code>。</p><p>user-reducer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 從 Action 那裡取得動作名稱</span></span><br><span class="line"><span class="keyword">import</span> &#123; UPDATE_USER &#125; <span class="keyword">from</span> <span class="string">'../actions/user-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">userReducer</span>(<span class="params">state = <span class="string">''</span>, &#123;type, payload&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> UPDATE_USER:</span><br><span class="line">      <span class="keyword">return</span> payload.user;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; updateUser &#125; <span class="keyword">from</span> <span class="string">'./actions/user-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="comment">// Using super in classes</span></span><br><span class="line">    <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#Using_super_in_classes</span></span><br><span class="line">    <span class="comment">// super() 將父類的構建項目傳到子項目</span></span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 將 onUpdateUser(event) 綁定 component 本身 = this</span></span><br><span class="line">    <span class="keyword">this</span>.onUpdateUser = <span class="keyword">this</span>.onUpdateUser.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onUpdateUser(event) &#123;</span><br><span class="line">    <span class="comment">// this = component 本身</span></span><br><span class="line">    <span class="comment">// 將輸入框的文字丟給 Redux Action</span></span><br><span class="line">    <span class="keyword">this</span>.props.onUpdateUser(event.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">          &lt;/</span>p&gt;</span><br><span class="line">          &lt;p&gt;Practice by Anny Chang&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;a</span></span><br><span class="line"><span class="regexp">            className="App-link"</span></span><br><span class="line"><span class="regexp">            href="https:/</span><span class="regexp">/reactjs.org"</span></span><br><span class="line"><span class="regexp">            target="_blank"</span></span><br><span class="line"><span class="regexp">            rel="noopener noreferrer"</span></span><br><span class="line"><span class="regexp">          &gt;</span></span><br><span class="line"><span class="regexp">            Learn React</span></span><br><span class="line"><span class="regexp">          &lt;/</span>a&gt;</span><br><span class="line">          &lt;h1&gt;</span><br><span class="line">            &lt;input onChange=&#123;<span class="keyword">this</span>.onUpdateUser&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">            &lt;br/&gt;</span><br><span class="line">            &#123;<span class="keyword">this</span>.props.user&#125;</span><br><span class="line">          &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>header&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 將 Redux State 丟到此 component 的 prop</span></span><br><span class="line"><span class="regexp">const mapStateToProps = state =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">  products: state.products,</span></span><br><span class="line"><span class="regexp">  user: state.user</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 將 Redux Action 丟到此 component 的 prop</span></span><br><span class="line"><span class="regexp">const mapActionsToProps = &#123;</span></span><br><span class="line"><span class="regexp">  onUpdateUser: updateUser</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps, mapActionsToProps)(App);</span></span><br></pre></td></tr></table></figure><h2 id="Redux-thunk"><a href="#Redux-thunk" class="headerlink" title="Redux-thunk"></a>Redux-thunk</h2><p>當我們在接取 API 非同步的請求時，就需要 Redux-thunk 這個 middleware，幫助 Promise 回傳過後可以在 dispatch 其他的 Action。<a href="https://github.com/Annilla/react-redux-practice/tree/V4" target="_blank" rel="noopener">Git#4</a></p><p>安裝 redux-thunk。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux-thunk</span><br></pre></td></tr></table></figure><p>在 index.js 引用 thunk。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, compose, createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 applyMiddleware 將 thunk 帶進去改變原生 dispatch 行為</span></span><br><span class="line"><span class="comment">// Thunk 是一個以 action 為本的包裹器</span></span><br><span class="line"><span class="comment">// 在 Redux 中藉由 Redux-Thunk 這個 Redux Middleware 讓我們可以在使用時不去區分 pure action creator 還是 thunk action creator</span></span><br><span class="line"><span class="keyword">const</span> allStoreEnhancers = compose (</span><br><span class="line">  applyMiddleware(thunk),</span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  allReducers,</span><br><span class="line">  &#123;</span><br><span class="line">    products: [&#123; <span class="attr">name</span>: <span class="string">'iPhone'</span> &#125;],</span><br><span class="line">    user: <span class="string">'Anny Chang'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  allStoreEnhancers</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Actions-1"><a href="#Actions-1" class="headerlink" title="Actions"></a>Actions</h3><p>user-actions.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHOW_ERROR = <span class="string">'users:showError'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showError</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: SHOW_ERROR,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      user: <span class="string">'ERROR!!'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">apiRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 axios 接取 API Promise</span></span><br><span class="line">    <span class="comment">// 這邊網址因為有 CORS，所以必定 ERROR</span></span><br><span class="line">    axios(&#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: <span class="string">'http://google.com'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 成功的話會 dispatch updateUser Action</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'SUCCESS'</span>);</span><br><span class="line">      dispatch(updateUser(response.newUser));</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失敗的話會 dispatch showError Action</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'ERROR'</span>);</span><br><span class="line">      dispatch(showError());</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reducers-1"><a href="#Reducers-1" class="headerlink" title="Reducers"></a>Reducers</h3><p>user-reducer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UPDATE_USER, SHOW_ERROR &#125; <span class="keyword">from</span> <span class="string">'../actions/user-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">userReducer</span>(<span class="params">state = <span class="string">''</span>, &#123;type, payload&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> UPDATE_USER:</span><br><span class="line">      <span class="keyword">return</span> payload.user;</span><br><span class="line">    <span class="keyword">case</span> SHOW_ERROR:</span><br><span class="line">      <span class="keyword">return</span> payload.user;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View-1"><a href="#View-1" class="headerlink" title="View"></a>View</h3><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; updateUser, apiRequest &#125; <span class="keyword">from</span> <span class="string">'./actions/user-actions'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 component 出現的時候進行 API request</span></span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onApiRequest();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 apiRequest 放到此 component 的 props</span></span><br><span class="line"><span class="keyword">const</span> mapActionsToProps = &#123;</span><br><span class="line">  onUpdateUser: updateUser,</span><br><span class="line">  onApiRequest: apiRequest</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapActionsToProps)(App);</span><br></pre></td></tr></table></figure><h2 id="Reselect"><a href="#Reselect" class="headerlink" title="Reselect"></a>Reselect</h2><p>使用者每次都會透過 action 去做 dispatch 進而改變 state 的值。那麼，問題來了，如果需要的計算量比較大，每次更新的重新計算就會造成性能的問題。為了避免不必要的計算，Reselect 就是來解決此問題。<a href="https://github.com/Annilla/react-redux-practice/tree/V5" target="_blank" rel="noopener">Git#5</a></p><blockquote><p>如果有用過 Vue 的話，就類似 computed 的功能。</p></blockquote><p>Selectors 的特點為：</p><ul><li><p>Selectors 可以用來計算延伸的資料，允許 Redux 去儲存最低限度的 state。也就是說，state 只儲存原始的基本資料，中間延伸的計算透過 Selector 呈現即可。</p></li><li><p>Selectors 很有效率。一個 selector 只會在與他相關的變數有改變的時候才會重新計算。</p></li><li><p>Selectors 可以多個組合。可被其他的 selectors 當作變數來運用。</p></li></ul><p>這邊解釋就不用影片中的範例，因為我覺得官方提供的 example 解釋更為貼切。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 shop 裡面的 items 抓出來</span></span><br><span class="line"><span class="keyword">const</span> shopItemsSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.items</span><br><span class="line"><span class="comment">// 把 shop 裡面的 taxPercent 抓出來</span></span><br><span class="line"><span class="keyword">const</span> taxPercentSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.taxPercent</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 items 的 value 做總和</span></span><br><span class="line"><span class="keyword">const</span> subtotalSelector = createSelector(</span><br><span class="line">  shopItemsSelector,</span><br><span class="line">  items =&gt; items.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc + item.value, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 subtotal 和 taxPercent 計算總稅額</span></span><br><span class="line"><span class="keyword">const</span> taxSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxPercentSelector,</span><br><span class="line">  (subtotal, taxPercent) =&gt; subtotal * (taxPercent / <span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 subtotal 和 tax 計算加稅後的總金額</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> totalSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxSelector,</span><br><span class="line">  (subtotal, tax) =&gt; (&#123; <span class="attr">total</span>: subtotal + tax &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> exampleState = &#123;</span><br><span class="line">  shop: &#123;</span><br><span class="line">    taxPercent: <span class="number">8</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">value</span>: <span class="number">1.20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">value</span>: <span class="number">0.95</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(subtotalSelector(exampleState)) <span class="comment">// 2.15</span></span><br><span class="line"><span class="built_in">console</span>.log(taxSelector(exampleState))      <span class="comment">// 0.172</span></span><br><span class="line"><span class="built_in">console</span>.log(totalSelector(exampleState))    <span class="comment">// &#123; total: 2.322 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Smart-VS-Dumb-Component"><a href="#Smart-VS-Dumb-Component" class="headerlink" title="Smart VS Dumb Component"></a>Smart VS Dumb Component</h2><p>你不可能把每個子 component 都跟 Store 做聯繫，這樣很累且是過度使用。所以我們就會有一個專門和 Store 做聯繫的 Component，也就是 Smart Component。他接到資料後會往下傳給只吃 prop 的 Dumb Component。如此一來我們就能保持只有少數 Smart Component 控制 Store，而底下的 Dumb Component 因為只吃 prop 傳進來的值，所以也可安心的重複使用。</p><blockquote><p>Smart VS Dumb Component 的概念是通用的理論，並不是 React 獨有。所以同樣的概念也適用在 Vue 和 Angular 等框架上。</p></blockquote><p><img src="https://huzidaha.github.io/static/assets/img/posts/25608378-BE07-4050-88B1-72025085875A.png" alt="Smart VS Dumb Component" title="Smart VS Dumb Component"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://medium.com/@WendellLiu/redux-middleware%E5%A4%A7%E7%95%A5%E6%9E%B6%E6%A7%8B-ace7e646c929" target="_blank" rel="noopener">Redux Middleware大略架構</a></li><li><a href="https://medium.com/frochu/%E9%80%81%E8%AE%93%E4%BD%A0%E7%9A%84action%E8%83%BD%E4%BD%9C%E6%9B%B4%E5%A4%9A-redux-thunk-c07bc5488e48" target="_blank" rel="noopener">讓你的Action能作更多 — Redux-Thunk</a></li><li><a href="https://www.jianshu.com/p/1fcef4c892ba" target="_blank" rel="noopener">react-redux性能优化之reselect</a></li><li><a href="http://huziketang.mangojuice.top/books/react/lesson43" target="_blank" rel="noopener">Smart 组件 vs Dumb 组件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近朋友問我關於 Redux 的問題，但我已經有兩年沒碰 React 了。所以藉此機會找了 youtube 上的&lt;a href=&quot;https://youtu.be/OSSpVLpuVWA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;教程&lt;/a&gt;，好好複習一次。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://annilla.github.io/categories/JS/"/>
    
      <category term="React" scheme="http://annilla.github.io/categories/JS/React/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
      <category term="React" scheme="http://annilla.github.io/tags/React/"/>
    
      <category term="Redux" scheme="http://annilla.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Google Material Studies - Shrine</title>
    <link href="http://annilla.github.io/2019/06/07/UXUI/Google-Material-Studies-Shrine/"/>
    <id>http://annilla.github.io/2019/06/07/UXUI/Google-Material-Studies-Shrine/</id>
    <published>2019-06-06T16:00:00.000Z</published>
    <updated>2019-06-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>這次 Material Design 案例介紹零售業的 APP 設計，相信大家都不陌生，如何呈現大量商品給使用者也是一門學問。</p><a id="more"></a><h1 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h1><p>Shrine APP 是一個線上市場，透過推播標籤 (promoted labels) 來表達生活方式和時尚產品的特色。Shrine 的品牌美學為現代、优雅、精致。Shrine 在展示各品牌和產品背后，有著一致的美學概念。</p><h3 id="極簡美學"><a href="#極簡美學" class="headerlink" title="極簡美學"></a>極簡美學</h3><p>Shrine 的極簡主義將使用者體驗著重在產品内容和 APP 互動。作為展示各種產品和品牌核心的统一架構，Shrine 的品牌扮演着重要的角色。</p><h3 id="視覺主題"><a href="#視覺主題" class="headerlink" title="視覺主題"></a>視覺主題</h3><p>Shrine 的視覺主題採用去角的剪裁設計，應用在各種組件和元素上。這些元素代表 Shrine logo 的形狀，且為 Shrine 品牌的延伸設計。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1KZq-VRhEx9j2HydlT4ZW9H7tR-WoOZAe%2Fcasestudies-shrine-logo-alt.png" alt="Shrine 去角的剪裁設計" title="Shrine 去角的剪裁設計"></p><p>Shrine 的互動模型是由三個重疊的圖層組成。</p><ol><li>最下層為導航和品牌元素</li><li>中間層為主要內容</li><li>最上層為購物車</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1a-_JDAJTous0ko4miSjAgVwJPHQB2hHe%2Fcasestudies-shrine-elevationchart.png" alt="Shrine 三個重疊的圖層" title="Shrine 三個重疊的圖層"></p><blockquote><p>心得：以前做過大量分類的內容網站，如何讓使用者快速找到他要的類別是一門學問。極簡風格的好處是將操作簡化，並專注於呈現產品給使用者。</p></blockquote><h1 id="產品架構"><a href="#產品架構" class="headerlink" title="產品架構"></a>產品架構</h1><p>Shrine 應用程序的資訊架構是由目錄(catalog)結構組成。一個目錄包含各分類資訊，母類別可能包含子類別。Shrine 的母類別將大群組的物品分類，例如：鞋子、配飾、連衣裙，如此一來，使用者可以看到相關的內容。採用目錄結構讓使用者瀏覽有興趣的項目、互相比對不同的產品和查看特定的產品資訊。</p><h3 id="導覽列"><a href="#導覽列" class="headerlink" title="導覽列"></a>導覽列</h3><p>Shrine 在桌機、平板和手機上使用不同形式的導覽列。<br>手機將導覽列放在最後一個圖層，需要藉由回上頁的元件做返回的動作。<br>平板使用頁籤(tabs)的方式導覽。<br>桌機使用標準的導覽收納欄位。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1-qYMfjqAbsMb9O-lJNIsaHcKhO_p4O_s%2Fcasestudies-shrine-family.png" alt="Shrine 導覽列" title="Shrine 導覽列"></p><h3 id="項目指標"><a href="#項目指標" class="headerlink" title="項目指標"></a>項目指標</h3><p>所有導覽列共用同一個選取狀態模式：當一個項目被選取，項目背後會有一個三角圖樣代表被選取的狀態。項目指標確保使用者知道他們目前所在的類別。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1l0DbKUHyQKvedhajBXcnaVN8UZbn7eSF%2Fcasestudies-shrine-nav.png" alt="Shrine 項目指標" title="Shrine 項目指標"></p><h3 id="購物車"><a href="#購物車" class="headerlink" title="購物車"></a>購物車</h3><p>購物車可以在螢幕右下角找到。當物品加入或從購物車移除，購物清單會動態更新並反映變化。<br>購物清單可以透過點擊 icon ，展開內容細目，或是帶使用者到購物畫面。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1dgcMYf6_2L_xYYriPRcoACs_woD5LIFm%2Fcasestudies-shrine-shoppingcart-1b.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：項目指標用圖示的方式標示在分類文字背後，我覺得這個用法蠻大膽的，若是想要增加潮流感的話很適合。但若是在公司企業內部用的軟體可能需要考慮使用者的接受度。</p></blockquote><h1 id="排版和顏色"><a href="#排版和顏色" class="headerlink" title="排版和顏色"></a>排版和顏色</h1><p>Shrine 使用 12 grid system。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1JSMNlunwZaOV3F0t0eSsBqn3EhwN4Idk%2Fcasestudies-shrine-grid-1a.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="水平格線"><a href="#水平格線" class="headerlink" title="水平格線"></a>水平格線</h3><p>Shrine 的手機和平板排版採用水平滑動的格線。欄位、間距和邊距都是從左到右，並不是我們一般常用的上到下。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1bzYYXTPp9EKoZ_D98LDkdpmmekDIUAK1%2Fcasestudies-shrine-horizontalimagegrid.png" alt="Shrine 水平格線" title="Shrine 水平格線"></p><h3 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h3><p>Shrine 的顏色主題是單色系的，將主色調 Shrine Pink 使用不同亮暗做變化。底層使用 Shrine 的主色調 (Shrine Pink 100)，下方購物車使用次色調(Shrine Pink 50)。主要內容在白色背景並使用深色 Shrine Pink 900 作為文字和圖示的顏色。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1PqdLRDr8EpuHTdhT9f9HtIzxzGOjecJP%2Fcasestudies-shrine-color-1.png" alt="Shrine 色調" title="Shrine 色調"></p><ol><li>Shrine Pink 100 用在 “add to cart” 來凸顯按鈕。</li><li>標籤(chips)外框使用 Shrine Pink 100，用深色的 900 來代表被選取的標籤。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1ocq8e1RNTZOmpP2MXjRF1rAB4hk9nw4a%2Fcasestudies-shrine-colorcomponents.png" alt="Shrine Pink" title="Shrine Pink"></p><p>Shrine 使用圖像處理來表示狀態的變化(例如被選取的狀態)，或是背後的半透明遮罩。客制的圖像是一種加強 Shrine 品牌的方式。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1Vzs31NWpv0YlZ2ejSZl6PEYqofYiNSFM%2Fcasestudies-shrine-color-imagerytreatment-duotone.png" alt="Shrine 被選取的狀態" title="Shrine 被選取的狀態"></p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F176hAMN80PxLeqkcw4zypAG5RZJFEIlq3%2Fcasestudies-shrine-color-imagerytreatment-patternscrim.png" alt="Shrine 半透明遮罩" title="Shrine 半透明遮罩"></p><blockquote><p>心得：使用水平格線設計我覺得是很大的挑戰，因為目前大宗的使用方向還是垂直為主。不推薦水平格線的設計，除非是遊戲、活動或各分類展示等特殊需求，否則可慮使用者需長期瀏覽的狀態下，水平左右滑動並不方便。</p></blockquote><h1 id="文字與圖示"><a href="#文字與圖示" class="headerlink" title="文字與圖示"></a>文字與圖示</h1><p>Shrine 的文字比例提供各種內容所需。所有比例皆使用 Rubik 作為字體，包含 Rubik Light、Regular和Medium。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1VcsKVTP1QNKoPl52cNCHauFM0_526cdN%2Fshrinetypescale.png" alt="Shrine 字體 Rubik" title="Shrine 字體 Rubik"></p><p>Rubik 是非襯線字體，有著略為的圓角和多種的粗細可選擇。Rubik 是非常適合 Shrine 的字體，因為他是一種清晰、時尚、現代的字體，且他的圓角帶給人溫暖、友善和有趣的感覺。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1rec2nbnEXesSPYTicV_qbE6D9jmCuO5h%2Fcasestudies-shrine-type-1.png" alt="Shrine Rubik" title="Shrine Rubik"></p><p>Shrine 使用 Material Design 預設的 icon 系統。這些 icon 在小尺寸的時候也能保持清晰和俐落。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F15IUNXILSXZmMGcH2q8W_vbS8YlO91vzt%2Fcasestudies-shrine-icons-alt.png" alt="Shrine icon" title="Shrine icon"></p><blockquote><p>心得：文字選用不同於 Roboto 的圓角字體，營造柔和感是不錯的選擇。</p></blockquote><h1 id="形狀和元件"><a href="#形狀和元件" class="headerlink" title="形狀和元件"></a>形狀和元件</h1><p>元件的形狀根據他們的大小來分類。形狀分類讓你可一次性設定多個元件尺寸。形狀分類包含：</p><ol><li>小元件 (Small components):浮動動作按鈕。角落各切 4dp 斜角。</li><li>中元件 (Medium components):選單。角落各切 8dp 斜角。</li><li>大元件 (Large components):內容區塊。左上角切 24dp 斜角。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1f_u-uvDtYKjS0LEIevjDCbb1ALeH2Lks%2Fshrine-shape-b.png" alt="Shrine 元件" title="Shrine 元件"></p><h3 id="按鈕"><a href="#按鈕" class="headerlink" title="按鈕"></a>按鈕</h3><ol><li>文字按鈕：按鈕沒有邊框和陰影。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1ZfoWLGKLkJhKTvX0Bfjc19jk_4teiBRF%2Fcasestudies-shrine-textbutton.png" alt="Shrine 文字按鈕" title="Shrine 文字按鈕"></p><ol><li>主要按鈕：使用主色調 Shrine Pink 100，無陰影，圓角和細長形狀。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1dkaLfu-vECfRflUXOQDvYwFVHPmvIo_4%2Fcasestudies-shrine-buttonemphasis.png" alt="Shrine 主要按鈕" title="Shrine 主要按鈕"></p><h3 id="標籤-Chips"><a href="#標籤-Chips" class="headerlink" title="標籤 Chips"></a>標籤 Chips</h3><p>Shrine 在產品細節頁面使用可選擇的標籤。這些客制標籤有著圓角的邊線和按鈕做區別。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1D0EwzNkf19srLxcQ8jLzRgYddPbDYaRB%2Fcasestudies-shrine-chips.png" alt="Shrine 標籤" title="Shrine 標籤"></p><h3 id="頁籤"><a href="#頁籤" class="headerlink" title="頁籤"></a>頁籤</h3><p>Shrine 在桌機和平板使用頁籤當作導覽列。他們使用客制顏色、文字和狀態。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1BkLfpj3qECEoZ41gclPvw1w6NaQNM6jm%2Fcasestudies-shrine-tabs.png" alt="Shrine 頁籤" title="Shrine 頁籤"></p><h3 id="導覽列和背景區塊"><a href="#導覽列和背景區塊" class="headerlink" title="導覽列和背景區塊"></a>導覽列和背景區塊</h3><p>Shrine 使用客制的導覽抽屜在手機上。他可以透過點擊左上角的返回元件來展開導覽。<br>Shrine 的導覽抽屜使用客製化的文字、顏色和狀態。置中的文字是另一個客制的特點。<br>Shrine 的返回元件使用客制的顏色和形狀。背後圖層使用 app 的主色調，前圖層的左上角有一個客制的斜切角。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1o4ts_Rfz0X97TaapdQ-9YON6O3WzE3WZ%2Fcasestudies-shrine-backdrop-1b.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="圖像列表"><a href="#圖像列表" class="headerlink" title="圖像列表"></a>圖像列表</h3><p>Shrine 使用編排過的圖像列表來展示內容。編排過的圖像列表穿插使用不同大小（相同比例）的區塊創造有韻律的排版，且非常適合水平瀏覽內容。</p><p>編排過的圖像列表對於內容來說非常理想，因為他提升了每個商品的重點和新穎性，讓使用者不會過快的掃描內容。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1bzYYXTPp9EKoZ_D98LDkdpmmekDIUAK1%2Fcasestudies-shrine-horizontalimagegrid.png" alt="Shrine 圖像列表" title="Shrine 圖像列表"></p><h3 id="購物清單"><a href="#購物清單" class="headerlink" title="購物清單"></a>購物清單</h3><p>Shrine 使用可展開的底部清單讓使用者可以簡單的到達購物車。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F10tATQMRwpM8VtaVZKbVnBv3uzaXVDEMT%2Fcasestudies-shrine-shoppingcart-1b.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：對於圖像列表的水平滾動方式我不是很贊同，因為大多數使用者只會對前幾樣商品用比較慢的速度查看，到後面都會變成掃描式的，故意編排成眼睛不易掃瞄商品的方式，只會讓使用者變得不想用，因為他沒辦法快速的查看大量商品做比較。</p></blockquote><h1 id="互動"><a href="#互動" class="headerlink" title="互動"></a>互動</h1><p>Shrine 的互動設計使用增強的淡入、較長的延遲時間來漸進式營造優雅和愉悅的環境。</p><h3 id="起始畫面"><a href="#起始畫面" class="headerlink" title="起始畫面"></a>起始畫面</h3><p>Shrine 的產品 icon 動畫透過幾何的形狀變化來表達 logo。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1z58j-BuFmvDzpsnkpzPnpBENPAmy-RWb%2F01-launch.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="icon-動畫"><a href="#icon-動畫" class="headerlink" title="icon 動畫"></a>icon 動畫</h3><p>動畫 icon 增加樂趣且引領使用者操作。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1fghiYco9yt2kaHxdvpvvG5H1Rfys8xyi%2F02-icons.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="漸變得導覽列"><a href="#漸變得導覽列" class="headerlink" title="漸變得導覽列"></a>漸變得導覽列</h3><p>Shrine 的導覽漸變動畫強調淡出和長時間下達到放鬆和優雅的氣氛。時間延遲用於引起對重要元件的注意，例如購物車和結帳按鈕。在背後圖層使用交錯的淡入淡出來產生關連的效果。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1a5xbi_QBcDBvNwKFyY10vXqAE4oJlSAb%2F03-navigationtransitions.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="示範"><a href="#示範" class="headerlink" title="示範"></a>示範</h3><p>當第一次增加商品到購物車時，一個示範的動畫將展示商品已放置在購物車中。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SlTir4qcIH6gcKn2ZwVzAF5dA20rFtHF%2F04-tutorial.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：對於會動的 icon 和示範商品放入購物車這兩個設計很有興趣，若有機會的話會想要嘗試放在專案中嘗試。</p></blockquote><p>總結：Shrine 這個案例除了上述提到的水平滾動設計我不是很贊同外，其他的部分都很值得學習借鏡。是個很不錯的案例，那我們下次見囉～</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://material.io/design/material-studies/shrine.html" target="_blank" rel="noopener">Material Studies - Shrine</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這次 Material Design 案例介紹零售業的 APP 設計，相信大家都不陌生，如何呈現大量商品給使用者也是一門學問。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/categories/UXUI/Material-Design/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>JS Retry Function</title>
    <link href="http://annilla.github.io/2019/05/01/JS/JS-Retry-Function/"/>
    <id>http://annilla.github.io/2019/05/01/JS/JS-Retry-Function/</id>
    <published>2019-04-30T16:00:00.000Z</published>
    <updated>2019-04-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作上，參考一位前輩寫的 Retry function 的原理記錄，實做經過 N 秒後重複做一件事情的小程式。</p><a id="more"></a><p>這裡從取得 AD 帳號來舉例。費話不多說，先上 code。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">async getADRetry()&#123;</span><br><span class="line">    /*--------------------------</span><br><span class="line">        AD account Retry 機制</span><br><span class="line">        1. 成功取得 AD 回傳值</span><br><span class="line">        2. 無法取得 AD 開始 Retry</span><br><span class="line">        3. Retry 延遲秒數從 nextDelay 開始，每多一次就加 1 秒</span><br><span class="line">        4. Retry 次數最多 retryNumber 次</span><br><span class="line">        5. Retry 成功則回傳值，全部失敗則回傳 &apos;&apos;(空字串)</span><br><span class="line">    --------------------------*/</span><br><span class="line">    let NtAccount = &apos;&apos;;</span><br><span class="line">    let nextDelay = 0;</span><br><span class="line">    let retryNumber = 5;</span><br><span class="line"></span><br><span class="line">    for(let i = 0; i &lt; retryNumber; i++) &#123;</span><br><span class="line"></span><br><span class="line">        // 延遲 nextDelay 秒後</span><br><span class="line">        await delayTime(nextDelay);</span><br><span class="line">        // 取得 user</span><br><span class="line">        NtAccount = getUserName();</span><br><span class="line"></span><br><span class="line">        if (NtAccount === &apos;&apos;) &#123;</span><br><span class="line">            // 無法取得 AD</span><br><span class="line">            // nextDelay 下一次加 1 秒</span><br><span class="line">            nextDelay = nextDelay + 1000;</span><br><span class="line">            // Continue Retry</span><br><span class="line">            console.log(`No AD. Retry [$&#123;i + 1&#125;]: for $&#123;nextDelay&#125;ms...`);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 成功取得 AD 跳出迴圈</span><br><span class="line">            console.log(`Get AD.`);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return NtAccount;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其中 delayTime 函數用 promise 即可實做，只要傳入毫秒 ms 就能得到延遲的動作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Delay 延遲秒數</span><br><span class="line">export function delayTime (interval) &#123;</span><br><span class="line">    return new Promise((resolve) =&gt; &#123;</span><br><span class="line">        setTimeout(resolve, interval);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作上，參考一位前輩寫的 Retry function 的原理記錄，實做經過 N 秒後重複做一件事情的小程式。&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://annilla.github.io/categories/JS/"/>
    
    
      <category term="JS" scheme="http://annilla.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Google Material Studies - Reply</title>
    <link href="http://annilla.github.io/2019/05/01/UXUI/Google-Material-Studies-Reply/"/>
    <id>http://annilla.github.io/2019/05/01/UXUI/Google-Material-Studies-Reply/</id>
    <published>2019-04-30T16:00:00.000Z</published>
    <updated>2019-04-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次介紹的 Rally 是關於統計分析型的系統，這次要來看的是偏向應用型的系統 Reply。</p><a id="more"></a><h1 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h1><p>Reply 是一款幫助個人和群組溝通的 APP，其設計理念為提供清晰、易讀、直觀和易用的應用程式。</p><h3 id="功能性導向之美-Functional-aesthetic"><a href="#功能性導向之美-Functional-aesthetic" class="headerlink" title="功能性導向之美 (Functional aesthetic)"></a>功能性導向之美 (Functional aesthetic)</h3><p>Reply 的品牌精神強調溝通的重要性。因此，設計著重於功能品質，放置許多易用性元素。</p><p>Reply 的品牌時常伴隨著用戶的操作動作，例如從品牌的 logo 點擊展開導覽列。</p><blockquote><p>心得：這種會讓使用者頻繁編輯操作的 APP 也常常出現在公司內部，例如報價單、簽核表單等等的應用程式，所以在許多使用者操作行為下，如何清楚的呈現資訊和導引使用者動作變得非常重要。</p></blockquote><h1 id="產品架構"><a href="#產品架構" class="headerlink" title="產品架構"></a>產品架構</h1><p>Reply 使用類似於其他電子郵件應用程序的產品結構：包含新郵件和存檔郵件的收件箱，以及圍繞在組織和執行與這些郵件相關操作的 UI 。郵件可以加上星星標示、發送、刪除、標記為垃圾郵件，或以使用者自定義方式來整理郵件。</p><h3 id="專注在使用者任務"><a href="#專注在使用者任務" class="headerlink" title="專注在使用者任務"></a>專注在使用者任務</h3><p>由於使用者任務主要涉及內容生產和處理，因此螢幕空間專注於內容呈現而非其他 UI 元素。為確保內容和導航列都有足夠的空間，Reply 會針對桌機、平板、手機裝置使用不同的導航模式。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1XRLqbRWX43Sm4h1u8y04J4O7SKLY1ASs%2Fcasestudies-reply-family.png" alt="Reply 導覽模式" title="Reply 導覽模式"></p><h3 id="抽屜式導覽列"><a href="#抽屜式導覽列" class="headerlink" title="抽屜式導覽列"></a>抽屜式導覽列</h3><p>在桌機，Reply 使用標準的抽屜式導覽列。導覽列同時使用 icon 和文字。最上方包含設置、切換帳號和有搭配箭頭的 logo 拿來縮合導覽列。點擊搭配箭頭的 logo，將會縮合成軌道式導覽列。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1odXyicfqCiZ-NfE4Oi8iNP4wO-rmEZZ9%2Fcasestudies-reply-productarch.png" alt="Reply 桌機導覽列" title="Reply 桌機導覽列"></p><h3 id="底部-bar-導覽列"><a href="#底部-bar-導覽列" class="headerlink" title="底部 bar 導覽列"></a>底部 bar 導覽列</h3><p>在手機，Reply 使用底部 bar 導覽列。點擊左下角的 Reply icon ，他會從底部展開顯示抽屜式導航列，其中包含設定、切換帳戶頭像等動作。再次點擊 Reply icon 時，導航會關閉，導航列會關閉並返回底部預設的 bar 狀態。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1OVQU4zWktolBn0pEaT9fu_5xCxGsXzm9%2Fcasestudies-reply-bottomsheet.png" alt="Reply 手機導覽列" title="Reply 手機導覽列"></p><h3 id="軌道式導覽列"><a href="#軌道式導覽列" class="headerlink" title="軌道式導覽列"></a>軌道式導覽列</h3><p>透過點擊 Reply logo，軌道式導覽列可以展開變成抽屜式導覽列。Logo 旁邊的箭頭表明 Reply logo 是可交互的。</p><p>軌道式導覽列非常適合在平板電腦上使用，因為它可以顯示大量的目的地，且佔用很小的空間。當軌道式導覽列被展開時會顯示使用者創建的資料夾，讓用戶讀取資料夾的標題文字。</p><p>當收合時，軌道式導覽列不顯示使用者創建的資料夾。因為這些自創的資料夾都使用同個 icon，他們無法用單一 icon 做區別。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1tr41eJcVoKTnE7rq9vDBpaWUlVLdTlPa%2Fcasestudies-reply-railnav.png" alt="Reply 平板導覽列" title="Reply 平板導覽列"></p><blockquote><p>心得：手機底部的導覽列是我沒嘗試過的設計，因為工作上比較常做 Web 的應用，所以通常會使用上方 bar。但這樣使用下方 bar ，可以讓內容集中在上方，對於大量內容的呈現是很好的選擇。</p></blockquote><h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><p>Reply 使用 12 grid system。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1HuRM4KXNObz38eqqiQsqUusTWe_iua8E%2Fcasestudies-reply-grid-1a.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="視覺層級"><a href="#視覺層級" class="headerlink" title="視覺層級"></a>視覺層級</h3><p>Reply 使用顏色來區分不同的元件。例如，卡片容器是可見的，因為卡片具有白色表面顏色，而應用程式的背景是灰色的。</p><p>由於 Reply 有時候會顯示密集的內容，因此將陰影移除會降低視覺的複雜性。並將項目的間距拉小，從而為內容流出更多的空間。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1EmDZJ6SLz0CwwbxPiaYXqkTDbt2n_FKI%2Fcasestudies-reply-elevation.png" alt="視覺層級" title="視覺層級"></p><blockquote><p>心得：利用小間距和去除陰影來顯示密集的內容，這點我在工作上也常常用到，最近剛做產線人員掃條碼顯示 64 條資料要同時呈現在一個畫面上，光是設計就佔了很重要的角色，畢竟在寫程式之前可以先有個底，才不用花費大量時間在調整版面上。</p></blockquote><h1 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h1><p>Reply 的顏色主題使用一個主色調(深藍灰色)和一個輔助色(橘色)。</p><p>由於輔助色很少用到，因此 Reply 的 UI 通常是單色的，主要使用主色調的深淺變化。這種微妙的顏色主題可以輕鬆閱讀內容而不會分心，並且可以輕鬆看到頭像。</p><p>每當使用輔助色的時候，視覺上都會產生明顯的影響。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1XUGSUZeLYqhH--JBBHWLkRnJzVmX13oR%2Fcasestudies-reply-color.png" alt="顏色主題" title="顏色主題"></p><blockquote><p>心得：這種配色是我平常常用的方式，因為顏色少的話在配色方面比較不容易混亂，相較於上一篇介紹 <a href="../../../../../2019/04/05/UXUI/Google-Material-Studies-Rally/">Rally</a> 的 6 色，Reply 就是保守派。</p></blockquote><h1 id="文字與圖示"><a href="#文字與圖示" class="headerlink" title="文字與圖示"></a>文字與圖示</h1><p>Reply 使用 Work Sans 作為字體。不同比例的 Work Sans 提供了 Reply 內容所需的種類。透過使用六種不同的權重來呈現內容：Light，Regular，Medium，SemiBold和Bold。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1WzYaZo4FsrHq8dgXw-hQ0OViJ56dRDNM%2Freplytypescale.png" alt="字體" title="字體"></p><p>Reply 的 icon 具有細微的風格，表達品牌也同時專注於 icon 識別與功能。</p><ol><li>所有圖示使用一樣的格線架構確保一致性。</li><li>所有 Reply 圖示</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1J1sfDmQOyuvwfqAID1GY5d9bO66G5wVm%2Fcasestudies-reply-icons-alt.png" alt="圖示" title="圖示"></p><h1 id="形狀"><a href="#形狀" class="headerlink" title="形狀"></a>形狀</h1><p>元件根據大小使用不同的形狀類型，將形狀做分類可以讓螢幕一次放多個元件，分類包含：</p><ol><li>小元件 (S)：延伸的 FAB (floating action button)。圓角 50%。</li><li>中元件 (M)：卡片 (Cards)。圓角 0。</li><li>大元件 (L)：底部清單 (Bottom sheets)。圓角 12dp 12dp 0 0。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1Zv545CazM0c_SvUuZqnUg6hE7Dv-S3m0%2Freply-shape.png" alt="形狀分類" title="形狀分類"></p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1J8hIuMxjeCb-xIkot0krL8abdBIIIqfw%2Freply-shape-b.png" alt="形狀元件" title="形狀元件"></p><h1 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h1><h3 id="浮動動作按鈕-Floating-action-button"><a href="#浮動動作按鈕-Floating-action-button" class="headerlink" title="浮動動作按鈕 (Floating action button)"></a>浮動動作按鈕 (Floating action button)</h3><p>在手機上， Reply 在底部嵌入自定義的 FAB (Floating action button)。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1GhRm29BQNQHyLVPO0q_JdgYN4G82YjUS%2Fcasestudies-reply-nestedfab.png" alt="手機自定義的 FAB" title="手機自定義的 FAB"></p><p>在桌機上， Reply 使用自定義的 FAB 延伸，和抽屜式導覽做搭配。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1wNWnttN_BLCzr5bi2w-8VDEbCTV8sh66%2Fcasestudies-reply-extendedfab.png" alt="桌機自定義的 FAB" title="桌機自定義的 FAB"></p><h3 id="底部-bar-底部清單"><a href="#底部-bar-底部清單" class="headerlink" title="底部 bar, 底部清單"></a>底部 bar, 底部清單</h3><p>在手機，Reply 使用客制的底部 bar 和動作按鈕。</p><ol><li>預設的底部 bar</li><li>Reply 的底部 bar 使用客制的 icon, 顏色和形狀。Reply logo 做為選單功能 icon 被包含在元件中。客制形狀的底部 bar 包含浮動動作按鈕。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1jTk6oF1ib0k1wIhXnjTLn0kgEZxNznl5%2Fcasestudies-reply-bottombar-compare.png" alt="底部 bar" title="底部 bar"></p><p>在手機，底部 bar 是切換導覽和進行動作的主要方式。<br>當使用者選取多個進行動作時，底部 bar 會變成內文動作 bar。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1a-17T_B8F7nlrJc9pJ6opEdFG-cuccmZ%2Fcasestudies-reply-contextualactionbar.png" alt="內文動作 bar" title="內文動作 bar"></p><p>當使用者滑動頁面的時候，底部 bar 會從螢幕消失，只剩下 FAB 按鈕。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1I1RcG9mNZYJgCPZu9u_wsYBaiHxNIJ8Q%2Fcasestudies-reply-floatingfab.png" alt="滑動頁面剩下 FAB" title="滑動頁面剩下 FAB"></p><h3 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h3><p>Reply 將郵件呈現在客制的方角卡片上。每張卡片的間距非常小，因為顏色代表每張卡片的邊界(沒有使用任何陰影)。小間距讓更多內容可以呈現在螢幕上。</p><p>當卡片往右邊滑時，會出現對郵件標示星號的動作按鈕。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1FJEijR5c1uTkUcHsUUU0GHLuupehX39-%2Fcasestudies-reply-cards-1.png" alt="卡片往右滑" title="卡片往右滑"></p><p>當卡片往左邊滑時，會出現對郵件刪除的動作按鈕。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1WZlOkz0ZWCN4BhIWrvM7H4NsvlNxt5OI%2Fcasestudies-reply-cards-2.png" alt="卡片往左滑" title="卡片往左滑"></p><h3 id="小標籤-Chips"><a href="#小標籤-Chips" class="headerlink" title="小標籤 (Chips)"></a>小標籤 (Chips)</h3><p>Reply 的小標籤 (Chips) 使用客制的文字、顏色和圖像大小。在視覺上和品牌相吻合。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1bQe04HeiZ4CLLKEVXGs_B-yYd4mc_Ztx%2Fcasestudies-reply-chips-alt.png" alt="小標籤" title="小標籤"></p><blockquote><p>心得：此專案對許多 material components 做客製化的樣式修改，礙於工作要同時做設計和開發的時間限制下，我比較沒有對這方面下過功夫，或許下次我可以從微調一些元件樣式來增加對品牌的塑造。</p></blockquote><h1 id="交互動作"><a href="#交互動作" class="headerlink" title="交互動作"></a>交互動作</h1><p>Reply logo 的動畫其描繪靈感來自捲曲紙張路徑。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1CmJcj6oa4Qwo_i8KkNaruAtMOCNnnpfw%2F01-launch.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>Reply 使用較短的動畫時間來加強動作效率。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1MfIr9GSQ4iAfUNoAtKIUKX0lP6Kxt8kC%2F02-reply-navtransitions.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>插圖動畫在用戶使用的關鍵點出現，例如完成收件夾中每個項目的存檔後，觸發了一個慶祝動畫。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SapnI_EXJwjkvMb87hWWakpTMLIKoxiQ%2F03-reply-inboxzero.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>當使用者將頁面往下拉重新整理時， Reply 的 logo 動畫會出現在上方。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F120IhHIDr-BHTPrTmFnXpEHfsOJEdVsg8%2F04-reply-pulltorefresh.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：logo 動畫二次使用在 Refresh 頁面上，我覺得這點非常不錯，除了讓畫面生動起來也可以節省設計時間。</p></blockquote><p>總結：Reply 讓我學到更多對 material component 做更細微設計的靈感，希望之後有機會多做一點有趣的元件設計提升品牌形象。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://material.io/design/material-studies/reply.html" target="_blank" rel="noopener">Material Studies - Reply</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次介紹的 Rally 是關於統計分析型的系統，這次要來看的是偏向應用型的系統 Reply。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/categories/UXUI/Material-Design/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Google Material Studies - Rally</title>
    <link href="http://annilla.github.io/2019/04/05/UXUI/Google-Material-Studies-Rally/"/>
    <id>http://annilla.github.io/2019/04/05/UXUI/Google-Material-Studies-Rally/</id>
    <published>2019-04-04T16:00:00.000Z</published>
    <updated>2019-04-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Material Guildline 應該很多設計師都閱讀過 N 遍了，但要設計時如何在框架下做到客制這件事應該還是很疑惑。官網上提出了幾個業界的實例分享，這點讓我很有興趣，所以接下來我會一一對這些案例做介紹。因為我上班做的案子比較多是系統類的設計，所以我第一個想介紹比較類似的是 Rally 這個案例。下面內容會一邊介紹，一邊穿插自己在職場上的一些心得或想法。</p><a id="more"></a><h1 id="案例背景"><a href="#案例背景" class="headerlink" title="案例背景"></a>案例背景</h1><p>Rally 是一個管理財務的 APP，它會追蹤使用者的花費習慣並產生預測和適當的警示通知。Rally 是設計來呈現大量且密集的資訊，讓使用者可管理和研究資料模式。</p><h3 id="數據性導向之美-Data-driven-aesthetic"><a href="#數據性導向之美-Data-driven-aesthetic" class="headerlink" title="數據性導向之美 (Data-driven aesthetic)"></a>數據性導向之美 (Data-driven aesthetic)</h3><p>UI 採用暗灰色提高質感，並用亮色系凸顯資料。在資料與背景顏色高對比之下，讓使用者更容易閱讀 APP 內的圖表。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F16CNi69TWdOluvYdoeNwd5QK4P5nkE48-%2Fcasestudies-rally-brandattributes.png" alt="Rally UI" title="Rally UI"></p><p>UI 設計專注在查看、研究和了解資料。圖表呈現在儀表板上，讓使用者查看花費摘要和單一交易的細節。此 UI 設計透過排版、顏色和形狀的凸顯，讓畫面是密集且直覺的。</p><blockquote><p>心得：蠻喜歡這樣的暗色背景搭亮色的配色，但因目前公司的一般使用者還是比較習慣白色背景的配色模式，所以暗色背景的搭配在考慮時間和緊急度下，我自己是只敢用在自己小組內部用的專案上，比較沒有時間上的壓力。</p></blockquote><h1 id="產品架構"><a href="#產品架構" class="headerlink" title="產品架構"></a>產品架構</h1><p>Rally 架構是層級式的，讓使用者透過不同分類查看他們的財務。</p><p>內容根據個人財務區分不同的 sections，像是帳戶、預算、帳單。首頁著重在讓使用者前往這些 sections 的導向。</p><h3 id="導覽列"><a href="#導覽列" class="headerlink" title="導覽列"></a>導覽列</h3><p>因為 Rally 專注在呈現和描述不同面向的財務資訊，所以如何讓使用者能輕易的在這些sections 移動是很重要的。Rally 有一個固定位置的導覽列讓使用者能方便的切換 sections。在桌機和平板，Rally 使用的是直列式的導覽列。在手機，則是用橫向標籤的方式。這項的導航模式很理想，雖然它們總是在屏幕上，但佔用的空間非常小。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1PIJeS6GJLIExYX9mWOmb7UzWB0-Nl5VB%2Fcasestudies-family-rally.png" alt="Rally 導覽列" title="Rally 導覽列"></p><p>在直列式的導覽列中，每個目的地會用一個獨特的 icon 呈現。當 section 被點選的時候，icon 就會變亮且標題會出現在 icon 下方。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1-qsgxAELdMrSDPRKV-l-N_2dW5fYeljj%2Fcasestudies-rally-rail.png" alt="直列式的導覽列" title="直列式的導覽列"></p><p>在橫向標籤導覽中，當 section 被點選的時候，icon 就會變亮且標題會出現在 icon 右方，其他 icon 將會適當的移動位置。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1dHfpA4R1RVHn5zRSxInMllujv_C7pxv7%2Fcasestudies-rally-tabs.png" alt="橫向標籤導覽" title="橫向標籤導覽"></p><blockquote><p>心得：這邊如果導覽項目數目很少，這樣設計ok。但要注意往後的擴充性，若是 section 的數目增加是否要增加 sub section，手機上方 tab 的空間是否會不夠呈現，這些都是可能會碰到的問題。</p></blockquote><h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><p>Rally 使用 12 grid system。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1lAQUZTvSoen3matP1gpDJqVpKnZpARy6%2Fcasestudies-rally-grid-1a.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="視覺層級"><a href="#視覺層級" class="headerlink" title="視覺層級"></a>視覺層級</h3><p>Rally 使用色彩或紗幕來區分視覺上的層級。</p><p>舉例：當使用者滑動下方資料的時候，為確保統計圖固定在上方，使用不同的色彩來區分視覺層級。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1dq6I1nDovqvUydVHH5jTeI9VA6ftfz7H%2Frally-flow1-170808-casestudies-rally-elevation-1a.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>舉例：當有 popup 出現時，背景使用紗幕霧化背景。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1eBiwYfz1_8oSLrlWN_9uNjA_TGVqRBS2%2Fcasestudies-rally-elevation-scrim.png" alt="霧化背景" title="霧化背景"></p><blockquote><p>心得：用色彩和霧化效果來做層級區分我覺得還蠻實用且能提升質感。但在霧化背景的方式，需要考量到開發者是否能配合。若還有捨棄不了 IE 瀏覽器的公司，則會因為裝置的限制而必須要有第二方案來替代霧化的方式，比如說改用暗色且透明度低的樣式。</p></blockquote><h1 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h1><p>有時候需要顯示多個圖表在一個螢幕上，且每個圖表包含多個 sections。為了能足夠表達狀態， Rally 的配色採用 1 個主色調加上 5 個配色。這個設計讓系統呈現可讀性高且獨特的信息圖表。</p><p>當三個圖表出現在同一個螢幕上，每個圖表使用其中的兩個顏色。</p><ol><li>Primary Green and Dark Green.</li><li>Orange and Yellow.</li><li>Purple and Blue.</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1TnwFyAe31SQDfL21qM9hZ1dcGQVRyB23%2Fcasestudies-rally-color-75percentzoom.png" alt="配色" title="配色"></p><h3 id="顏色主題"><a href="#顏色主題" class="headerlink" title="顏色主題"></a>顏色主題</h3><p>除了 6 色以外， Rally 還有一個針對這 6 個顏色延伸 10 色版的調色盤。如下圖。</p><ul><li>圓圈形狀代表在此 APP 中有用到的色版</li><li>“P” 代表主色調</li><li>其他沒有文字的圓圈則是配色</li></ul><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F17gZmwIGdzlDr-Hl2jTu2SSgc_ATBGaPt%2Fcasestudies-rally-color-palettes.png" alt="顏色主題" title="顏色主題"></p><blockquote><p>心得：我還沒用過那麼多的配色設計過，因為顏色越多，需要考量的點會更複雜，可能需要找時間嘗試看看。</p></blockquote><h1 id="文字與圖示"><a href="#文字與圖示" class="headerlink" title="文字與圖示"></a>文字與圖示</h1><p>Rally 用兩種字體：Eczar 和 Roboto Condensed。</p><ol><li>Roboto Condensed：介面預設字體，適合密集的佈局。</li><li>Eczar：只用在首要標題和純數字清單，適合呈現數據。</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1t7i8LPPdmRkpdLV4u-p0oHvlhRTRbEb3%2Fcasestudies-rally-type.png" alt="字體" title="字體"></p><p>Rally 使用客製化的 icon 來呈現不同的 sections。</p><ol><li>所有圖示使用一樣的格線架構確保一致性。</li><li>所有 Rally 圖示</li></ol><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1zqz0w6AEK_D9Kxb8ntWTb8lXJHkGjakk%2Fcasestudies-rally-icons.png" alt="圖示" title="圖示"></p><blockquote><p>心得：在數據表達的部分使用另一種字體這是一個不錯的點子，可以凸顯出數據的呈現，會想要嘗試看看。圖示的部分，在統一格線架構下設計很合理，但在一般專案時間不足的狀況下，通常我會直接使用 Material Icons ，省去設計圖示這塊。</p></blockquote><h1 id="形狀"><a href="#形狀" class="headerlink" title="形狀"></a>形狀</h1><p>元件根據大小使用不同的形狀類型，將形狀做分類可以讓螢幕一次放多個元件，分類包含：</p><ol><li>小元件 (S)：文字輸入區塊(Filled text fields)。</li><li>中元件 (M)：卡片(Cards)。</li><li>大元件 (L)：數據表格(Data Tables)。</li></ol><p>元件都是 0 圓角。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1RpTrPB3UprQBcFfZh6ZnI4xNtUEyThIQ%2Frally-shape.png" alt="形狀分類" title="形狀分類"></p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1HuOHmVEu0rKr8Bfes708nHM9osOWiHIm%2Frally-shape-b.png" alt="形狀元件" title="形狀元件"></p><h1 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h1><h3 id="卡片和清單"><a href="#卡片和清單" class="headerlink" title="卡片和清單"></a>卡片和清單</h3><p>在 overview 頁面使用卡片去呈現多個財務摘要，像是 Accounts 和 Bills。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1gDGHc1gTW-FsOvmmXjZ6i5UF_U9CS0Ga%2Fcasestudies-rally-cards-1.png" alt="卡片" title="卡片"></p><p>當點選 Accounts，摘要資訊卡片會展開顯示更多細節在清單中。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F128elUbInT1Me7Ra3gJGsndRDRq6JbAcn%2Fcasestudies-rally-list.png" alt="清單" title="清單"></p><h3 id="橫幅、提示bar和對話框"><a href="#橫幅、提示bar和對話框" class="headerlink" title="橫幅、提示bar和對話框"></a>橫幅、提示bar和對話框</h3><ul><li>橫幅(Banners)：比較不那麼重要的訊息選擇用橫幅的方式呈現，通常會搭配圖示。</li><li>提示 bar 和對話框(Snackbars and dialogs)：重要的訊息則是用提示 bar 和對話框呈現，並不會包含圖示。</li></ul><p>在平板上的橫幅呈現在導覽列旁。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1X3ShTSv1KbUgazHtrp7wzXApy36TH1na%2Fcasestudies-rally-alerts-tablet.png" alt="橫幅 - 平板" title="橫幅 - 平板"></p><p>在手機上的橫幅呈現在最上方。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1qcuHjBEJaoYI-_Vel0SlCTr4MXrlO3Ta%2Fcasestudies-rally-alerts-mobile.png" alt="橫幅 - 手機" title="橫幅 - 手機"></p><p>在桌機上的橫幅則是自己一個直欄位專門呈現。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1aEZcxrXD6L__739kup3Zzi5x73UFoIiz%2Fcasestudies-rally-alerts-desktop.png" alt="橫幅 - 桌機" title="橫幅 - 桌機"></p><p>重要訊息出現提示 bar 或對話框。</p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1UGbGapFacfgXBv5ijUiAjwNBKmw2v9yh%2Fcasestudies-rally-dialogs-mobile.png" alt="對話框" title="對話框"></p><p><img src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1ccB2eglPzvAai1YC4QgkxgYlFErDtJFs%2Fcasestudies-rally-snackbar.png" alt="提示 bar" title="提示 bar"></p><blockquote><p>心得：沒有將這三個元件一起混用的經驗，頂多用其中的兩個而已，所以他這樣從訊息的重要性來區分用哪種元件的方式很值得參考。</p></blockquote><h1 id="交互動作"><a href="#交互動作" class="headerlink" title="交互動作"></a>交互動作</h1><p>Rally 在登入頁面顯示動畫 logo 增加 APP 的印象。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SdTGjLEmVjxVQfQHUxjrbWEO9GEnbHab%2F01-rally-launch.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>當用戶點開一個帳戶時，畫面會使用從內到外漸變展開的子頁面。點選返回後，則會從外到內漸變縮合回上一頁。加強使用者對深度的感知。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SjV2Eky-4d80UhOL4dm9k-EhG-r8IDm2%2F02-rally-parentchild.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>點選頁籤則是使用左右滑動的漸變動畫。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SkeVD6imJA_MwjipNR-DbNh1xw4au9yy%2F02-rally-tabs.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>當引入新頁面元素時會使用上方的進度條作為導引。使用時間差的轉圈動畫來凸顯圓餅圖。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SmqucW2ugbXboWf8SSjVngVtm63_VLxf%2F03-rally-sequencing.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><p>對話框使用彈跳的方式，以傳達訊息的急迫感。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1SrDQ1yFyIyFYWewhvEIIBZ9Mm0S-6G2z%2F04-rally-overshoot.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><blockquote><p>心得：對於父子頁面漸變展開的動畫提升深度感知這點很認同，但在實作上還沒有真正的實行過，可以思考或和其他程式開發者討論實際在 web 或 app 撰寫時的執行難度。</p></blockquote><p>總結：讀完這篇研究後，對於 Material Design 在系統設計上的應用來說，我覺得是很實用的，畢竟要做系統通常都是要大量顯示資訊，如何有條理讓使用者理解顯示資訊變得很重要。這篇在配色和交互動作的部分是很值得參考的案例。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://material.io/design/material-studies/rally.html" target="_blank" rel="noopener">Material Studies - Rally</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Material Guildline 應該很多設計師都閱讀過 N 遍了，但要設計時如何在框架下做到客制這件事應該還是很疑惑。官網上提出了幾個業界的實例分享，這點讓我很有興趣，所以接下來我會一一對這些案例做介紹。因為我上班做的案子比較多是系統類的設計，所以我第一個想介紹比較類似的是 Rally 這個案例。下面內容會一邊介紹，一邊穿插自己在職場上的一些心得或想法。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/categories/UXUI/Material-Design/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Google Material Theming - Workflow Tools</title>
    <link href="http://annilla.github.io/2019/03/01/UXUI/Google-Material-Theming-Workflow-Tools/"/>
    <id>http://annilla.github.io/2019/03/01/UXUI/Google-Material-Theming-Workflow-Tools/</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2019-02-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前我有寫過一篇<a href="/2018/09/13/UXUI/UX-UI-Workflow-Tool-in-2018/">我的 Design Workflow</a>，主要使用 <code>Sketch</code> 設計、 <code>XD</code> 做 prototype ，並利用 <code>Abstract</code> 做版控。 Material Design 官方也有一套 Workflow 並有配套的 Tools，今天就帶大家來一探究竟 Material 的 Workflow Tools。</p><a id="more"></a><h2 id="Material-Theming"><a href="#Material-Theming" class="headerlink" title="Material Theming"></a>Material Theming</h2><p>在介紹 Tool 前我們先來看看 <code>Material Theming</code> 是什麼？ Material Theming 就是將 Material Design 系統性的做客制，能更好地突出品牌識別效果。那如何將客制系統化呢？Tools 就佔了很重要的地位，我們來看看下列幾個系統化的工具吧。</p><video src="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1b7zteqiB7LCxy1R_NQwQZZ3_c8JqLE7T%2Ftheming-overview-applyingtheming.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="Material-Theme-Editor"><a href="#Material-Theme-Editor" class="headerlink" title="Material Theme Editor"></a>Material Theme Editor</h3><p><code>Material Theme Editor</code> 我第一次看就嚇到了！怎麼會有這麼好用的共用元件工具。Material Theme Editor 透過在 Sketch 安裝 plugin，自動生成共用 Material Design Library，且透過此 plugin 還可以快速改變整個 Library 的 style ，像是圓角、配色組合、文字樣式等等。突然覺得我自己之前做的共用 Material Design Library 好手工喔ORZ～超喜歡這個很有彈性的 Tool 設計，我考慮下個新專案開始將 Material Theme Editor 生成的 Library 加入使用行列，到時候心有餘力再分享一篇使用心得囉～</p><video src="https://storage.googleapis.com/spec-host-backup/mio-tools%2Fassets%2F1U9gJolER8kqyFS1QzU7qhCRa7KRgebPb%2Ftheme-editor-sitecrop-hero-final.mp4" autoplay loop style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;">your browser does not support the video tag</video><h3 id="Color-Tool"><a href="#Color-Tool" class="headerlink" title="Color Tool"></a>Color Tool</h3><p>配色工具的網站外面比比皆是。但是此 Color Tool 主要是在 Material 的指導原則下自動生成配色，在使用者選擇主色調後，經過演算挑出系統化的配色。我覺得這對設計師來說也節省了更多時間，不用再自己查相近色、互補色等，程式會自動為你配出適合的顏色。我下個新專案等不急要來 try try 看了~ XD</p><p><img src="https://lh3.googleusercontent.com/5Ip9FQt2c2JtXLPPXOgai8VCRRRr0qqtgmNqfpkrrrlBuGp1sncZznYZGc36duWsII70lShboiE2QbpN8vr5EzGa3-jAYV6xpzyx8177CrHiBjgvVv6KCmtac_w26TZL4vTUMvDe71-fX4A5y_fIMszYyjYqrP3TztfoydN9Uhnw5em2ahPQ5D3Bh3dPVrV7B511Vb68ea0annnJHlavVc-nrEUxhTBwMKVCB_kuSRB_qpxeOaaVCdgrVsTB6CLAgzqUQ2vG22E6PYCGhFVK3rJ1CSzZiqvpAETfKExUea13-DLb8U1Tzgj4B1MDIGdo0YmKWoetXtHbxBoUpv0qxbYMd3HX2STODN_wkZB1AlSdYayr6hq8OFVEOuomuBZ2l700WA4bOH63yQptUoMpjZQCuhN4G7DGX2ch_yTjkgpvyDYoQlqHJHJbo_S3yu-WjTKGB72dRg9L12Q4102lsteagt9cAY2oClVRZ23dHIw5eERBphsQnO9i5dLdE0PxFQ7qL6cP3Ifidbvpw0bM2oKTGIOdtkptScaceuj-OzdJB8ahlHqDmY6Iw_1dqKrSZ6Dpkxd65ueOM8fnaJQ2OUdb-ky4Z-meu8wbDYcAihdF6Qp2pwy8xwUXQ2yp3wpG4GTc2qQjfqikyCmigAdtJegPDUEcxZVs=w2206-h1192-no" alt="Color Tool" title="Color Tool"></p><h3 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h3><p>之前有用過 <code>Zeplin</code> 分享設計量測 prototype 給 developer，但因為要付費就不想用了。現在很多設計工具都可以線上分享 prototype ， sketch、XD 都可以。Google 也自己開發了一套 gallery 的功能可以線上分享 prototype ，他除了可以觀察每個設計元件的 spec 和評語外，還可以設定螢幕要鎖定成手機、平板、桌電等尺寸，重點是他免費而且無空間限制，更多 Gallery 用法可參考<a href="https://material.io/tools/gallery/about.html#more-tips-on-using-gallery" target="_blank" rel="noopener">連結</a>。最近剛好有案子前端需要多人協同合作就拿來放在 Gallery，我覺得意外好用，只是就一定要有 google 的帳號才能看 Gallery 有點不合理，希望他以後改成只要有 email 就能加入 share 中。</p><p><img src="https://cdn-images-1.medium.com/max/1200/1*IsLM8aDdA9MZCD7T_x8FjA.gif" alt="Gallery" title="Gallery"></p><p>目前我個人是非常看好這幾個 Material Tools 的，希望新專案能慢慢加入使用，讓 Design &amp; Developer Workflow 更流暢。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://material.io/design/material-theming/#" target="_blank" rel="noopener">Material Theming</a></li><li><a href="https://material.io/tools/theme-editor/" target="_blank" rel="noopener">Material Theme Editor</a></li><li><a href="https://material.io/tools/color/#!/?view.left=0&amp;view.right=0&amp;primary.color=6002ee" target="_blank" rel="noopener">Material Design Color Tool</a></li><li><a href="https://gallery.io" target="_blank" rel="noopener">Google Gallery</a></li><li><a href="https://material.io/tools/gallery/about.html#more-tips-on-using-gallery" target="_blank" rel="noopener">More tips on using Gallery</a></li><li><a href="https://medium.com/sketch-app-sources/first-week-of-using-google-gallery-sketch-c97dd94c8676" target="_blank" rel="noopener">First week of using Google Gallery + Sketch</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前我有寫過一篇&lt;a href=&quot;/2018/09/13/UXUI/UX-UI-Workflow-Tool-in-2018/&quot;&gt;我的 Design Workflow&lt;/a&gt;，主要使用 &lt;code&gt;Sketch&lt;/code&gt; 設計、 &lt;code&gt;XD&lt;/code&gt; 做 prototype ，並利用 &lt;code&gt;Abstract&lt;/code&gt; 做版控。 Material Design 官方也有一套 Workflow 並有配套的 Tools，今天就帶大家來一探究竟 Material 的 Workflow Tools。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/categories/UXUI/Material-Design/"/>
    
    
      <category term="Sketch" scheme="http://annilla.github.io/tags/Sketch/"/>
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Google Material Design - Introduction</title>
    <link href="http://annilla.github.io/2019/02/09/UXUI/Google-Material-Design-Introduction/"/>
    <id>http://annilla.github.io/2019/02/09/UXUI/Google-Material-Design-Introduction/</id>
    <published>2019-02-08T16:00:00.000Z</published>
    <updated>2019-02-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>從 2018 年 8 月開始 Material Design 進行大幅度的更新。到目前為止發展出許多豐富的資源、工具和工作流，讓設計師、工程師們合作更順利，也積極舉辦比賽、研討會並分享業界使用示例讓大家有更多互相學習的空間，最近會寫一系列關於 Google Material Design 的文章，雖然已經使用 Material Design 超過一年了，但還是想透過閱讀新文件的機會，來邊學邊分享給大家XD</p><a id="more"></a><h2 id="Introduction-Google-Material-Design"><a href="#Introduction-Google-Material-Design" class="headerlink" title="Introduction - Google Material Design"></a>Introduction - Google Material Design</h2><h3 id="設計目標-Goals"><a href="#設計目標-Goals" class="headerlink" title="設計目標 Goals"></a>設計目標 Goals</h3><ol><li><p>創建(Create)：創建一種視覺語言，將好的設計原則與科技結合。</p></li><li><p>統一(Unify)：跨平台設備下開發單一的底層系統，統一用戶體驗。</p></li><li><p>客製化(Customize)：擴展 Material 的視覺語言，為創新和品牌識別提供可靈活變化的基礎程式。</p></li></ol><h3 id="設計原則-Principles"><a href="#設計原則-Principles" class="headerlink" title="設計原則 Principles"></a>設計原則 Principles</h3><p>Material 是一種譬喻。Material Design 的靈感來自物理世界和其組成，包括它們如何反射光線和投射陰影。把我們所使用的媒介重新想像成紙張和墨水材質的變化。</p><ol><li><p>大膽、圖形導向、有意象的：Material Design 是依印刷設計方法來設計，包含字體設計(typography)、格線系統(grids)、間距(space)、比例(scale)、顏色(color)和意象(imagery)等。Material Design 創造層次感且有意義的體驗，讓使用者沈浸在環境中。</p></li><li><p>互動(Motion)蘊含意義：透過細微的反饋和關聯的漸變，來保持使用者動作的連續性和聚焦的效果。當元素出現在屏幕上時，它們會變化並重新組織環境，並通過互動產生新的變化。</p></li><li><p>靈活的基礎程式：Material Design 系統可以依品牌來擴展其視覺語言。它是由許多客製化的程式基底組成，可以無痛依設計加入組件(components)、插件(plug-ins)和設計元素(design elements)。</p></li><li><p>跨平台：Material Design 在不同平台保持相同的 UI，在 Android、 iOS、Flutter 和 web 上使用相同的共用組件。</p></li></ol><p>Material Design 維持每月更新的速度，對設計和工程師呈現其功能和擴展性，有興趣可以在官方<a href="https://github.com/material-components/material-components/blob/develop/ROADMAP.md/" target="_blank" rel="noopener">github</a>看到最新的釋出內容。下回我們將介紹 Material Design 的 Workflow 工作流，還有許多超好用的工具，我們下回見！</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://material.io/design/introduction/#" target="_blank" rel="noopener">Material Design Introduction</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;從 2018 年 8 月開始 Material Design 進行大幅度的更新。到目前為止發展出許多豐富的資源、工具和工作流，讓設計師、工程師們合作更順利，也積極舉辦比賽、研討會並分享業界使用示例讓大家有更多互相學習的空間，最近會寫一系列關於 Google Material Design 的文章，雖然已經使用 Material Design 超過一年了，但還是想透過閱讀新文件的機會，來邊學邊分享給大家XD&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/categories/UXUI/Material-Design/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Material Design" scheme="http://annilla.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core Upgrade 2.2 with Webpack4 &amp; Vue</title>
    <link href="http://annilla.github.io/2019/01/01/DotnetCore/NET-Core-Upgrade-2-2-with-Webpack4-Vue/"/>
    <id>http://annilla.github.io/2019/01/01/DotnetCore/NET-Core-Upgrade-2-2-with-Webpack4-Vue/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2018-12-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄 .NET Core 升級到 2.2 和 Webpack 升到 4 要注意的地方～</p><a id="more"></a><hr><h2 id="NET-Core-2-2-設定"><a href="#NET-Core-2-2-設定" class="headerlink" title=".NET Core 2.2 設定"></a>.NET Core 2.2 設定</h2><h3 id="csproj-專案檔"><a href="#csproj-專案檔" class="headerlink" title="csproj 專案檔"></a>csproj 專案檔</h3><p><code>TargetFramework</code> 版本要改成 2.2, <code>PackageReference</code> 改成單一個 <code>Microsoft.AspNetCore.App</code>，就可以囉～</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.2<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.AspNetCore.App"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Program-cs"><a href="#Program-cs" class="headerlink" title="Program.cs"></a>Program.cs</h3><p>修改 <code>Program.cs</code> 中 <code>class</code> 內的程式，參考如下程式片段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">namespace dotnet_core_vue_cli</span><br><span class="line">&#123;</span><br><span class="line">  public class Program</span><br><span class="line">  &#123;</span><br><span class="line">      public static void Main(string[] args)</span><br><span class="line">      &#123;</span><br><span class="line">        CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt;</span><br><span class="line">        WebHost.CreateDefaultBuilder(args)</span><br><span class="line">          .UseStartup&lt;Startup&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="VScode-VS2017-launch-設定"><a href="#VScode-VS2017-launch-設定" class="headerlink" title="VScode / VS2017 launch 設定"></a>VScode / VS2017 launch 設定</h2><p>為了在 webpack 上可以依據環境變數判斷不同的 bundle 內容，所以分別在 VScode / VS2017 的 launch 檔案設定環境變數。</p><h3 id="vscode-launch-json-for-VScode"><a href="#vscode-launch-json-for-VScode" class="headerlink" title=".vscode/launch.json (for VScode)"></a>.vscode/launch.json (for VScode)</h3><p><code>.vscode/launch.json</code> 在環境變數加上 <code>&quot;NODE_ENV=development&quot;: &quot;&quot;</code> 。這邊有個小技巧，就是 <code>=development</code> 是放在前面，而不是在後面的雙引號，這部分應該是一個小 Bug，但目前先用這個方式解決。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  "env": &#123;</span><br><span class="line">    "ASPNETCORE_ENVIRONMENT": "Development",</span><br><span class="line">    "NODE_ENV=development": ""</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Properties-launchSettings-json-for-VS2017"><a href="#Properties-launchSettings-json-for-VS2017" class="headerlink" title="Properties/launchSettings.json (for VS2017)"></a>Properties/launchSettings.json (for VS2017)</h3><p><code>Properties/launchSettings.json</code> 則直接加上環境變數即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  "environmentVariables": &#123;</span><br><span class="line">    "ASPNETCORE_ENVIRONMENT": "Development",</span><br><span class="line">    "NODE_ENV": "development"</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><h2 id="Webpack4-設定"><a href="#Webpack4-設定" class="headerlink" title="Webpack4 設定"></a>Webpack4 設定</h2><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>更新所有 package 並執行 npm install，參考如下設定。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"dotnet-core-vue-cli"</span>,</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "hmr": "cross-env ASPNETCORE_ENVIRONMENT=Development NODE_ENV=development dotnet run",</span><br><span class="line">    "build": "webpack --config webpack.pro.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  "dependencies": &#123;</span><br><span class="line">    "vue": "^2.5.21"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "@babel/core": "^7.2.2",</span><br><span class="line">    "@babel/preset-env": "^7.2.0",</span><br><span class="line">    "aspnet-webpack": "^3.0.0",</span><br><span class="line">    "babel-loader": "^8.0.4",</span><br><span class="line">    "cross-env": "^5.2.0",</span><br><span class="line">    "css-loader": "^2.1.0",</span><br><span class="line">    "cssnano": "^4.1.8",</span><br><span class="line">    "file-loader": "^3.0.1",</span><br><span class="line">    "mini-css-extract-plugin": "^0.5.0",</span><br><span class="line">    "node-sass": "^4.11.0",</span><br><span class="line">    "postcss-loader": "^3.0.0",</span><br><span class="line">    "postcss-preset-env": "^6.5.0",</span><br><span class="line">    "sass-loader": "^7.1.0",</span><br><span class="line">    "uglifyjs-webpack-plugin": "^2.1.1",</span><br><span class="line">    "vue-loader": "^15.4.2",</span><br><span class="line">    "vue-style-loader": "^4.1.2",</span><br><span class="line">    "vue-template-compiler": "^2.5.21",</span><br><span class="line">    "webpack": "^4.28.2",</span><br><span class="line">    "webpack-cli": "^3.1.2",</span><br><span class="line">    "webpack-dev-middleware": "^3.4.0",</span><br><span class="line">    "webpack-hot-middleware": "^2.24.3",</span><br><span class="line">    "webpack-merge": "^4.1.5"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><p>因為升到 <code>babel</code> 7 之後套件會整個改成 <code>@</code> 開頭的，所以舊的同名 package 就可以刪掉了。所以 <code>babelrc</code> 設定檔也要改成如下片段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;@babel/preset-env&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;modules&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="postcss-config-js"><a href="#postcss-config-js" class="headerlink" title="postcss.config.js"></a>postcss.config.js</h3><p>升級 <code>Vue-loader</code> 相容 <code>Webpack</code> 4 後就不會有自動 <code>autoprefixer</code> 的功能，需要自行引入 <code>postCSS</code> 來做這件事情。所以 <code>postcss.config.js</code> 設定檔要新增如下片段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-preset-env'</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">'cssnano'</span>: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-base-config-pro-js"><a href="#webpack-base-config-pro-js" class="headerlink" title="webpack.base|config|pro.js"></a>webpack.base|config|pro.js</h3><blockquote><p>這邊升級後沒有用最新 <code>vue-cli</code> 3 的原因是因為 <code>aspnet-webpack</code> HMR 預設吃的 <code>webpack</code> 設定是最外層的 <code>webpack.config.js</code>，但最新 <code>Vue-cli</code> 3 已經把 <code>webpack.config.js</code> 藏起來了，改成 <code>vue.config.js</code> 做後續加工處理，且我們不使用 <code>node server</code> ，而是用 <code>dotnet server</code> 做 <code>HMR</code>，所以其實已經不需要 <code>vue-cli</code> 3 了。</p></blockquote><p>因為我們需要分成 <code>develop</code> 和 <code>production</code> 的 <code>webpack</code> 設定，所以就可以把 <code>webpack</code> 的結構拆成一個共用的基底 <code>webpack.base.js</code>，然後 <code>develop</code> 就透過 <code>webpack-merge</code> 將 <code>base</code> 結合 <code>webpack.config.js</code>，而 <code>production</code> 則是將 <code>base</code> 結合 <code>webpack.pro.js</code>。</p><p>以下擷取部分比較重要的地方跟大家分享。</p><ul><li>webpack.base.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> devMode = process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="comment">// vue-loader 已經沒有預設 autoprefixer，所以 CSS 的部分要加上 postCSS</span></span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="comment">// MiniCssExtractPlugin 目前在 HMR 模式沒辦法打包成獨立的 CSS 檔案，所以在開發模式的時候，必須使用 vue-style-loader 替代，變成 meta 內的 style。</span></span><br><span class="line">        test: <span class="regexp">/\.scss?$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          devMode ? <span class="string">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'postcss-loader'</span>, <span class="comment">// for autoprefix</span></span><br><span class="line">          <span class="string">'sass-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          publicPath: <span class="string">'imgs/'</span>,</span><br><span class="line">          outputPath: <span class="string">'imgs/'</span>,</span><br><span class="line">          name: <span class="string">'[name].[ext]?[hash]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// Webpack4 需使用 MiniCssExtractPlugin 打包 CSS 成獨立的 CSS</span></span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"css/main.css"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// Webpack4 需使用 VueLoaderPlugin 才能正確讀取 .vue</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>webpack.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 webpack-merge 將 base 和 config 結合</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, &#123;</span><br><span class="line">  <span class="comment">/* mode 替換掉以前的 process.env</span></span><br><span class="line"><span class="comment">    new webpack.DefinePlugin(&#123;</span></span><br><span class="line"><span class="comment">      'process.env': &#123;</span></span><br><span class="line"><span class="comment">        NODE_ENV: '"development"'</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;),</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    noInfo: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'#eval-source-map'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>webpack.pro.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 webpack-merge 將 base 和 pro 結合</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, &#123;</span><br><span class="line">  <span class="comment">/* mode 替換掉以前的 process.env</span></span><br><span class="line"><span class="comment">    new webpack.DefinePlugin(&#123;</span></span><br><span class="line"><span class="comment">      'process.env': &#123;</span></span><br><span class="line"><span class="comment">        NODE_ENV: '"production"'</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;),</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  devtool: <span class="string">'#source-map'</span>,</span><br><span class="line">  <span class="comment">// 新的 Webpack 4 把優化的部份都移到 optimization 設定</span></span><br><span class="line">  <span class="comment">// 所以 UglifyJsPlugin 替代掉之前的 webpack.optimize.UglifyJsPlugin</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [<span class="keyword">new</span> UglifyJsPlugin()]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>今天的範例在 <a href="https://github.com/Annilla/dotnet-core-vue-cli/tree/v2.2.0" target="_blank" rel="noopener">github</a>，下回見～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄 .NET Core 升級到 2.2 和 Webpack 升到 4 要注意的地方～&lt;/p&gt;
    
    </summary>
    
      <category term=".NET Core" scheme="http://annilla.github.io/categories/NET-Core/"/>
    
    
      <category term="Vue" scheme="http://annilla.github.io/tags/Vue/"/>
    
      <category term=".NET Core" scheme="http://annilla.github.io/tags/NET-Core/"/>
    
      <category term="dotnet" scheme="http://annilla.github.io/tags/dotnet/"/>
    
      <category term="Webpack" scheme="http://annilla.github.io/tags/Webpack/"/>
    
      <category term="SPA" scheme="http://annilla.github.io/tags/SPA/"/>
    
      <category term="MVC" scheme="http://annilla.github.io/tags/MVC/"/>
    
      <category term="VScode" scheme="http://annilla.github.io/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>Adobe XD New Feature - Auto-Animate</title>
    <link href="http://annilla.github.io/2018/12/02/UXUI/Adobe-XD-New-Feature-Auto-Animate/"/>
    <id>http://annilla.github.io/2018/12/02/UXUI/Adobe-XD-New-Feature-Auto-Animate/</id>
    <published>2018-12-01T16:00:00.000Z</published>
    <updated>2018-12-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Adobe XD 新功能 Auto-animate 在 2018 年 10 月釋放，雖然現在介紹好像有點晚了，但看了介紹就覺得超威的，想要好好整理一篇順便收集目前線上不錯的 Auto-animate reference。</p><a id="more"></a><hr><h2 id="auto-animate-是什麼？"><a href="#auto-animate-是什麼？" class="headerlink" title="auto-animate 是什麼？"></a><code>auto-animate</code> 是什麼？</h2><p>一般來說設計師要模擬互動的過程，通常是靠著複製並微調數個 <code>artboards</code> ，並透過使用者點擊切換這些 <code>artboards</code> 來呈現互動效果，但以往 <code>XD</code> 的功能只能做到點擊淡入下個 <code>artboard</code>，過程是直接的切換而沒有漸進式的變化。新功能 <code>auto-animate</code> 則是讓設計師使用 <code>XD</code> 在同個元件不同 <code>artboards</code> 做屬性的微調後，對該元件加上 <code>auto-animate</code> 後就會自動呈現 <code>transition</code> 的效果，且觸發條件除了舊的 <code>tap</code>（點擊） 外還新增了 <code>drag</code>（拖拉） 的觸發動作，這樣就可以模擬手機左右滑或上下滑的互動效果，聽起來超令人興奮的。至於元件可支援的 <code>auto-animate</code> 屬性例如：大小、位置、旋轉等等，可參考此<a href="https://helpx.adobe.com/xd/kb/supported-auto-animate-features-in-xd.html" target="_blank" rel="noopener">官網說明</a>。</p><blockquote><p>PS. XD prototype 的觸發動作除了 <code>Tap</code> 和 <code>Drag</code> 外還有 <code>Time</code> 和 <code>Voice</code>，這個等以後有機會研究再跟大家分享。</p></blockquote><hr><h2 id="如何製作-auto-animate？"><a href="#如何製作-auto-animate？" class="headerlink" title="如何製作 auto-animate？"></a>如何製作 <code>auto-animate</code>？</h2><p>在解釋步驟前先來看一張官網 demo 左右拖拉互動的效果圖。</p><p><img src="https://helpx.adobe.com/content/dam/help/en/xd/help/create-prototypes-using-auto-animate/jcr_content/main-pars/image/Drag.gif" alt="模擬左右拖拉互動效果" title="模擬左右拖拉互動效果"></p><p>製作流程：</p><p>1) 將第一個使用者看到的 <code>artboard</code> 設為首頁（成功設置完 <code>artboard</code> 左上角會有房子的藍色 logo 圖示）。</p><p>2) 將要展示的滑動過程依順序將 <code>artboard</code> 一個一個連結好。其中要設定的參數如下：</p><ul><li>Trigger: 設置 Drag 屬性</li><li>Action: 設置 Auto-Animate</li><li>Destination: 設置要連結的下個 artboard </li><li>Easing: 選擇 transition 過程要使用的變換函數 (同 CSS)</li></ul><p>設定參數可參考下圖。<br><img src="https://helpx.adobe.com/content/dam/help/en/xd/help/create-prototypes-using-auto-animate/jcr_content/main-pars/procedure_1208997114/proc_par/step_2/step_par/image/Setting-up-Drag.png" alt="auto-animate 設定參數" title="auto-animate 設定參數"></p><p>將將！是不是很 easy ~</p><hr><h2 id="線上-auto-animate-作品分享"><a href="#線上-auto-animate-作品分享" class="headerlink" title="線上 auto-animate 作品分享"></a>線上 <code>auto-animate</code> 作品分享</h2><p>免費的 XD 作品我通常都是來找<a href="https://www.xdguru.com/3" target="_blank" rel="noopener">XDGuro</a>，大家可以自行來挖寶，下面推薦一些我看到不錯的 <code>auto-animate</code> 作品。</p><h3 id="Auto-Animate-–-Free-XD-UI-kit"><a href="#Auto-Animate-–-Free-XD-UI-kit" class="headerlink" title="Auto Animate – Free XD UI kit"></a><a href="https://www.xdguru.com/auto-animate-free-ui-kit-xd/" target="_blank" rel="noopener">Auto Animate – Free XD UI kit</a></h3><p><img src="https://www.xdguru.com/wp-content/uploads/2018/11/Auto-Animate-Free-UI-kit-1014x487.jpg" alt="Auto Animate – Free XD UI kit" title="Auto Animate – Free XD UI kit"></p><p>這是官方寫的 demo ，裡面列出了各種常用的動畫效果，例如：Loading Bar, Number Counter, Day/Night Switch, Drag Carrousel, Pull to Refresh, Swipe Away, Parallax… 你想得到的都做得出來。真的是太神奇了～有用 XD 的設計師必載的參考文件！！</p><h3 id="Mobile-XD-scrolling-interaction"><a href="#Mobile-XD-scrolling-interaction" class="headerlink" title="Mobile XD scrolling interaction"></a><a href="https://www.xdguru.com/mobile-xd-scrolling-interaction/" target="_blank" rel="noopener">Mobile XD scrolling interaction</a></h3><p><img src="https://www.xdguru.com/wp-content/uploads/2018/11/Mobile-XD-scrolling-interaction-1014x487.jpg" alt="Mobile XD scrolling interaction" title="Mobile XD scrolling interaction"></p><p>這個作品也是我一看到就立馬收藏的好物！他模擬了最上方 User 資訊如何縮放漸變的過程，互動感覺非常流暢～喜歡！！</p><h3 id="Ice-Cream-App-animation"><a href="#Ice-Cream-App-animation" class="headerlink" title="Ice Cream App animation"></a><a href="https://www.xdguru.com/ice-cream-app-animation-xd/" target="_blank" rel="noopener">Ice Cream App animation</a></h3><p><img src="https://www.xdguru.com/wp-content/uploads/2018/10/Ice-Cream-App-animation-1014x487.jpg" alt="Ice Cream App animation" title="Ice Cream App animation"></p><p>這個作品也用到了經典的點擊和拖拉效果，也值得收藏!<br>比較可惜的是左右滑動換冰淇淋的部分不知道為什麼有些卡卡的，還要再多研究一下XD</p><p>看完了這些讓我更加愛上 <code>XD</code>，最近發現他也開放 plugin 功能，但目前還沒看到什麼厲害的 plugin，另外版本控制這部分也是我期待的一點，希望他能盡快有這些功能～哈哈 （使用著 Sketch 卻望著 XD 的設計師心聲）</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://helpx.adobe.com/xd/help/create-prototypes-using-auto-animate.html" target="_blank" rel="noopener">Create prototypes using auto-animate</a></li><li><a href="https://helpx.adobe.com/xd/kb/supported-auto-animate-features-in-xd.html" target="_blank" rel="noopener">Supported properties for auto-animate in XD artboard transitions</a></li><li><a href="https://www.xdguru.com/auto-animate-free-ui-kit-xd/" target="_blank" rel="noopener">Auto Animate – Free XD UI kit</a></li><li><a href="https://www.xdguru.com/mobile-xd-scrolling-interaction/" target="_blank" rel="noopener">Mobile XD scrolling interaction</a></li><li><a href="https://www.xdguru.com/ice-cream-app-animation-xd/" target="_blank" rel="noopener">Ice Cream App animation</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Adobe XD 新功能 Auto-animate 在 2018 年 10 月釋放，雖然現在介紹好像有點晚了，但看了介紹就覺得超威的，想要好好整理一篇順便收集目前線上不錯的 Auto-animate reference。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Adobe XD" scheme="http://annilla.github.io/tags/Adobe-XD/"/>
    
  </entry>
  
  <entry>
    <title>2018 My Sketch Useful Plugins</title>
    <link href="http://annilla.github.io/2018/11/04/UXUI/2018-My-Sketch-Useful-Plugins/"/>
    <id>http://annilla.github.io/2018/11/04/UXUI/2018-My-Sketch-Useful-Plugins/</id>
    <published>2018-11-03T16:00:00.000Z</published>
    <updated>2018-11-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>這次整理我平常有用且覺得好用的 <code>Sketch Plugin</code> 有哪些，有了這些 Plugin 讓我又節省了許多寶貴的時間。</p><a id="more"></a><hr><h2 id="Abstract-版本控制"><a href="#Abstract-版本控制" class="headerlink" title="Abstract 版本控制"></a>Abstract 版本控制</h2><p>這個不用多說了，之前有先寫了一篇專門講 <code>Abstract</code> 版本控制的文章，連結參考<a href="../Git-Control-for-Using-Abstract-to-Manage-Sketch-Files">這裡</a>。</p><hr><h2 id="Content-Generator-內容生成器"><a href="#Content-Generator-內容生成器" class="headerlink" title="Content Generator 內容生成器"></a>Content Generator 內容生成器</h2><p>每次設計時作個資、照片等假資料又讓你心力憔悴了嗎？不用怕，<code>Content Generator</code> 讓你事半功倍，再也不用去 google 搜集資料。只要選起來要替換的部分，再設定要替換的內容即可輕輕鬆鬆完成。</p><p>Github: <a href="https://github.com/timuric/Content-generator-sketch-plugin" target="_blank" rel="noopener">https://github.com/timuric/Content-generator-sketch-plugin</a></p><p>Demo:</p><p>Generating pictures<br><img src="https://raw.githubusercontent.com/timuric/Content-generator-for-sketch-app/master/tutorial/userpics.gif" alt="Generating pictures" title="Generating pictures"></p><p>Generating names<br><img src="https://raw.githubusercontent.com/timuric/Content-generator-for-sketch-app/master/tutorial/names.gif" alt="Generating names" title="Generating names"></p><p>其他更多 Demo，去 repo 就看的到囉～</p><hr><h2 id="Paddy-間距設定工具"><a href="#Paddy-間距設定工具" class="headerlink" title="Paddy 間距設定工具"></a>Paddy 間距設定工具</h2><p>這個工具主要是因為 Sketch 如果要做按鈕等中間文字長度不固定的元件時，每次都需要重新拉上下左右的間距。使用此工具可以設定固定的間距減少重工的發生。當修改文字或內容時，會自動變更外面的形狀以符合設定。Sketch 未來會把此功能加進去，所以此工具的開發者目前不再繼續維護，但在 Sketch 將新功能加進去之前，還是可以用此工具來設定間距。</p><p>Github: <a href="https://github.com/DWilliames/paddy-sketch-plugin" target="_blank" rel="noopener">https://github.com/DWilliames/paddy-sketch-plugin</a></p><p>Demo:<br><img src="https://github.com/DWilliames/paddy-sketch-plugin/raw/master/.images/GIFs/main.gif" alt="Paddy" title="Paddy"></p><hr><h2 id="Sketch-Measure-生成-spec-工具"><a href="#Sketch-Measure-生成-spec-工具" class="headerlink" title="Sketch Measure 生成 spec 工具"></a>Sketch Measure 生成 spec 工具</h2><p>設計師和工程師之間要如何溝通 design spec 一直是一個很重要的環節。市面上有很多相關的付費軟體，但 <code>Sketch Measure</code> 的優勢就在於它是免費且可以生成獨立的 <code>HTML</code> 靜態檔（不需上網），只要有瀏覽器即可開啟。我想 Sketch 往後一定會出相關的功能，不過目前用此工具的感覺還不錯，且生成出來的畫面很漂亮。</p><p>Github: <a href="https://github.com/utom/sketch-measure" target="_blank" rel="noopener">https://github.com/utom/sketch-measure</a></p><p>Demo: <a href="http://utom.design/news/" target="_blank" rel="noopener">http://utom.design/news/</a><br><img src="https://camo.githubusercontent.com/87118bae9cca2b18441601d87ca8d6682984afa7/687474703a2f2f75746f6d2e64657369676e2f6578706f72744032782e706e67" alt="Sketch Measure" title="Sketch Measure"></p><hr><h2 id="Sketch-Palettes-調色盤儲存器"><a href="#Sketch-Palettes-調色盤儲存器" class="headerlink" title="Sketch Palettes 調色盤儲存器"></a>Sketch Palettes 調色盤儲存器</h2><p>會使用到 <code>Sketch Palettes</code> 功能的時機是因為我想把某一個專案的調色盤顏色群組，整個拿到另一個專案裡使用。他的用法是先匯出顏色群組，然後再另一個檔案進行匯入，使用上蠻直覺的。</p><p>Github: <a href="https://github.com/andrewfiorillo/sketch-palettes" target="_blank" rel="noopener">https://github.com/andrewfiorillo/sketch-palettes</a></p><p>Demo:<br><img src="https://github.com/andrewfiorillo/sketch-palettes/raw/master/palettes.png" alt="Sketch Palettes" title="Sketch Palettes"></p><hr><h2 id="Symbol-Instance-Locator-尋找符號工具"><a href="#Symbol-Instance-Locator-尋找符號工具" class="headerlink" title="Symbol Instance Locator 尋找符號工具"></a>Symbol Instance Locator 尋找符號工具</h2><p>Symbol 在 Sketch 是一個很好用的功能，可以建立一個元件讓許多頁面共用。但若是想找某個 Symbol 用在哪些地方的話要怎麼辦呢？我之前就遇到只要在某些頁面將 symbol 替換成另一個組件的問題，<code>Symbol Instance Locator</code> 可以列出所有用到此 symbol 的地方，點擊即可跳往所在頁面，非常實用。</p><p>Github: <a href="https://github.com/sonburn/symbol-instance-locator" target="_blank" rel="noopener">https://github.com/sonburn/symbol-instance-locator</a></p><p>Demo:<br><img src="https://raw.githubusercontent.com/sonburn/symbol-instance-locator/master/images/screenshot.png" alt="Symbol Instance Locator" title="Symbol Instance Locator"></p><hr><h2 id="Symbol-Organizer-符號整理器"><a href="#Symbol-Organizer-符號整理器" class="headerlink" title="Symbol Organizer 符號整理器"></a>Symbol Organizer 符號整理器</h2><p>每次建立 Symbol 時， Sketch 都會將元件新增在另一個 Symbol Page 上，久而久之，Symbol Page 就會變得凌亂不堪。<code>Symbol Organizer</code> 就是為了解決此問題才下載的，他可以依據設定值快速幫你排好所有在 Symbol Page 上的 Symbol，不用一個一個調間距啥鬼的，看完超感動！！如果一般頁面也可以用就好了，因為此工具僅適用在 Symbol Page 上，美中不足啊！如果有人有看到類似的工具快跟我說ＸＤ</p><p>Github: <a href="https://github.com/sonburn/symbol-organizer" target="_blank" rel="noopener">https://github.com/sonburn/symbol-organizer</a></p><p>Demo:<br><img src="https://raw.githubusercontent.com/sonburn/symbol-organizer/master/images/screenshot.png" alt="Symbol Organizer" title="Symbol Organizer"></p><hr><h2 id="Unsplash-圖片生成器"><a href="#Unsplash-圖片生成器" class="headerlink" title="Unsplash 圖片生成器"></a>Unsplash 圖片生成器</h2><p>這是 Unsplash 和 Sketch 官方合作的工具。為什麼我已經安裝 <code>Content Generator</code> 內容生成器，卻還要裝 <code>Unsplash</code> 呢？ 原因很簡單，因為 <code>Unsplash</code> 的圖片很漂亮，為了要讓 BOSS 能減少打槍的次數，用美美的圖片 Demo 是非常重要的戰力。我也經常去搜尋他的免費照片做設計，是個超佛心的網站。</p><p>Github: <a href="https://github.com/BohemianCoding/unsplash-sketchplugin" target="_blank" rel="noopener">https://github.com/BohemianCoding/unsplash-sketchplugin</a></p><p>Demo:<br><img src="https://github.com/BohemianCoding/unsplash-sketchplugin/raw/master/docs/unsplash-screenshot-001.png" alt="Unsplash" title="Unsplash"></p><hr><p>很感謝這些開發者做這些 Plugins ，讓設計師們能節省很多寶貴的時間，除了能更順利的闖關之外，還可以去做更多有意義的事情。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這次整理我平常有用且覺得好用的 &lt;code&gt;Sketch Plugin&lt;/code&gt; 有哪些，有了這些 Plugin 讓我又節省了許多寶貴的時間。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
    
      <category term="Sketch" scheme="http://annilla.github.io/tags/Sketch/"/>
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Git Control for Using Abstract to Manage Sketch Files</title>
    <link href="http://annilla.github.io/2018/11/04/UXUI/Git-Control-for-Using-Abstract-to-Manage-Sketch-Files/"/>
    <id>http://annilla.github.io/2018/11/04/UXUI/Git-Control-for-Using-Abstract-to-Manage-Sketch-Files/</id>
    <published>2018-11-03T16:00:00.000Z</published>
    <updated>2018-11-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>這篇要來介紹 <code>Abstract</code> 的主要功能，和我平常會怎麼使用他來做版本控制。</p><a id="more"></a><hr><h2 id="Projects-所有專案"><a href="#Projects-所有專案" class="headerlink" title="Projects 所有專案"></a>Projects 所有專案</h2><p>登入後的首頁就是顯示所有專案的頁面。專案分為 <code>ACTIVE</code> 和 <code>ARCHIVED</code>，這兩個分類主要是讓設計師團隊去區分哪些專案是還在進行的，哪些專案是已經結案的。專案只會越來越多，所以我覺得這個功能很好，可以在團隊合作時能很快的找到要設計的專案。我自己目前是一人設計，但目前管理的專案就有十幾個以上，往後專案數量只會遞增，所以我覺得這個功能對設計師來說是十分貼心。但要注意若要使用專案分類的話，是要自己去手動設定的喔，並不會自動知道你的專案已經結案了，所以這部分是手動設定也蠻合理的。</p><p><img src="https://lh3.googleusercontent.com/-2IXT8A9fh8LNqeFa7pv9eOVku3fBO0fYRQR3T7GdbaMUgaEmddURlFrA2RvBF-PI3HAzqHw3M40mKvpZAwAFo7YYD5Xleugxzc5K88Ty2XkOqwKLBiIghOtch6ycWlYTaJrLtd95nbmUUS60JO9tz_xGIl9M9eYuwH2sik7ddUyvx8bVVAt75p_mIVPHcQ-6Eo2IhZCGq-KG4VkLA7AcbAAC6jcWpuy5H3OgaTTGf2N_lSwtlm-gwLgIHhJlB2E56Q1QZDPaDAebgJ8c8t3PyD5nDw_AML2BgqdQISujtesJBi3P34_PhzG_HD63suwNy_0n72Qb3Y-mnIJKCA7Nnvjh-towFitQn9gex7mEk7Sk0Q_cYnlPH4t7oCRp5bx5x4iSkYXfG5xr_MWAF2N3dAJeCr5JPNjMBEUWjPhJfJPMFIqGtNhBDknNnqBc93OgeP3Y1lGxvbD2M30nb1QGijbr6m_g3ouzva4kUqZ--NlsXdJwueyJJv7v6HSNx3LSfOYAEvsUIaqb7PcY8am89PIdW4rK_BWMIpVRIVISs61xeD3uYoBRQ1enaWUQY18eMRB2BErTh9dGQg3uOzYKUE7L1kg5W6XteSJozWp9XvZBvVMo4T0B5x8263RZw0jwbsiXT8RfOgjx-GqAFRWUWTkoGzy2XkU=w1023-h619-no" alt="Projects/ACTIVE" title="Projects/ACTIVE"></p><p><img src="https://lh3.googleusercontent.com/pAv7exhVOlv-orzAfufPHGAP6I_hX345rCvKJHQcynwpP_L_X1fyAjLPwO3wGHyqCJ9073wuy0hPH6nU8tOIKwESYswPLMypk37S0xWQ00tYAYGy7w3cADAxDn3Xmb85VHEydHzqk1MA34BaH6wEjO7m_js3q8esOO07JE702_ee2yeisNnbny--tD54E_lZd_agJcSgLcr-I7cjEWiyZHB72S2BXMx0Ybn3Ylstvie5hYL69Im8LZN4QKgmOU-9gMm6rZxiyzDU8Sh1-qPpNqQ7YROhDP0UpIhE6Ju8yIQv3ElBZN8hhSQF5gpcMrFKsk_BVTAb9ZLz88_q9o_tAk18f5l8VaN97rO9JQzcytg2z-4qj-Jxu2OjuB9TLnCNjiPuUftI0vkiPJ2GuTXFiiI5Zr7iXJKu9az639PP3-hbj3Hx6x8_9dSXgWG12e8Jy4Fwni59R8_BN0zx6FYAngfSV1-k8I416Egj81_Tn98LQD-3JsShYEMfJrAix_qx9yyO-VesL2UEslhRF7rd87TYNtZNPe9g1LDHwlrDl89gpvB9dP1g6zNfMmr5gUB6yQvGDlFtkhZ8dzqptGSUtoYc4EbYxVGdLOUnRcQ8E31foJLkv3hubyklf7J4Dy4Q5Hf7SJ15BwkjX0vZHqYoXbA05z4L59MR=w1023-h618-no" alt="Projects/ARCHIVED" title="Projects/ARCHIVED"></p><blockquote><p>Tip: 預設專案的排序是照名稱，如果想要專案特別置頂的話，可以按專案卡片上的星星就會強制置頂囉～</p></blockquote><p>要開新專案就按 <code>New Project</code> 新增，詳細操作可以參考官網的<a href="https://www.goabstract.com/how-it-works/" target="_blank" rel="noopener">說明</a>，這裡就不再贅述。</p><p><img src="https://lh3.googleusercontent.com/1Vz2DcZM1aWCJjYeOv6hLGZ6Tc0n0cLd75Ap7ze5z2Lng3k24WvV8lGII0UsFLgsyZNnhu8eWe5uI5StppnBqSzSARjP93-FYEHrBRtSLujEWPwDitK5Ve0NofifsEDeDeplzpaouF_w9vrIwMJ7F9ESivEMZfm8EGLu8CspQXcn24eBgwJReBCv1HbmKZScDjbrOnSUs6MbITqwS5QLYLpLePRPGx-dBEBggKGNKq3i8qB5tEnQijuqyVjryDlGMJqLLjxNHVBIysXKV0rviQNJFB-kk3u4Y1FeJs2NzCSuZHXjxKIv-Hbc44EzsfDz10-YsDzWOym2UsukCu8QLdbueDe20oiF71qQTI8zE1aVaIF54Fb45PUtg0FPqP7Fl3bCpWeHf9tBcyo6g31dJRHUKAJ68Yx9nJhBCE2ZoVjYCbnTgqyvYHmthzyJNDgaGZGtIFsSBGjTXYMMNJVHUAmJjcnw3aqd8AKBX9qZVZG0c76YqSv0KIHCEmWd1oKVcpevvrafRQrxcLMGXV0ycAwmvQF2f6Jg30Gxfbs8fQ48IJK1cELVXm7mW5LMih7APLgpCdr-M0wYrPgOJN-FSuu6-6rU_jqej25j6ogYKuFI6Erzy81uV9HRbA65Mg6GxWXzJnzeX8H-2F1kWIKS03EX-ZuX5v5h=w1023-h614-no" alt="New Project" title="New Project"></p><hr><h2 id="Project-Overview-專案概況"><a href="#Project-Overview-專案概況" class="headerlink" title="Project Overview 專案概況"></a>Project Overview 專案概況</h2><p>點擊進入單一專案後，會看到 <code>Overview</code> 頁面，這頁是把專案的概況整理成一張張的小卡，讓設計師能快速回憶過往設計並能儘快進入狀態。比較特別的是其中有一個小卡 <code>About</code>，類似小白板的感覺，主要功能是紀錄專案的描述和相關文件的參照，我覺得這個部分超棒的！！！因為要設計一個專案，絕對是有許許多多的需求，這些需求總有一個管理的地方，而 Abstract 運用了這張卡片讓流程可以順利的參照。但美中不足的是如果可以像 <code>Azure Devops</code> 有個 task board 聯繫 git，並在 merge 的時候有 close task 的功能，將會對設計師團隊有很大的助益。</p><p><img src="https://lh3.googleusercontent.com/-_oB_2ao_K1fbmbMm1DD7plg9BaWkLBzZrRxVLAQK-_2EB9YldTsNHBkz27nljxApmRpBEEbP6fEVZaoxlBuxeiOgF6BU65lUnYTJaSKpprANPD4KGXmB8swyIFyQTtQBz7RcyqxzlYtTy7Bo53kkQl96iiqOvoUaxTsdpTJVuHwE_yWmsu7lz52wr0MhbT6axYvYrrHqKYda_JIOLkGkpyxofVzRM4U79UM_kS9oieYbckdHEcT7t_gyxqUdeygLyewc1rZxXrq2yzQjNs7W6vxYvR6PTh6-1jt97NrH32wl6sPLQpGe7nMUQc8-c4fyQR1dOnX9uQ3ndczBLumUGvSUlmsjkm-GzdEumIySQO3-DeIxZb20wRCVsgUAcO5uGsZO2iGwxgeVWyfjIe0vtX-WKtO6H2XKAwVXsT7_a-7QvYZEa1Vu-uz5mZnlb5vaseRwB7tiv_UnB1wwnXjbLrlaTUAsNGvfQmPIPdJKcQNGi_rfpx_sRG-_6fbgej0HCkzFRokgKP10CFesWbD9BpnnYWx9DS9_NYAJEZonLDdrbY3wDzTd8zpAHTObHzet1Q4DUw7spKDT5rBmgMnZU1YthqYBh5nBZh1ICphlxBP2Dn5Ugb-xMOO63qp2-kNMF5ra1tGdODUhJcMnVA4E0yfXnC-ETHj=w1023-h619-no" alt="Project Overview" title="Project Overview"></p><hr><h2 id="Project-Master-專案主分支"><a href="#Project-Master-專案主分支" class="headerlink" title="Project Master 專案主分支"></a>Project Master 專案主分支</h2><p>Master 就是此專案的主要 branch，分為 Overview/Commits/Files 三個小功能。正常來說 <code>Abstract</code> 不會讓設計師去 commit Master branch，所以如果在這裡去點擊 <code>EDIT IN SKETCH</code> 做任何變更是不會讓使用者 commit 上去的。在 Master branch 設計師只會有兩種選擇，要麻獨立開啟檔案不給你做 commit，要麻就是建議你開 branch 做完後再 merge 回來，這一點跟一般的 git 不太一樣，畢竟設計檔案也不會有用到 hotfix 的時候，所以這樣防呆也比較安全。</p><p><img src="https://lh3.googleusercontent.com/gjq4zyufwjTpLB7hQ_wg9Rusr5hnnhsqpdIKEbIT3EDk3Rnm5YQ-tk81C4ASq3dEgPx43wb3mxsjD6z8I0FZjJnRa_IgtyoLWmXutsxrnqYfCMmcftB1vKkk0LV8im7JxZ1nu0dbVFtA4NnfqstnC34WTBcSdrcjhQcC0nuW7SnRBaY_6OVWCt7TTV6hLdA-9Q_0AdniVqOjcOzgB3pLXPhtX1xUOZqFVS5Vsd2EEsAeOkz_DcEZlsMJ8k_a-MCywYO6HEmepK3ZgKAyCPMmA2WmINZt4TvwlbOp9yffx1TDcQ4ZwHPtaLgwOqO6bsyUPrUSSj7_9Dj53UuickyDTAYGbGWKK-UG8bFBBclYMGeksorPu4VV2oeevIeroJsPl8bGNgqByyTimoO0qIG7Qc_8691kwEfHRh19my6xaD6CPKCry6Pzsi8P-KKGjVZCR-iiEy0NpBWMwOYmj4RlrXonRjm62nd8QWK4SIjHcHWglFTVGQ44BL4dgD-k7kQsd28qTBRzpfj0uOIY8CLTpwkTuW10OP6KHeZ56EqcJR538Ae2cuoKvc2Wd93WRySCdf9yL2gR-twyNnxEW5RxiTLP9Fbw4P8DOdkqx1T60CvdXZwI5PgyyA0Ck2LnK33F32FxjHElds3NJiWil9rrCdntPU7tW3yl=w1022-h620-no" alt="Project Master Files" title="Project Master Files"></p><p><img src="https://lh3.googleusercontent.com/znS0iAXuVEvPOlhIOL_wlzCmYt9VgJCLEWJ4Lm9y0kAdCef9SfTel1NL8-h5hE1jGsra526Pp5BmxWDsLJnuE2cKNIirE8jQDcIOuDfKQi_SfBWFZvjBUKOyL5OtChPUQD26xUEW-xajZoHKmrJnAYKSfIPMqseCJzSQkrL_90DDnA_N20B-43SG4lYwBHHdQHe_XOPLkGt4fa6voR9KhnxBI4TCmx8Ba2AyRCnKp_u3XEUSTHR32Z-QjO-_z1GE8AKi3S2WJjDHRoIyAtW85D7YxZ3sXDpdzAr9cEAdreouTY_8bTt0zK9TzmhZfUuYnOJ6CoFTwA7YcBm5k4_x9qIA2FF1BSNHCqDvNnu4nyWlzVYiyA7JrBulgeodU7tCLCrdvpiUKXaPQ2yzM4LD8paoUFU6ljHYtYxVV6-4KOd4DDDnfYIqGpfSqrGEmQGoVejG7HJ-KJ90a-kycmgnFz08CrZ145IHu-9Bk2KZUAtkB5uRe769mojUtelz80Y74aA6VxD7Fn_R93-wJlMoeWIDg2GTHlMinW5aCNZdg4_7x1wsTHmNARvBeAYeLdXFdi7ZbuHJGfMum74xO4LLO5_Ym8pUzLD6o5f3vkOPqQJXm2dHulxrnt5tTER6Unh520zJO5DI8PZSxEEoNut23dntE9xeyXvR=w1026-h620-no" alt="Project Master Commits" title="Project Master Commits"></p><hr><h2 id="Project-Branches-專案分支"><a href="#Project-Branches-專案分支" class="headerlink" title="Project Branches 專案分支"></a>Project Branches 專案分支</h2><p>這個功能是 <code>Abstract</code> 的核心。上一段提到正常的版本控制流程如同 git 一般，應該要做 <code>NEW BRANCH</code> 的動作開新分隻，並在新分支做 <code>EDIT IN SKETCH</code>，儲存完後對分支進行 commit 的動作，確定都修改完成最後才會將數個 commit merge 到 Master branch。這樣做除了多人設計師可以合作外，如果像我一樣孤獨的設計師也有好處嗎？答案絕對是YES! 因為設計跟寫程式不一樣，同一個需求，常常需要多種設計方案來比較，但 BOSS 又是那種看不到畫面就感覺不到的人，所以這時候開 branch 就非常好用。不同 branch 代表不同的設計方案，這樣既不會干擾原設計，又可以將最後確定要做的 branch 做 merge，其他不需要的方案也可以留底做紀錄。超愛！！</p><p><img src="https://lh3.googleusercontent.com/YMwJ6QF8ELcQyu9v149YVgKqPMBd6coFba1xGhj0pZIcFo5pIXOj__M9q8HexsG98T642rfCSG5kBsW049dAs_RkpeWYzXNifgZqt8CYVuA8JJy4w8gdeokOfsHdmZpfh25QV4RLLXKeBzeDa39zltfoKn6wm4BA2KnzNCWCjMtUu9ZyvleFX_p7xTzenabPy9nq_nO3_c0ygpVfRfrsH3dxvfwNak18bIbcMBoZAHANMZpN7aWAuXTbwSroLPvc4E2IDYuG8DvtkyLGFIeQ0DxxazXNmF6nb7AD-mH3CtRQwO10grAK9Kh3TJKRutOXmyaypvQ52ppw8ixSG3CBmnvI6q7AX0d6-LQAhox_IElE6m2nRfSIh0ATu6NY4dqEpy4UEuu3-uveuzBqpKjBdA09UctNxrbpVwZSjZkPzmHgzEzEF9zpEjClwJvjCQGOm-mMBhhxPA8nwOnVXAib6EX8yQVA9JbgjoDlpl89B57hhcu9d4vOfTRGnQLbygT3Pd3wyc0cbVikM_Z1fdkN3HVAJ3nNz2LwkyDtjiwItopNVawGu2dxBRzmak5BMCEgAFOfi4fJV1ZFTjZoQ4kLWNOXA0OWcjDKkMlyb3VJ9tZSVD_c3G8TtTtb9TlCJ1LdtaLiBKPxKqmd3d4vGyyix9UbzwBAxkDX=w1022-h616-no" alt="Project Branches" title="Project Branches"></p><blockquote><p>Tip: 對每張預覽圖點進去都可以做 COMMENT/COMPARE/INSPECT 的功能。 COMMENT 就是給不同設計師合作時的討論。 COMPARE 就是可以比對設計圖修改前後的不同處。 INSPECT 是新功能尚未開放，但我猜應該是讓設計師可跟工程師溝通的 spec，這部分我目前是先用 Sketch 的 plugin 輸出成互動的 HTML 解決，如果 Abstract 之後有開放此功能的話，將會是一大福音。</p></blockquote><p><img src="https://lh3.googleusercontent.com/ZRGh0dvdsa4_9yjD0zsq1rYQ4rfJjo8VxLSG4q6jD4p-KvE0s-fwPaEdBGxV26ol9LNfC15pGrfNIrjBYf-7UbK0WkGw7wsMPhvf_Nb45ecIlD_aC_bK1y844cuiP-WftQaZF3sasfinPGXm_UF6ROnCWfMafg5feUwnYSmJWh04jnVD0wUbi6D-CuCjOm3gVc-hANHCKfmDskpjmlLFn-AeMoj79-3fmkKSa8aQjQUslFHRuwn8W4XC7xTCztFy8JP7sAStDVu8BEcmECyXKS4t2WqCwVJE1Q4ptuJWszgo_8yDFzW_1v_aL3wolRUIt0F0yf9IP0BxQzlATEDgyasinQB_JGYoUtlr0mUNZjg6QFeLT47ZDQr3pqf70_FjTON7eJsubnwUclXTonbHK6ERD_pZlECnVUIRy-T1vFWQYroxlZ4upb2BrEG3l1Haum6UdAuULeQr0D6qxeoNEscYFnTAWRCV1AcRUP0iy0yiXkYRSwzBeqnU0PjFbtHxtGmanY8ijx1spIjNQ_65bmHGlDaaOPT7yvvZwHDRlPWm7HH1dTr_gK1iXYPA2ZV0WKIn-sUV7vDkSMMH-0do6REnQvRT_Sp4S3jBSbWWeEnH-Ky9Cwpknc-_EDfZpaUvEN7Txx3qQACbTMqUyAurEepMlViHatVQ=w1023-h621-no" alt="Pages" title="Pages"></p><hr><h2 id="2018-對應-Sketch-Library-的功能"><a href="#2018-對應-Sketch-Library-的功能" class="headerlink" title="2018 對應 Sketch Library 的功能"></a>2018 對應 Sketch Library 的功能</h2><p>Sketch 的新功能 <code>Library</code>， Abstract 也有支援，而且使用起來相當順暢。當已經有一組設計元件/框架想要共用多個不同的專案時，我們可以開一個單獨的專案並將其 sketch 檔案 import 為 Library 做管理。在另一個要使用此 Library 的專案在 Files 的子頁面做 <code>Link Library</code> 的動作。這樣只要原本 Library 的元件有做修改，有使用到此共用元件的專案也會一併更新，如此一來就可以做到 Library 和一般專案分開管理，又可以做到互相關聯。這個新功能雖然是 Sketch 研發，但搭配上 Abstract 後更是如虎添翼，打 BOSS 嚇嚇叫！詳細實作可參考官網<a href="https://support.goabstract.com/hc/en-us/articles/360016370931-Build-a-Library" target="_blank" rel="noopener">說明</a>。</p><blockquote><p>Tip: <code>Import Sketch file as Library</code> 後檔案的 icon 會變成粉紫色鑽石（預設是橘黃色），這樣就表示有新增 Library 成功喔～</p></blockquote><p><img src="https://lh3.googleusercontent.com/AmGnIR7k0l-SdY5hD_94kR6OO-pCMseKchuEeBcrfPtlgEtmule4zv5GB-GCFafrWYnuB_WgLM-HUbq1MSn19wvglEBu_SZ330zh-lu3GTdbiPotoc6KAR7ZCCGL-4NHj8lfL23FxkM3Yc-wSD9Ecu8L5WWx0vMUznNXsSFOcKXOjnBS8uk_n2XefeKGlS7ZZrvXLmHi5vlY8bVrz-rRoBTSwZft6njuqlKpBw5KP5nmjqqEaIpO9rxbB3GT5nwbLmAZeVITJjVnJoOsPR5hX6Z_WD2j0Qn6Q8jj-mKr-Pu9gWRmdYy4oT6G5ZemDpRHtq7I5NcgO9-hDgOFGTXDEneff0tdKfuu7lfyKz7MDimBAqZELILN5dCf6V8gzIhoUHNHSU7XndmlXXUP-CUn_vJJxWeOBNlVB0tnbsG8UziCyG_hj0hKmyIHvEeYwxPwGwX_2uWOH_tt1MIguJGu1SXJIrzYOL9lTY7crgjFduWMztg5IoBv5F8pbXFBdNBGnPgPlf8p8SHfKm5-nKcsqgHnDd4ADyYuuDPIhDtenZc97AuLnBj6oJVkZwVoxvf8IZdrZACuDIIOiZJ02b9HNvUzIMvegeUBxxjKisJdd_yT81jTwq7rcXhW4vacP6RvdPriXhQ61zE6qm5vQLLMGfWL3Hjd3kxi=w1021-h619-no" alt="Library" title="Library"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這篇要來介紹 &lt;code&gt;Abstract&lt;/code&gt; 的主要功能，和我平常會怎麼使用他來做版本控制。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
    
      <category term="Sketch" scheme="http://annilla.github.io/tags/Sketch/"/>
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Abstract" scheme="http://annilla.github.io/tags/Abstract/"/>
    
  </entry>
  
  <entry>
    <title>UX/UI Workflow Tool in 2018</title>
    <link href="http://annilla.github.io/2018/09/13/UXUI/UX-UI-Workflow-Tool-in-2018/"/>
    <id>http://annilla.github.io/2018/09/13/UXUI/UX-UI-Workflow-Tool-in-2018/</id>
    <published>2018-09-12T16:00:00.000Z</published>
    <updated>2018-09-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>這篇要和大家分享平時設計 UX/UI 的時候我會用到的工具。以及在一堆爆炸的工作量中，要怎麼運用工具存活下來的故事 XD 。那我們就趕快開始吧。</p><a id="more"></a><p>這邊主要先介紹平常會用到的 Tool “粗略簡介”，中間會附註其他類似的工具，最後說明我的設計工作流。比較技術性的使用方式要等後續再慢慢出一些專門的文章。</p><hr><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p><img src="https://lh3.googleusercontent.com/B9jMSu2y8oF5JWE25zqlLeLdnXeFKu8VlAQGjGo7E-naFUVL0Q_svrwfEJc4wfyFGn_YGv7jdo2A8nL_qK2W0_7cy-8rMJZnc3PGERoQ7Yh8yRnxLFw28LW6u_1tqhGYH7cf9nIA5ymIS0-wMQB4jnZ07RdOUVrwhdSMvYhOfdPbs-lBESJPdIfRMA1uJgZt9-moEUPEAHwGV5H9EjDRgACHqJYSj3AVLL05WR3wxW1L0tC2R1bLCH5qfpAwVmD6jiBkwrs1rJEIHYBEMYWT5jPnXTzL1_GF4wo7QRR2hSrucL_88HEz0HPMhl_erd3NbQMykciPwCt9qleYapfcPhFb0IUndhW0YNWZaStiT-e1qK1gqYOtfi7NBuvzX8V9fvT3IyGUXA1R_TZcB0tdYNVe_xFogGYlWFmcs4Kf-M03ffDmIwBe-wAl2FXR2T3dAk0kyBngWTDVgCT7bHzpIeJUQ0wXOgd3G5ULCpnSwGmb-QgXssU3zfGnQPyCZz1YJ4j60m3XXc3D63gcMvVJtec3TzQrhm9z32LeSvtH3xLXftaCJvpu4OAt8qIPN3ccjQZvHVB_wFTcC327qTH8fZzDXc2_76PjyOM5mnRSzYTZWcmyemJiTJZECdSCsCXFh0tAltqbpSlAo5h5lXV7eA6VXf3GJOVf=w1000-h648-no" alt="Abstract" title="Abstract"></p><p><a href="https://www.goabstract.com/" target="_blank" rel="noopener">Abstract</a> 是針對 Sketch 的版本控制工具。</p><blockquote><p>“One place to version, manage, and collaborate on your Sketch files.” </p></blockquote><p>就如同使用 git 一般，所有的修改異動都會以 commit 的方式在雲端。再也不用像以往使用 adobe 系列狂複製做檔案備份的動作，使用 Abstract 就可以隨時查看要的版本，設計師再也不用害怕老闆說：“還是第一個版本好”(ＱＱ～心在淌血)。如果多人修改也可以開不同的分支(branch)，最後將確認的版本 merge 到 Master 即可。這簡直是設計師的救星啊～太多專案真的記不清之前做了什麼事，人也是會老的啊～(誤)</p><blockquote><p>其他類似的工具：<a href="https://plantapp.io/" target="_blank" rel="noopener">Plant</a>, <a href="https://kactus.io/" target="_blank" rel="noopener">Kactus</a>，網路上也有蠻多比較文章，可參考<a href="https://blog.prototypr.io/abstract-vs-kactus-vs-plant-a-guide-of-version-control-solutions-for-sketch-7da0a8ab5105" target="_blank" rel="noopener">這篇</a></p></blockquote><hr><h2 id="Sketch"><a href="#Sketch" class="headerlink" title="Sketch"></a>Sketch</h2><p><img src="https://lh3.googleusercontent.com/p8yHNZixT2X4KUTqi9yWP37AOStxEdS76FbW7-zGuPezghV337s75z3sUnxU-hqp9Nla_daY9xJMdc7fvGZ1QyiRBdI-Lk_FtvL6N_dIW9Szg__ZILi8MxIHzHtHMUe_8A2ICXIswUVtQlg0id5pP5IN6zoiw6uN10jKR_yofIwlH1Gy7GSlwR1Cwxlr3r-FcvvVg2FTZ5U1oUW-HD013ja9hGRhDhW2dkq0B5TiMtSEiNtWGx1oxIZ6YebTtMguiG2JEfur0Kd0Soerl-1DtKrWUmiwWhTYyU4CCWATsgqWLz1WSIi0AZmCCuOEZpELDpiq7McO3U_hUhdltH8ciGSf53BsLnsAi6VDP6w56Y_RhP7JkptmTRytB6_JrwQr34ZBfPlGvtwj9b7egeZ0q76srWyHVzNK_92T4wRFTzztlIeCluignUWrz5ObBOZiVrfHJpJ2DlVyz9NpMPYj_tJY-XTB7QqC8w0Guznx9-GxMcAEkFesDYULzWxQKSt-gKECfrEFJhmtPzPUm7Rf1Y9Fm6zjddvhz3lyYyEbZK8kHzpUTCUDAlDxU2upuEVbIv5-BGpyNsrOMG8Ivb1T87fpy7FLuMcz8Z67hwwh-jav9DqNI9_jpqwNuNeImgehSmeA_5CJ_n-4IUQkYnk-LTACH8P-U77n=w1024-h612-no" alt="Sketch" title="Sketch"></p><p><a href="https://www.sketchapp.com/" target="_blank" rel="noopener">Sketch</a> 設計 UI 的工具，我想他的大名鼎鼎幾乎每位介面設計師都聽過吧。其實我第一次接觸他的契機是因為我需要 “加快” 我的產出速度，為什麼這樣說呢？是設計師的話一定用過 Adobe 的 Illustrator, Photoshop，假設要你設計一個簡單的聯絡人清單介面，用 Adobe 系列做是非常手工的一件事情。但透過 Sketch 大量的外部 plugin 支援，只要引用幾個簡單的 plugin ，就可以快速產出假的聯絡人名稱、假照片、固定的間距(padding)。除此之外，還可以透過 plugin 輸出 spec 給工程師參考，再也不用自己拼命測量、打色碼，告訴工程師要怎麼切版了。為了要在團隊裡同時支撐大量專案的設計，如何在同樣高品質下，提升速度才是能讓自己存活的關鍵。</p><blockquote><p>其他類似的工具：<a href="https://www.adobe.com/tw/products/xd.html" target="_blank" rel="noopener">Adobe XD</a></p></blockquote><hr><h2 id="Adobe-XD"><a href="#Adobe-XD" class="headerlink" title="Adobe XD"></a>Adobe XD</h2><p><img src="https://lh3.googleusercontent.com/oN9oos92ac2EMe_33VCHYJKZpxFT0fE2NwTPMj5LQtPwN0pSFK5VXjktls7Xod7-K4XbRE2ZUXQQ_t6x3Omxl6lKZp3mM8Lpge8YHfHuWTAkodiDHD7zuzGRLm9vfDGzQQLBTehvt1-1hWByIHf8X33vXqer0DQcz-PqYkh_vJ3O4yTbY-XaZGJCY_39VkCUgVD_tMDNMqwK8mkUv_RDFEHK_WHoVrwXYYgvmSS21jTkb8pZdn4XKESnnASPVfodGiSAnPZjVOE_2XBdNMNhbQgXZN7QJMxseCB_erd1NYNb-k3Fox2WG9pxjfj-0zmYB3f1coj1aV9khiz4rlJmGQGjvz2ghfe94OR_gg0rIi4XYfrTKzIW1EjdbzrgHwAxJwyJbVGg_8ZMEd8hYGBYWMeN8p2rCinI9ixu44uZyCUT9hFsFgCmSHgivJhavxdNoPzSwqyMUVTDWccQCaR55IjmKYVtDKhpGmo8jFtxgrRW06ASGP-HCPeFFWcL9x4Ud33O7xugtcGG1GfFivnxD1ZC___vARwrfffz1-M8eTFDrDKAsh4G2bnWmFj4WN4HPHllpcDo4lsx4mjN2KG2aP4mPpJalHdYTxGU_RQkeBxRxP3q7JOtnMTcl8tTwEKhXWl_LJNfkO-70M190n8PFJFtG6J7Laqt=w720-h520-no" alt="Adobe XD" title="Adobe XD"></p><p>誒～～等等，剛剛不是說你是用 Sketch，<a href="https://www.adobe.com/tw/products/xd.html" target="_blank" rel="noopener">Adobe XD</a> 是相似的工具，那你相似的工具怎麼一次就用了兩款了呢？你以為我這麼愛搞死自己啊～還不是因為兩者的出發利基點不同，各有優缺點，所以只好截長補短囉。用 Sketch 主要還是因為有版控的關係，畢竟是以存活為優先啊。而 XD 的優勢呢主要是在他的 prototype ，可以很直覺的拉一拉，就可以輸出 URL 提供 user 使用測試，不用寫程式也可以先收集反饋，不然等到寫好程式又被打槍設計就會進入輪迴地獄了。但近期 XD 和 Sketch 兩者的功能越來越相像， Sketch 新增了 prototype 功能(但還有些小 bug)，而 XD 也在著手開發 plugin 生態，這兩個目前還是不分軒輊。目前本人還是偏向可搭版控功能的 Sketch 為主，而 XD 為輔的狀態。</p><blockquote><p>其他類似的工具：<a href="https://www.invisionapp.com/" target="_blank" rel="noopener">inVision</a>，inVision 除了可以線上做 prototype 之外，還主打模擬過場互動動畫，這款做動畫的威力可說是相當強大，有可能未來會強勢殺出。但目前主要是追求速度的提升，製作互動動畫的部分就沒多重琢磨，可能往後比較有空閒的時間再多加研究。</p></blockquote><hr><h2 id="設計工作流"><a href="#設計工作流" class="headerlink" title="設計工作流"></a>設計工作流</h2><p>我的設計流程大約是這樣的：</p><ol><li>接到需求</li><li>打開版控軟體 Abstract 創立新專案 (既有舊專案則同步檔案至最新)</li><li>用 Abstract 開 new branch</li><li>從 Abstract branch 打開 Sketch 設計 UI</li><li>設計一段落，建立 commit 上 Abstract</li><li>從 Sketch 檔案輸出靜態圖片</li><li>使用 Adobe XD 建立 prototype</li><li>輸出 prototype 網址給使用者測試</li><li>得到使用者回饋後，再決定 Abstract 是否要 merge 此 branch 到 Master 或是繼續新增 commit。最差的可能是全部被打槍，只好從 Master 再另開 branch 來做。</li></ol><p>上面的步驟依據使用者回饋多寡做多次的循環至 OK 為止。</p><p>以上是我到目前為止採用的 design workflow，提供給大家參考。之後會寫一系列關於 UX, UI 的工具使用技巧或介紹大咖的 design pattern 如何幫助我有效率的產出，敬請期待～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這篇要和大家分享平時設計 UX/UI 的時候我會用到的工具。以及在一堆爆炸的工作量中，要怎麼運用工具存活下來的故事 XD 。那我們就趕快開始吧。&lt;/p&gt;
    
    </summary>
    
      <category term="UXUI" scheme="http://annilla.github.io/categories/UXUI/"/>
    
    
      <category term="Sketch" scheme="http://annilla.github.io/tags/Sketch/"/>
    
      <category term="UX" scheme="http://annilla.github.io/tags/UX/"/>
    
      <category term="UI" scheme="http://annilla.github.io/tags/UI/"/>
    
      <category term="Adobe XD" scheme="http://annilla.github.io/tags/Adobe-XD/"/>
    
      <category term="Abstract" scheme="http://annilla.github.io/tags/Abstract/"/>
    
  </entry>
  
</feed>
